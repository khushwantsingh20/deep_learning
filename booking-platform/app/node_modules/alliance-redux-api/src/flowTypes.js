// @flow
import { Type } from 'typed-immutable';
import { List } from 'immutable';

// TODO: This doesn't actually do anything useful; any symbol will pass
export interface $SymbolSchema extends Symbol {}
export type TypeFunction = (value: any) => Type;
export type SerializeFunction = (value: any) => any;
export type Field = TypeFunction;
export type ModelDescriptor = { [key: string]: Field };
export type Selector = (state: {}, props: {}) => {};

type GetStateFunc = () => {};
export interface FetchCache {
    get(getState: GetStateFunc, filters: {}): Array<number | string>;

    set(getState: GetStateFunc, filters: {}, ids: Array<number | string>): void;
}
export type OrderedModelDefinition = {
    orderFieldName: string,
    orderWithRespectTo?: Array<string>,
};
export type ModelOptions = {
    transformResponse?: (data: Object) => Object,
    idFieldName?: string | Array<string>,
    endpoint?: string,
    modelId?: string,
    liveUpdateModel?: string,
    orderedModel?: OrderedModelDefinition,
    cache?: FetchCache,
    liveUpdateListener?: LiveUpdateListener,
    sortBy?: (
        comparatorValueMapper: (value: any, key: any) => any,
        comparator?: (valueA: any, valueB: any) => number
    ) => any,
    buildSelectors?: (defaultSelectors: {
        all: Selector,
        synced: Selector,
        local: Selector,
        meta: Selector,
    }) => { [key: string]: Selector },
};
export type ModelId = List<number | string> | number | string;
export interface ModelRecord {
    get(key: string): any;
    set(key: string, value: any): any;
    remove(key: string): any;
    getId(): ModelId;
    serialize(): { [key: string]: mixed };
    [key: $SymbolSchema]: {
        schema: Normalizr$Schema,
        assignEntity: (
            normalized: {},
            key: string,
            entity: {},
            input: {},
            entitySchema: Normalizr$Schema
        ) => void, // eslint-disable-line
    };
}
type LiveUpdatePayload = {
    action: 'update' | 'create' | 'delete' | 'bulk_update' | 'bulk_create',
    clientId: string,
    data: {},
    model: string,
};
export type LiveUpdateListener = (
    record: ModelRecord,
    payload: LiveUpdatePayload,
    store: {}
) => void;
export type ForeignKeyDescriptor = {
    target: ModelRecord,
    schemaFieldName?: string,
    many: boolean,
};
