// @flow
import invariant from 'invariant';
import { Typed } from 'typed-immutable';
import { $parse } from './Field';
import { isModel } from './Model';
import type { ModelRecord } from './flowTypes';

export const $foreignKey = Symbol.for('alliance-redux-api/isForeignKey');

type ForeignKeyOptions = { schemaFieldName?: string };

export default function ForeignKeyField(target: ModelRecord, options: ForeignKeyOptions = {}) {
    invariant(isModel(target), 'Foreign key must be passed a ModelRecord');
    const parse = value => {
        if (isModel(value)) {
            return value.getId();
        }
        return value;
    };
    const field = Typed('ForeignKey', parse);

    field[$parse] = parse;
    field.prototype[$foreignKey] = {
        ...options,
        target,
    };

    return field;
}
