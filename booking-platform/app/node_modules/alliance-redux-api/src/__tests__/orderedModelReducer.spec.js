import { combineReducers, createStore } from 'redux';
import Model, { $modelDefinition } from '../Model';
import createModelsReducer from '../createModelsReducer';
import { Id } from '../fieldTypes';
import { reorderEntity, getReorderPayload } from '../actions';

const todos = [
    { id: 1, title: 'Todo01', date: '2016-01-01', staffMemberId: 1, sortKey: 1 },
    { id: 2, title: 'Todo02', date: '2016-01-01', staffMemberId: 1, sortKey: 2 },
    { id: 3, title: 'Todo03', date: '2016-01-01', staffMemberId: 1, sortKey: 3 },
    { id: 4, title: 'Todo04', date: '2016-01-01', staffMemberId: 1, sortKey: 4 },
    { id: 5, title: 'Todo05', date: '2016-01-01', staffMemberId: 2, sortKey: 1 },
    { id: 6, title: 'Todo06', date: '2016-01-01', staffMemberId: 2, sortKey: 2 },
    { id: 7, title: 'Todo07', date: '2016-01-02', staffMemberId: 1, sortKey: 1 },
    { id: 8, title: 'Todo08', date: '2016-01-02', staffMemberId: 1, sortKey: 2 },
];

const data = {
    Entities: {
        todos,
    },
};

const Todo = Model(
    {
        id: Id,
        title: String,
        date: String,
        staffMemberId: Number,
        sortKey: Number,
    },
    'todos',
    'Todo',
    {
        orderedModel: {
            orderFieldName: 'sortKey',
            orderWithRespectTo: ['date', 'staffMemberId'],
        },
    }
);

const reducers = {
    Entities: createModelsReducer([Todo]),
};

const reducer = combineReducers(reducers);
const initialState = reducer(data, {});
const makeTodoFilter = (staffMemberId, date) => todo =>
    todo.staffMemberId === staffMemberId && todo.date === date;
const filteredTodoIds = (staffMemberId, date, state) =>
    Todo.selectors
        .all(state)
        .filter(makeTodoFilter(staffMemberId, date))
        .toList()
        .sortBy(todo => [todo.sortKey, todo.title])
        .map(todo => todo.id)
        .toJS();

test('re-order with respect to other entities', () => {
    const todo1 = Todo.selectors.all(initialState).get(1);
    const todo2 = Todo.selectors.all(initialState).get(2);
    const { staffMemberId, date } = todo2;
    let state = reducer(initialState, reorderEntity(todo1, todo2));
    expect(filteredTodoIds(staffMemberId, date, state)).toEqual([2, 1, 3, 4]);
    expect(getReorderPayload(state, todo1)).toEqual({
        reorderRelativeTo: 2,
        insertAfter: true,
    });
    state = reducer(state, reorderEntity(todo1, todo2));
    expect(filteredTodoIds(staffMemberId, date, state)).toEqual([1, 2, 3, 4]);
    expect(getReorderPayload(state, todo1)).toEqual({
        reorderRelativeTo: 2,
    });
    state = reducer(state, reorderEntity(todo1, todo2));
    expect(filteredTodoIds(staffMemberId, date, state)).toEqual([2, 1, 3, 4]);
    const todo3 = Todo.selectors.all(state).get(3);
    state = reducer(state, reorderEntity(todo3, todo2));
    expect(filteredTodoIds(staffMemberId, date, state)).toEqual([2, 3, 1, 4]);
    const todo4 = Todo.selectors.all(state).get(4);
    state = reducer(state, reorderEntity(todo4, todo3));
    expect(filteredTodoIds(staffMemberId, date, state)).toEqual([2, 3, 4, 1]);
    state = reducer(state, reorderEntity(todo1, todo2, { insertBefore: true }));
    expect(filteredTodoIds(staffMemberId, date, state)).toEqual([1, 2, 3, 4]);
});

test('re-order with respect to other entities (other lists)', () => {
    const todo1 = Todo.selectors.all(initialState).get(1);
    const todo2 = Todo.selectors.all(initialState).get(2);
    const list1Ids = filteredTodoIds.bind(null, todo2.staffMemberId, todo2.date);
    const todo5 = Todo.selectors.all(initialState).get(5);
    const list2Ids = filteredTodoIds.bind(null, todo5.staffMemberId, todo5.date);
    const todo7 = Todo.selectors.all(initialState).get(7);
    const list3Ids = filteredTodoIds.bind(null, todo7.staffMemberId, todo7.date);
    const list3 = { staffMemberId: todo7.staffMemberId, date: todo7.date };
    expect(list1Ids(initialState)).toEqual([1, 2, 3, 4]);
    expect(list2Ids(initialState)).toEqual([5, 6]);
    expect(list3Ids(initialState)).toEqual([7, 8]);
    let state = reducer(initialState, reorderEntity(todo1, todo2));
    expect(list1Ids(state)).toEqual([2, 1, 3, 4]);
    expect(list2Ids(state)).toEqual([5, 6]);
    expect(list3Ids(state)).toEqual([7, 8]);
    expect(getReorderPayload(state, todo1)).toEqual({
        reorderRelativeTo: 2,
        insertAfter: true,
    });
    state = reducer(state, reorderEntity(todo2, todo5));
    expect(list1Ids(state)).toEqual([1, 3, 4]);
    expect(list2Ids(state)).toEqual([5, 2, 6]);
    expect(list3Ids(state)).toEqual([7, 8]);
    expect(getReorderPayload(state, todo2)).toEqual({
        reorderRelativeTo: 5,
        insertAfter: true,
    });
    state = reducer(state, reorderEntity(todo5, todo1));
    expect(list1Ids(state)).toEqual([1, 5, 3, 4]);
    expect(list2Ids(state)).toEqual([2, 6]);
    expect(list3Ids(state)).toEqual([7, 8]);
    expect(getReorderPayload(state, todo5)).toEqual({
        reorderRelativeTo: 1,
        insertAfter: true,
    });
    state = reducer(state, reorderEntity(todo7, todo5));
    expect(list1Ids(state)).toEqual([1, 5, 7, 3, 4]);
    expect(list2Ids(state)).toEqual([2, 6]);
    expect(list3Ids(state)).toEqual([8]);
    state = reducer(state, reorderEntity(todo7, todo1));
    expect(list1Ids(state)).toEqual([1, 7, 5, 3, 4]);
    expect(list2Ids(state)).toEqual([2, 6]);
    expect(list3Ids(state)).toEqual([8]);
    const todo8 = Todo.selectors.all(initialState).get(8);
    state = reducer(state, reorderEntity(todo8, todo7, { insertBefore: true }));
    expect(list1Ids(state)).toEqual([1, 8, 7, 5, 3, 4]);
    expect(list2Ids(state)).toEqual([2, 6]);
    expect(list3Ids(state)).toEqual([]);
    state = reducer(state, reorderEntity(todo1, list3));
    expect(list1Ids(state)).toEqual([8, 7, 5, 3, 4]);
    expect(list2Ids(state)).toEqual([2, 6]);
    expect(list3Ids(state)).toEqual([1]);
    expect(getReorderPayload(state, todo1)).toEqual({
        staffMemberId: 1,
        date: '2016-01-02',
    });
    const todo4 = Todo.selectors.all(initialState).get(4);
    state = reducer(state, reorderEntity(todo8, todo4));
    expect(list1Ids(state)).toEqual([7, 5, 3, 8, 4]);
    expect(list2Ids(state)).toEqual([2, 6]);
    expect(list3Ids(state)).toEqual([1]);
    state = reducer(state, reorderEntity(todo8, todo4));
    expect(list1Ids(state)).toEqual([7, 5, 3, 4, 8]);
    expect(list2Ids(state)).toEqual([2, 6]);
    expect(list3Ids(state)).toEqual([1]);
});

test('re-order into separate lists (no specific entity target)', () => {
    const todo1 = Todo.selectors.all(initialState).get(1);
    const todo5 = Todo.selectors.all(initialState).get(5);
    let state = reducer(initialState, reorderEntity(todo1, todo5));
    expect(filteredTodoIds(todo5.staffMemberId, todo5.date, state)).toEqual([5, 1, 6]);
    expect(filteredTodoIds(todo1.staffMemberId, todo1.date, state)).toEqual([2, 3, 4]);

    // Same thing but this time just specify list details rather than specific entity
    // Defaults to end of list
    state = reducer(
        initialState,
        reorderEntity(todo1, {
            staffMemberId: todo5.staffMemberId,
            date: todo5.date,
        })
    );
    expect(filteredTodoIds(todo5.staffMemberId, todo5.date, state)).toEqual([5, 6, 1]);
    expect(filteredTodoIds(todo1.staffMemberId, todo1.date, state)).toEqual([2, 3, 4]);

    // Explicit about insert at end of list
    state = reducer(
        initialState,
        reorderEntity(
            todo1,
            {
                staffMemberId: todo5.staffMemberId,
                date: todo5.date,
            },
            { insertEnd: true }
        )
    );
    expect(filteredTodoIds(todo5.staffMemberId, todo5.date, state)).toEqual([5, 6, 1]);
    expect(filteredTodoIds(todo1.staffMemberId, todo1.date, state)).toEqual([2, 3, 4]);

    // Start of list
    state = reducer(
        initialState,
        reorderEntity(
            todo1,
            {
                staffMemberId: todo5.staffMemberId,
                date: todo5.date,
            },
            { insertStart: true }
        )
    );
    expect(filteredTodoIds(todo5.staffMemberId, todo5.date, state)).toEqual([1, 5, 6]);
    expect(filteredTodoIds(todo1.staffMemberId, todo1.date, state)).toEqual([2, 3, 4]);

    expect(() =>
        reducer(
            initialState,
            reorderEntity(
                todo1,
                {
                    staffMemberId: todo5.staffMemberId,
                    date: todo5.date,
                },
                { insertStart: true, insertEnd: true }
            )
        )
    ).toThrow(/specify one of insertStart or insertEnd as true/);

    expect(() =>
        reducer(
            initialState,
            reorderEntity(
                todo1,
                {
                    staffMemberId: todo5.staffMemberId,
                },
                { insertStart: true, insertEnd: true }
            )
        )
    ).toThrow(/ must contain all fields/);
});
