import { Record, List } from 'typed-immutable';
import createReducer from '../createReducer';

test('createReducer should validate state returned is valid', () => {
    const State = new Record(
        {
            items: List(Number),
            something: Record({
                moreItems: List(Number),
            }),
        },
        'My Record'
    );
    const reducer = createReducer(State, {
        action1() {},
        action2(state) {
            return state.something;
        },
        action3(state) {
            return state;
        },
        action4(state) {
            return state.items.push(1);
        },
        action5(state) {
            return state.update('items', items => items.push(1));
        },
    });

    const state = reducer(null, {});
    expect(() => reducer(state, { type: 'action1' })).toThrow(/Reducer returned undefined/);
    expect(() => reducer(state, { type: 'action2' })).toThrow(
        /instance of provided stateConstructor/
    );
    reducer(state, { type: 'action3' });
    expect(() => reducer(state, { type: 'action4' })).toThrow(
        /instance of provided stateConstructor/
    );
    reducer(state, { type: 'action5' });
});
