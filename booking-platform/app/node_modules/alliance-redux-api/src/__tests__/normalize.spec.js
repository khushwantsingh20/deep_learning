import { List, Maybe } from 'typed-immutable';
import Model from '../Model';
import ForeignKeyField from '../ForeignKeyField';
import normalize from '../normalize';

const data = {
    id: 1,
    title: 'Some Article',
    topic: {
        id: 1,
        title: 'Balloon Twirling',
        author: { id: 7, name: 'Dan' },
    },
    author: {
        id: 7,
        name: 'Dan',
    },
    contributors: [
        {
            id: 10,
            name: 'Abe',
        },
        {
            id: 15,
            name: 'Fred',
        },
    ],
};

const User = Model(
    {
        id: Number,
        name: String,
    },
    'users',
    'User'
);

const Topic = Model(
    {
        id: Number,
        title: String,
        authorId: ForeignKeyField(User, { schemaFieldName: 'author' }),
    },
    'topics',
    'Topic'
);

const Article = Model(
    {
        id: Number,
        title: String,
        // Field name in schema is same as field name on article
        topic: ForeignKeyField(Topic),
        // author on schema maps to authorId on article
        authorId: ForeignKeyField(User, { schemaFieldName: 'author' }),
        // contributors on schema maps to contributorIds on article
        contributorIds: ForeignKeyField(User, { schemaFieldName: 'contributors', many: true }),
        visits: Number(0),
        email: Maybe(String),
    },
    'articles',
    'Article'
);

test('normalize data', () => {
    expect(normalize(Article, data)).toEqual({
        result: 1,
        entities: {
            topics: {
                1: {
                    id: 1,
                    title: 'Balloon Twirling',
                    authorId: 7,
                },
            },
            articles: {
                1: {
                    topic: 1,
                    authorId: 7,
                    contributorIds: [10, 15],
                    id: 1,
                    title: 'Some Article',
                },
            },
            users: {
                7: { id: 7, name: 'Dan' },
                10: { id: 10, name: 'Abe' },
                15: { id: 15, name: 'Fred' },
            },
        },
    });
});

test('normalize nested foreign key data', () => {
    const Project = Model(
        {
            id: Number,
            title: String,
        },
        'projects',
        'Project'
    );
    const SubProject = Model(
        {
            id: Number,
            projectId: ForeignKeyField(Project, { schemaFieldName: 'project' }),
        },
        'subProjects',
        'SubProject'
    );
    const Task = Model(
        {
            id: Number,
            subProjectId: ForeignKeyField(SubProject, { schemaFieldName: 'subProject' }),
        },
        'tasks',
        'Task'
    );
    const Card = Model(
        {
            id: Number,
            name: String,
            taskId: ForeignKeyField(Task, { schemaFieldName: 'task' }),
        },
        'users',
        'User'
    );
    const data = {
        id: 4,
        name: 'Test Card',
        task: {
            id: 3,
            subProject: {
                id: 2,
                project: {
                    id: 1,
                    title: 'Test Project',
                },
            },
        },
    };
    const expectedEntities = {
        users: {
            4: { id: 4, name: 'Test Card', taskId: 3 },
        },
        tasks: {
            3: { id: 3, subProjectId: 2 },
        },
        subProjects: {
            2: { id: 2, projectId: 1 },
        },
        projects: {
            1: { id: 1, title: 'Test Project' },
        },
    };
    const result = normalize(Card, data);
    expect(result.entities).toEqual(expectedEntities);
});
