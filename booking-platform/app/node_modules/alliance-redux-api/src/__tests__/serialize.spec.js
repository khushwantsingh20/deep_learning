import { List, Maybe, Typed } from 'typed-immutable';
import Field from '../Field';
import Model from '../Model';
import ForeignKeyField from '../ForeignKeyField';
import { serializeModelData } from '../serialize';

const UpperString = Field(Typed.String, value => value.toUpperCase());
const PlusOne = Field(Typed.Number, value => value + 1);
const Negate = Field(Typed.Boolean, value => !value);
const CustomType = Field(Typed('CustomType', value => value), value => 'FIXED');
const DateType = Field(Date, value => value.toISOString());

test('serialize data based on model fields', () => {
    const User = Model(
        {
            id: Number,
            name: UpperString,
            username: String,
        },
        'users',
        'User'
    );
    expect(serializeModelData(User, { name: 'test' })).toEqual({ name: 'TEST' });
    expect(serializeModelData(User, { name: 'test', username: 'bob' })).toEqual({
        name: 'TEST',
        username: 'bob',
    });
    expect(serializeModelData(User, { username: 'bob' })).toEqual({ username: 'bob' });
    expect(serializeModelData(User, { unknownField: '???' })).toEqual({ unknownField: '???' });
});

test('serialize data based on model fields (Maybe types)', () => {
    const User = Model(
        {
            id: Number,
            name: UpperString,
            username: String,
        },
        'users',
        'User'
    );
    const MaybeModel = Model(
        {
            id: Number,
            maybeFk: Maybe(ForeignKeyField(User)),
            maybeUnrelatedString: Maybe(String),
            maybeString: Maybe(UpperString),
            maybeUnrelatedNumber: Maybe(Number),
            maybeNumber: Maybe(PlusOne),
            maybeUnrelatedBoolean: Maybe(Boolean),
            maybeBoolean: Maybe(Negate),
            maybeUnrelatedDate: Maybe(Date),
            maybeDate: Maybe(DateType),
            maybeCustom: Maybe(CustomType),
        },
        'users',
        'User'
    );

    expect(serializeModelData(MaybeModel, { maybeString: 'thing' })).toEqual({
        maybeString: 'THING',
    });
    expect(serializeModelData(MaybeModel, { maybeString: '' })).toEqual({ maybeString: '' });
    expect(serializeModelData(MaybeModel, { maybeString: null })).toEqual({ maybeString: null });
    expect(serializeModelData(MaybeModel, { maybeString: undefined })).toEqual({});
    expect(serializeModelData(MaybeModel, { maybeUnrelatedString: 'thing' })).toEqual({
        maybeUnrelatedString: 'thing',
    });
    expect(serializeModelData(MaybeModel, { maybeBoolean: true })).toEqual({ maybeBoolean: false });
    expect(serializeModelData(MaybeModel, { maybeBoolean: null })).toEqual({ maybeBoolean: null });
    expect(serializeModelData(MaybeModel, { maybeBoolean: undefined })).toEqual({});
    expect(serializeModelData(MaybeModel, { maybeUnrelatedBoolean: true })).toEqual({
        maybeUnrelatedBoolean: true,
    });
    expect(serializeModelData(MaybeModel, { maybeUnrelatedBoolean: false })).toEqual({
        maybeUnrelatedBoolean: false,
    });
    expect(serializeModelData(MaybeModel, { maybeNumber: 1 })).toEqual({ maybeNumber: 2 });
    expect(serializeModelData(MaybeModel, { maybeNumber: null })).toEqual({ maybeNumber: null });
    expect(serializeModelData(MaybeModel, { maybeNumber: undefined })).toEqual({});
    expect(serializeModelData(MaybeModel, { maybeUnrelatedNumber: 1 })).toEqual({
        maybeUnrelatedNumber: 1,
    });
    expect(serializeModelData(MaybeModel, { maybeUnrelatedNumber: 0 })).toEqual({
        maybeUnrelatedNumber: 0,
    });
    const d = new Date();
    expect(serializeModelData(MaybeModel, { maybeDate: d })).toEqual({
        maybeDate: d.toISOString(),
    });
    expect(serializeModelData(MaybeModel, { maybeDate: null })).toEqual({ maybeDate: null });
    expect(serializeModelData(MaybeModel, { maybeDate: undefined })).toEqual({});
    expect(serializeModelData(MaybeModel, { maybeUnrelatedDate: d })).toEqual({
        maybeUnrelatedDate: d,
    });
    expect(serializeModelData(MaybeModel, { maybeCustom: '??' })).toEqual({ maybeCustom: 'FIXED' });
    expect(serializeModelData(MaybeModel, { maybeCustom: null })).toEqual({ maybeCustom: null });
    expect(serializeModelData(MaybeModel, { maybeCustom: undefined })).toEqual({});
    expect(serializeModelData(MaybeModel, { maybeFk: undefined })).toEqual({});
    expect(serializeModelData(MaybeModel, { maybeFk: null })).toEqual({ maybeFk: null });
    expect(serializeModelData(MaybeModel, { maybeFk: 1 })).toEqual({ maybeFk: 1 });
});
