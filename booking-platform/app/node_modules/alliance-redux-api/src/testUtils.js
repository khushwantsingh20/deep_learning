/**
 * Define a jest matcher that will take a json string and parse it to an object then
 * compare it to the expected matcher.
 *
 * Usage:
 *    eg. to check the body that passed to a fetch call
 *
 *    expect(global.fetch).toHaveBeenCalledWith(
 *        'http://localhost/example/url/',
 *        expect.objectContaining({
 *            body: parseJsonMatch({
 *                title: 'blah',
 *                staffMemberId: null,
 *            }),
 *         })
 *    );
 *
 * @param matcher A jest matcher
 * @returns {{asymmetricMatch(*=): boolean}}
 */
export const parseJsonMatch = matcher => ({
    asymmetricMatch(actual) {
        const actualParsed = JSON.parse(actual);
        expect(actualParsed).toEqual(matcher);
        return true;
    },
});

export const abortSignalError = {
    asymmetricMatch(actual) {
        // This is a RequestError. Normally it should have a code
        // of '20' but seems that whatever is polyfilling this for
        // tests doesn't do that properly. Just check it contains
        // aborted in the text.
        expect(actual.message).toContain('aborted');
        return true;
    },
};
