import invariant from 'invariant';
import { API_CALL_AUTH_REQUIRED } from './api';

const pendingAuthActions = [];

/**
 * Clear any pending auth actions
 * @param  {Function} dispatch dispatch function for actions to retry
 */
export function clearPendingAuthActions(dispatch) {
    while (pendingAuthActions.length > 0) {
        const action = pendingAuthActions.pop();
        dispatch(action);
    }
}

/**
 * Cache any actions that fail due to an AuthException. Once authenticated
 * we can retry (@see clearPendingAuthActions)
 * @return {Function}
 */
export function apiAuthRetryMiddleware(loginActionType) {
    invariant(
        loginActionType,
        'apiAuthMiddleware must be passed the action type constant used for a successful login'
    );
    return ({ dispatch }) => next => action => {
        if (action.type === API_CALL_AUTH_REQUIRED && action.payload) {
            const { meta = {} } = action;
            const { requestTypes = {} } = meta;
            // Don't queue the login action for retry
            if (requestTypes.successType !== loginActionType) {
                pendingAuthActions.push(action.payload);
            }
        }
        if (action.type === loginActionType && !action.error) {
            clearPendingAuthActions(dispatch);
        }
        return next(action);
    };
}
