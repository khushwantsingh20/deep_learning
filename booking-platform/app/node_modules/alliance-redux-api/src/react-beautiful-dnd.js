import { customDetailRoute, updateOptimistic } from './actions';
import { $modelDefinition } from './Model';

export function updateEntityOrder(entity, groupKey, dropResult) {
    return async (dispatch, getState) => {
        const state = getState();
        const entityClass = entity.constructor;
        const groupedEntities = entityClass.selectors.groupedByOrderWithRespectTo(state);
        const allEntities = entityClass.selectors.all(state);

        const { draggableId, destination, source } = dropResult;
        if (destination == null) {
            return;
        }
        const entities = groupedEntities.get(groupKey);
        let payload;
        let optimisticPayload;
        if (entities) {
            const seq = entities.toIndexedSeq();
            const isSameList = source.droppableId === destination.droppableId;
            const isLast = destination.index >= entities.size;
            const isAfter = (isSameList && source.index < destination.index) || isLast;
            const to = isLast
                ? entities.last()
                : destination.index === -1
                ? entities.first()
                : seq.get(destination.index);
            payload = {
                reorderRelativeTo: to.getId(),
                insertAfter: isAfter,
            };
            const { orderedModel } = entity[$modelDefinition];
            const currentSortKey = to.get(orderedModel.orderFieldName);
            optimisticPayload = {
                [orderedModel.orderFieldName]: currentSortKey + (isAfter ? 0.01 : -0.01),
                ...groupKey,
            };
        } else {
            payload = groupKey;
            optimisticPayload = groupKey;
        }
        const { optimisticId, undoOptimistic } = dispatch(
            updateOptimistic(entity, optimisticPayload)
        );
        try {
            return await dispatch(
                customDetailRoute('patch', entity, 'reorder', payload, { optimisticId })
            );
        } catch (e) {
            undoOptimistic();
            throw e;
        }
    };
}
