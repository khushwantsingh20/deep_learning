"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Field;
exports.$parse = exports.$serialize = void 0;

var _typed = require("typed-immutable/lib/typed");

var $serialize = Symbol["for"]('@@alliance-redux-api/serialize');
exports.$serialize = $serialize;
var $parse = Symbol["for"]('@@alliance-redux-api/parse');
exports.$parse = $parse;

function Field(type, serialize) {
  var finalType = (0, _typed.typeOf)(type); // Create a wrapped type so that we aren't modifying one of the core types
  // directly when we assign $serialize below. The typeOf call is because
  // this is what Typed Immutable does underthe hood - in the case of Maybe
  // this is what it uses as the underlying type class. In order to have
  // access to the serialize function in serializeModelData we need to ensure
  // that the serialize function is stored against the final type.

  var wrappedType = (0, _typed.typeOf)((0, _typed.Typed)(finalType[_typed.Typed.label], function (value) {
    return finalType[_typed.Typed.read](value);
  })); // This is always on

  wrappedType[$serialize] = serialize; // eslint-disable-line

  return wrappedType;
}