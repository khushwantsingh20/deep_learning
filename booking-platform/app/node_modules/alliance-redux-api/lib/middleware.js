"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clearPendingAuthActions = clearPendingAuthActions;
exports.apiAuthRetryMiddleware = apiAuthRetryMiddleware;

var _invariant = _interopRequireDefault(require("invariant"));

var _api = require("./api");

var pendingAuthActions = [];
/**
 * Clear any pending auth actions
 * @param  {Function} dispatch dispatch function for actions to retry
 */

function clearPendingAuthActions(dispatch) {
  while (pendingAuthActions.length > 0) {
    var action = pendingAuthActions.pop();
    dispatch(action);
  }
}
/**
 * Cache any actions that fail due to an AuthException. Once authenticated
 * we can retry (@see clearPendingAuthActions)
 * @return {Function}
 */


function apiAuthRetryMiddleware(loginActionType) {
  (0, _invariant["default"])(loginActionType, 'apiAuthMiddleware must be passed the action type constant used for a successful login');
  return function (_ref) {
    var dispatch = _ref.dispatch;
    return function (next) {
      return function (action) {
        if (action.type === _api.API_CALL_AUTH_REQUIRED && action.payload) {
          var _action$meta = action.meta,
              meta = _action$meta === void 0 ? {} : _action$meta;
          var _meta$requestTypes = meta.requestTypes,
              requestTypes = _meta$requestTypes === void 0 ? {} : _meta$requestTypes; // Don't queue the login action for retry

          if (requestTypes.successType !== loginActionType) {
            pendingAuthActions.push(action.payload);
          }
        }

        if (action.type === loginActionType && !action.error) {
          clearPendingAuthActions(dispatch);
        }

        return next(action);
      };
    };
  };
}