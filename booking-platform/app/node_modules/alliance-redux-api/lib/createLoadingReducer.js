"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = createLoadingReducer;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _actions = require("./actions");

var _createReducer2 = _interopRequireDefault(require("./createReducer"));

var _Model = require("./Model");

/**
 * Create reducer that tracks syncing of entities
 * Actual state is defined in createModelReducer under 'loading' state key.
 */
function createLoadingReducer() {
  var _createReducer;

  // Tracks a specific entity has started a sync to server
  function entityLoadingStart(state, _ref) {
    var _ref$payload = _ref.payload,
        payload = _ref$payload === void 0 ? {} : _ref$payload,
        meta = _ref.meta;

    // eslint-disable-line
    if (payload.error || !meta.entity || !(0, _Model.isModelInstance)(meta.entity) || !meta.entity.modelUUID) {
      return state;
    }

    var path = [meta.stateKey, 'loading', 'syncingEntityUUIDs'];

    if (state.getIn(path).contains(meta.entity.modelUUID)) {
      return state;
    }

    return state.updateIn(path, function (items) {
      return items.push(meta.entity.modelUUID);
    });
  } // Tracks a specific entity has stopped (either success or fail) syncing to server


  function entityLoadingFinish(state, _ref2) {
    var _ref2$payload = _ref2.payload,
        payload = _ref2$payload === void 0 ? {} : _ref2$payload,
        _ref2$meta = _ref2.meta,
        meta = _ref2$meta === void 0 ? {} : _ref2$meta;

    // eslint-disable-line
    if (payload.error || !meta.entity || !meta.entity.modelUUID) {
      return state;
    }

    var index = state.getIn([meta.stateKey, 'loading', 'syncingEntityUUIDs']).findIndex(function (modelUUID) {
      return modelUUID === meta.entity.modelUUID;
    });

    if (index === -1) {
      return state;
    }

    return state.deleteIn([meta.stateKey, 'loading', 'syncingEntityUUIDs', index]);
  }

  return (0, _createReducer2["default"])(null, (_createReducer = {}, (0, _defineProperty2["default"])(_createReducer, _actions.actionTypes.addStart, entityLoadingStart), (0, _defineProperty2["default"])(_createReducer, _actions.actionTypes.deleteStart, entityLoadingStart), (0, _defineProperty2["default"])(_createReducer, _actions.actionTypes.updateStart, entityLoadingStart), (0, _defineProperty2["default"])(_createReducer, _actions.actionTypes.customDetailStart, entityLoadingStart), (0, _defineProperty2["default"])(_createReducer, _actions.actionTypes.add, entityLoadingFinish), (0, _defineProperty2["default"])(_createReducer, _actions.actionTypes["delete"], entityLoadingFinish), (0, _defineProperty2["default"])(_createReducer, _actions.actionTypes.update, entityLoadingFinish), (0, _defineProperty2["default"])(_createReducer, _actions.actionTypes.customDetail, entityLoadingFinish), (0, _defineProperty2["default"])(_createReducer, _actions.actionTypes.addFailure, entityLoadingFinish), (0, _defineProperty2["default"])(_createReducer, _actions.actionTypes.deleteFailure, entityLoadingFinish), (0, _defineProperty2["default"])(_createReducer, _actions.actionTypes.updateFailure, entityLoadingFinish), (0, _defineProperty2["default"])(_createReducer, _actions.actionTypes.customFailure, entityLoadingFinish), (0, _defineProperty2["default"])(_createReducer, _actions.actionTypes.fetchStart, function (state, _ref3) {
    var _ref3$payload = _ref3.payload,
        payload = _ref3$payload === void 0 ? {} : _ref3$payload,
        meta = _ref3.meta;

    if (payload.error) {
      return state;
    }

    return state.setIn([meta.stateKey, 'loading', 'isFetching'], true);
  }), (0, _defineProperty2["default"])(_createReducer, _actions.actionTypes.fetch, function (state, _ref4) {
    var meta = _ref4.meta;
    return state.setIn([meta.stateKey, 'loading', 'isFetching'], false);
  }), (0, _defineProperty2["default"])(_createReducer, _actions.actionTypes.fetchFailure, function (state, _ref5) {
    var meta = _ref5.meta;
    return state.setIn([meta.stateKey, 'loading', 'isFetching'], false);
  }), _createReducer));
}