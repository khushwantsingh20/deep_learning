"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = reduceReducers;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _invariant = _interopRequireDefault(require("invariant"));

/**
 * Helper to reduce multiple reducers to a single reducer
 * @param {...Array|Function} reducersConfig either a reducer function or an array of size 2;
 * first element being a path and the second a reducer function. The reducer will be passed the
 * state slice under the specified path. Path can be a single key (eg. 'item') or an array path,
 * (eg. ['entities', 'products'])
 * @returns Function
 */
function reduceReducers() {
  for (var _len = arguments.length, reducersConfig = new Array(_len), _key = 0; _key < _len; _key++) {
    reducersConfig[_key] = arguments[_key];
  }

  return function (currentState, action) {
    return reducersConfig.reduce(function (state, config) {
      if (Array.isArray(config)) {
        (0, _invariant["default"])(config.length === 2, 'Array parameter to reduceReducers should contain exactly 2 ' + 'elements; [key: String|Array<String>, reducer: Function]');

        var _config = (0, _slicedToArray2["default"])(config, 2),
            key = _config[0],
            _reducer = _config[1];

        var path = Array.isArray(key) ? key : [key];
        var current = state.getIn(path);

        var nextState = _reducer(current, action);

        if (current === nextState) {
          // If nothing has changed don't return a new state object which would
          // force re-render
          return state;
        }

        return state.setIn(path, nextState);
      }

      var reducer = config;
      return reducer(state, action);
    }, currentState);
  };
}