"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PermanentCache = exports.NoCache = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _immutable = _interopRequireDefault(require("immutable"));

var NoCache =
/*#__PURE__*/
function () {
  function NoCache() {
    (0, _classCallCheck2["default"])(this, NoCache);
  }

  (0, _createClass2["default"])(NoCache, [{
    key: "get",

    /**
     * Get a value from cache
     * @param getState {Function} get current redux state
     * @param filters {Object|Number|String} current filter (either object for a fetchEntities call or an id for fetchEntity)
     * @param selectFromRedux {Function} function to select current entity (for fetchEntity) or entities (for fetchEntities)
     * from redux. Can use this to determine if anything in redux has changed since last time (eg. may want to call
     * fetchEntities again if new items have been added as could change pagination).
     * @returns {null}
     */
    value: function get(getState, filters, selectFromRedux) {
      return null;
    }
    /**
     * Set a value in the cache
     * @param getState {Function} get current redux state
     * @param filters {Object|Number|String} current filter (either object for a fetchEntities call or an id for fetchEntity)
     * @param selectFromRedux {Function} function to select current entity (for fetchEntity) or entities (for fetchEntities)
     * from redux. Can use this to determine if anything in redux has changed since last time (eg. may want to cache the
     * return value of this so can compare in `get` to see if new items have been added since last call)
     * @returns {null}
     */

  }, {
    key: "set",
    value: function set(getState, filters, value, selectFromRedux) {
      return null;
    }
  }]);
  return NoCache;
}();

exports.NoCache = NoCache;

var PermanentCache =
/*#__PURE__*/
function () {
  function PermanentCache() {
    (0, _classCallCheck2["default"])(this, PermanentCache);
    this.cache = _immutable["default"].Map();
  }

  (0, _createClass2["default"])(PermanentCache, [{
    key: "get",
    value: function get(getState, filters) {
      return this.cache.get(_immutable["default"].fromJS(filters));
    }
  }, {
    key: "set",
    value: function set(getState, filters, value) {
      // Using immutable structure as key in a immutable map means lookups
      // use deep equality checks not just reference check so we can safely
      // rely on the same filters passed in resulting in same value coming
      // out
      this.cache = this.cache.set(_immutable["default"].fromJS(filters), value);
    }
  }]);
  return PermanentCache;
}();

exports.PermanentCache = PermanentCache;