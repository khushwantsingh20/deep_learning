"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = createModelReducer;
exports.$modelReducerDefinition = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _immutable = _interopRequireDefault(require("immutable"));

var _typedImmutable = require("typed-immutable");

var _invariant = _interopRequireDefault(require("invariant"));

var _createReducer = _interopRequireWildcard(require("./createReducer"));

var _Model = require("./Model");

var $modelReducerDefinition = Symbol["for"]('alliance-redux-api/modelReducerDefinition');
exports.$modelReducerDefinition = $modelReducerDefinition;

function createModelReducer(modelRecord) {
  var handlers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  (0, _invariant["default"])(modelRecord[_Model.$modelDefinition], 'model parameter passed to createModelReducer was not created by ' + 'alliance-redux-api/Model. You cannot pass regular immutable ' + "Records - you must use Model. Received: ".concat((0, _createReducer.stringify)(modelRecord)));
  var _modelRecord$$modelDe = modelRecord[_Model.$modelDefinition],
      pinnedFieldNames = _modelRecord$$modelDe.pinnedFieldNames,
      label = _modelRecord$$modelDe.label,
      IdType = _modelRecord$$modelDe.IdType,
      stateKey = _modelRecord$$modelDe.stateKey,
      partialRecordClass = _modelRecord$$modelDe.partialRecordClass,
      idFieldName = _modelRecord$$modelDe.idFieldName,
      orderedModel = _modelRecord$$modelDe.orderedModel;

  var EntitiesMap =
  /*#__PURE__*/
  function (_TypedMap) {
    (0, _inherits2["default"])(EntitiesMap, _TypedMap);

    function EntitiesMap() {
      (0, _classCallCheck2["default"])(this, EntitiesMap);
      return (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(EntitiesMap).apply(this, arguments));
    }

    (0, _createClass2["default"])(EntitiesMap, [{
      key: "get",
      value: function get(keyData) {
        // This makes up for shortcoming in typed-immutable; doesn't properly
        // apply type when you read via key from the map. This is particularly
        // annoying when you have a string from a url, eg "5" but needs to be
        // a number. This will fix that if your type is Id (which handles
        // converting numeric strings to Number's)
        return (0, _get2["default"])((0, _getPrototypeOf2["default"])(EntitiesMap.prototype), "get", this).call(this, this[_typedImmutable.Typed.type].key[_typedImmutable.Typed.read](keyData));
      }
    }]);
    return EntitiesMap;
  }((0, _typedImmutable.Map)(IdType, modelRecord, "".concat(label, " - Synced")));

  var PartialEntitiesMap =
  /*#__PURE__*/
  function (_TypedMap2) {
    (0, _inherits2["default"])(PartialEntitiesMap, _TypedMap2);

    function PartialEntitiesMap() {
      (0, _classCallCheck2["default"])(this, PartialEntitiesMap);
      return (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(PartialEntitiesMap).apply(this, arguments));
    }

    (0, _createClass2["default"])(PartialEntitiesMap, [{
      key: "get",
      value: function get(keyData) {
        // This makes up for shortcoming in typed-immutable; doesn't properly
        // apply type when you read via key from the map. This is particularly
        // annoying when you have a string from a url, eg "5" but needs to be
        // a number. This will fix that if your type is Id (which handles
        // converting numeric strings to Number's)
        return (0, _get2["default"])((0, _getPrototypeOf2["default"])(PartialEntitiesMap.prototype), "get", this).call(this, this[_typedImmutable.Typed.type].key[_typedImmutable.Typed.read](keyData));
      }
      /**
       * Pinned field names are just fields that always are included on partial records -
       * eg. id fields and fields used for sorting.
       */

    }, {
      key: "getPinnedFieldNames",
      value: function getPinnedFieldNames() {
        return pinnedFieldNames;
      }
    }]);
    return PartialEntitiesMap;
  }((0, _typedImmutable.Map)(IdType, partialRecordClass, "".concat(label, " - Partial")));

  var ModelState = (0, _typedImmutable.Record)({
    // These have been sync'd to server
    synced: EntitiesMap,
    // Map of unique optimistic update ID to record storing actual update details
    optimisticUpdates: (0, _typedImmutable.List)((0, _typedImmutable.Record)({
      optimisticId: String,
      entityId: IdType,
      statePath: (0, _typedImmutable.List)(_typedImmutable.Any),
      data: (0, _typedImmutable.Map)(String, _typedImmutable.Any)
    })),
    partialRecords: (0, _typedImmutable.Record)({
      synced: (0, _typedImmutable.Map)(_typedImmutable.Any, PartialEntitiesMap),
      local: (0, _typedImmutable.Map)(_typedImmutable.Any, (0, _typedImmutable.Map)(String, partialRecordClass, "".concat(label, " Partial - Local")))
    }),
    // These are only in local redux state, not sync'd to server
    local: (0, _typedImmutable.Map)(String, modelRecord, "".concat(label, " - Local")),
    // Any extra data - suitable for user extensions
    meta: (0, _typedImmutable.Map)(String, _typedImmutable.Any, "".concat(label, " - Meta")),
    // Used to track whether data is fetching or saving etc
    loading: (0, _typedImmutable.Record)({
      isFetching: Boolean(false),
      // This should be a Set, but not supported in typed-immutable
      syncingEntityUUIDs: (0, _typedImmutable.List)(String)
    }, "".concat(label, " - Loading"))
  }, label);
  var reducer = (0, _createReducer["default"])(ModelState, handlers);
  reducer[$modelReducerDefinition] = {
    stateKey: stateKey,
    modelStateRecord: ModelState,
    modelRecord: modelRecord
  };
  return reducer;
}