(function (global, factory) {
  if (typeof define === 'function' && define.amd) {
    define(['exports', 'immutable', './test', '../record'], factory);
  } else if (typeof exports !== 'undefined') {
    factory(exports, require('immutable'), require('./test'), require('../record'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.Immutable, global.test, global.record);
    global.immutables = mod.exports;
  }
})(this, function (exports, _immutable, _test, _record) {
  'use strict';

  (0, _test['default'])('can use Immutable.js objects in records', function (assert) {
    var X = (0, _record.Record)({
      a: new _immutable.Map({ foo: 'bar' })
    });

    var x1 = new X();
    assert.equals(x1.a.get('foo'), 'bar');
    assert.equals(x1.a.get('baz'), undefined);
    assert.equals(x1.a.get('baz', 'bacon'), 'bacon');

    var x2 = new X({
      a: new _immutable.Map({ spam: 'eggs' })
    });
    assert.equals(x2.a.get('spam'), 'eggs');
    assert.equals(x2.a.get('foo'), undefined);
    assert.equals(x2.a.get('baz', 'bacon'), 'bacon');

    var x3 = new X({
      a: { spam: 'eggs' }
    });
    assert.equals(x3.a instanceof _immutable.Map, true);
    assert.equals(x3.a.get('spam'), 'eggs');
    assert.equals(x3.a.get('foo'), undefined);
    assert.equals(x3.a.get('baz', 'bacon'), 'bacon');
  });

  (0, _test['default'])('can use Immutable.js classes in records', function (assert) {
    var X = (0, _record.Record)({
      a: _immutable.Map
    });

    assert.throws(function (_) {
      var x1 = new X();
    });

    var x2 = new X({
      a: new _immutable.Map({ spam: 'eggs' })
    });
    assert.equals(x2.a.get('spam'), 'eggs');
    assert.equals(x2.a.get('foo'), undefined);
    assert.equals(x2.a.get('baz', 'bacon'), 'bacon');

    var x3 = new X({
      a: { spam: 'eggs' }
    });
    assert.equals(x3.a instanceof _immutable.Map, true);
    assert.equals(x3.a.get('spam'), 'eggs');
    assert.equals(x3.a.get('foo'), undefined);
    assert.equals(x3.a.get('baz', 'bacon'), 'bacon');
  });

  (0, _test['default'])('sets work too', function (assert) {
    var Y = (0, _record.Record)({ s: new _immutable.Set(['foo']) });
    assert.equals(new Y().s.has('foo'), true);
    assert.equals(new Y().s.has('bar'), false);

    var y2 = new Y({ s: ['foo', 'bar', 'baz'] });
    assert.equals(y2.s.has('baz'), true);

    assert.throws(function () {
      var y3 = new Y({ s: null });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0L2ltbXV0YWJsZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBTUEsd0JBQUsseUNBQXlDLEVBQUUsVUFBQSxNQUFNLEVBQUk7QUFDeEQsUUFBSSxDQUFDLEdBQUcsWUFKRixNQUFNLEVBSUc7QUFDYixPQUFDLEVBQUUsSUFBSSxXQUFVLEdBQUcsQ0FBQyxFQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUMsQ0FBQztLQUNuQyxDQUFDLENBQUE7O0FBRUYsUUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQTtBQUNoQixVQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFBO0FBQ3JDLFVBQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUE7QUFDekMsVUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUE7O0FBRWhELFFBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO0FBQ2IsT0FBQyxFQUFFLElBQUksV0FBVSxHQUFHLENBQUMsRUFBQyxJQUFJLEVBQUUsTUFBTSxFQUFDLENBQUM7S0FDckMsQ0FBQyxDQUFBO0FBQ0YsVUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQTtBQUN2QyxVQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFBO0FBQ3pDLFVBQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENB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QUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUE7O0FBRTFDLFFBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsRUFBQyxDQUFDLENBQUE7QUFDMUMsVUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQTs7QUFFcEMsVUFBTSxDQUFDLE1BQU0sQ0FBQyxZQUFNO0FBQUUsVUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQTtLQUFFLENBQUMsQ0FBQTtHQUNuRCxDQUFDLENBQUEiLCJmaWxlIjoiaW1tdXRhYmxlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEltbXV0YWJsZSBmcm9tICdpbW11dGFibGUnXG5cbmltcG9ydCB0ZXN0IGZyb20gJy4vdGVzdCdcbmltcG9ydCB7UmVjb3JkfSBmcm9tICcuLi9yZWNvcmQnXG5cblxudGVzdCgnY2FuIHVzZSBJbW11dGFibGUuanMgb2JqZWN0cyBpbiByZWNvcmRzJywgYXNzZXJ0ID0+IHtcbiAgdmFyIFggPSBSZWNvcmQoe1xuICAgIGE6IG5ldyBJbW11dGFibGUuTWFwKHtmb286ICdiYXInfSksXG4gIH0pXG5cbiAgdmFyIHgxID0gbmV3IFgoKVxuICBhc3NlcnQuZXF1YWxzKHgxLmEuZ2V0KCdmb28nKSwgJ2JhcicpXG4gIGFzc2VydC5lcXVhbHMoeDEuYS5nZXQoJ2JheicpLCB1bmRlZmluZWQpXG4gIGFzc2VydC5lcXVhbHMoeDEuYS5nZXQoJ2JheicsICdiYWNvbicpLCAnYmFjb24nKVxuXG4gIHZhciB4MiA9IG5ldyBYKHtcbiAgICBhOiBuZXcgSW1tdXRhYmxlLk1hcCh7c3BhbTogJ2VnZ3MnfSksXG4gIH0pXG4gIGFzc2VydC5lcXVhbHMoeDIuYS5nZXQoJ3NwYW0nKSwgJ2VnZ3MnKVxuICBhc3NlcnQuZXF1YWxzKHgyLmEuZ2V0KCdmb28nKSwgdW5kZWZpbmVkKVxuICBhc3NlcnQuZXF1YWxzKHgyLmEuZ2V0KCdiYXonLCAnYmFjb24nKSwgJ2JhY29uJylcblxuICB2YXIgeDMgPSBuZXcgWCh7XG4gICAgYToge3NwYW06ICdlZ2dzJ30sXG4gIH0pXG4gIGFzc2VydC5lcXVhbHMoeDMuYSBpbnN0YW5jZW9mIEltbXV0YWJsZS5NYXAsIHRydWUpXG4gIGFzc2VydC5lcXVhbHMoeDMuYS5nZXQoJ3NwYW0nKSwgJ2VnZ3MnKVxuICBhc3NlcnQuZXF1YWxzKHgzLmEuZ2V0KCdmb28nKSwgdW5kZWZpbmVkKVxuICBhc3NlcnQuZXF1YWxzKHgzLmEuZ2V0KCdiYXonLCAnYmFjb24nKSwgJ2JhY29uJylcbn0pXG5cblxudGVzdCgnY2FuIHVzZSBJbW11dGFibGUuanMgY2xhc3NlcyBpbiByZWNvcmRzJywgYXNzZXJ0ID0+IHtcbiAgdmFyIFggPSBSZWNvcmQoe1xuICAgIGE6IEltbXV0YWJsZS5NYXAsXG4gIH0pXG5cbiAgYXNzZXJ0LnRocm93cyhfID0+IHtcbiAgICB2YXIgeDEgPSBuZXcgWCgpXG4gIH0pXG5cbiAgdmFyIHgyID0gbmV3IFgoe1xuICAgIGE6IG5ldyBJbW11dGFibGUuTWFwKHtzcGFtOiAnZWdncyd9KSxcbiAgfSlcbiAgYXNzZXJ0LmVxdWFscyh4Mi5hLmdldCgnc3BhbScpLCAnZWdncycpXG4gIGFzc2VydC5lcXVhbHMoeDIuYS5nZXQoJ2ZvbycpLCB1bmRlZmluZWQpXG4gIGFzc2VydC5lcXVhbHMoeDIuYS5nZXQoJ2JheicsICdiYWNvbicpLCAnYmFjb24nKVxuXG4gIHZhciB4MyA9IG5ldyBYKHtcbiAgICBhOiB7c3BhbTogJ2VnZ3MnfSxcbiAgfSlcbiAgYXNzZXJ0LmVxdWFscyh4My5hIGluc3RhbmNlb2YgSW1tdXRhYmxlLk1hcCwgdHJ1ZSlcbiAgYXNzZXJ0LmVxdWFscyh4My5hLmdldCgnc3BhbScpLCAnZWdncycpXG4gIGFzc2VydC5lcXVhbHMoeDMuYS5nZXQoJ2ZvbycpLCB1bmRlZmluZWQpXG4gIGFzc2VydC5lcXVhbHMoeDMuYS5nZXQoJ2JheicsICdiYWNvbicpLCAnYmFjb24nKVxufSlcblxuXG50ZXN0KCdzZXRzIHdvcmsgdG9vJywgYXNzZXJ0ID0+IHtcbiAgdmFyIFkgPSBSZWNvcmQoe3M6IG5ldyBJbW11dGFibGUuU2V0KFsnZm9vJ10pfSlcbiAgYXNzZXJ0LmVxdWFscyhuZXcgWSgpLnMuaGFzKCdmb28nKSwgdHJ1ZSlcbiAgYXNzZXJ0LmVxdWFscyhuZXcgWSgpLnMuaGFzKCdiYXInKSwgZmFsc2UpXG5cbiAgdmFyIHkyID0gbmV3IFkoe3M6IFsnZm9vJywgJ2JhcicsICdiYXonXX0pXG4gIGFzc2VydC5lcXVhbHMoeTIucy5oYXMoJ2JheicpLCB0cnVlKVxuXG4gIGFzc2VydC50aHJvd3MoKCkgPT4geyB2YXIgeTMgPSBuZXcgWSh7czogbnVsbH0pIH0pXG59KVxuIl19