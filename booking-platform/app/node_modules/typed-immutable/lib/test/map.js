(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "./test", "immutable", "../map", "../list", "../typed"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("./test"), require("immutable"), require("../map"), require("../list"), require("../typed"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.test, global.Immutable, global.map, global.list, global.typed);
    global.map = mod.exports;
  }
})(this, function (exports, _test, _immutable, _map, _list, _typed) {
  "use strict";

  var ListAny = (0, _list.List)(_typed.Any);
  var NumberToString = (0, _map.Map)(Number, String);
  var NumberToNumber = (0, _map.Map)(Number, Number);
  var StringToNumber = (0, _map.Map)(String, Number);
  var StringToString = (0, _map.Map)(String, String);

  (0, _test["default"])("typed map creation", function (assert) {

    assert.throws(function (_) {
      return (0, _map.Map)();
    }, /Typed.Map must be passed a key type descriptor/);

    assert.throws(function (_) {
      return (0, _map.Map)({});
    }, /Typed.Map must be passed a value type descriptor/);
  });

  (0, _test["default"])("any => any", function (assert) {

    assert.equals((0, _map.Map)(_typed.Any, _typed.Any), _immutable.Map);
  });

  (0, _test["default"])("converts from object", function (assert) {
    var m = StringToNumber({ 'a': 1, 'b': 2, 'c': 3 });
    assert.equals(m.size, 3);
    assert.equals(m.get('a'), 1);
    assert.equals(m.get('b'), 2);
    assert.equals(m.get('c'), 3);
  });

  (0, _test["default"])("constructor provides initial values as array of entries", function (assert) {
    var m = NumberToString([[1, 'a'], [2, 'b'], [3, 'c']]);
    assert.equals(m.size, 3);
    assert.equals(m.get(1), 'a');
    assert.equals(m.get(2), 'b');
    assert.equals(m.get(3), 'c');
  });

  (0, _test["default"])('constructor provides initial values as sequence', function (assert) {
    var s = _immutable.Seq({ 'a': 1, 'b': 2, 'c': 3 });
    var m = StringToNumber(s);
    assert.equals(m.size, 3);
    assert.equals(m.get('a'), 1);
    assert.equals(m.get('b'), 2);
    assert.equals(m.get('c'), 3);
  });

  (0, _test["default"])('constructor provides initial values as list of lists', function (assert) {
    var l = ListAny.of(ListAny(['a', 1]), ListAny(['b', 2]), ListAny(['c', 3]));
    var m = StringToNumber(l);
    assert.equals(m.size, 3);
    assert.equals(m.get('a'), 1);
    assert.equals(m.get('b'), 2);
    assert.equals(m.get('c'), 3);
  });

  (0, _test["default"])("toString on typed map", function (assert) {
    var numberToString = NumberToString([[1, "Item1"], [2, "Item2"]]);
    var numberToNumber = NumberToNumber([[0, 1], [2, 3]]);
    var stringToNumber = StringToNumber([["Item1", 1], ["Item2", 2]]);

    assert.equal(numberToString.toString(), "Typed.Map(Number, String)({ 1: \"Item1\", 2: \"Item2\" })");

    assert.equal(numberToNumber.toString(), "Typed.Map(Number, Number)({ 0: 1, 2: 3 })");

    assert.equal(stringToNumber.toString(), "Typed.Map(String, Number)({ \"Item1\": 1, \"Item2\": 2 })");
  });

  (0, _test["default"])('constructor is identity when provided map', function (assert) {
    var m1 = StringToNumber({ 'a': 1, 'b': 1, 'c': 1 });
    var m2 = StringToNumber(m1);
    assert.equal(m1, m2);
  });

  (0, _test["default"])('does not accept a scalar', function (assert) {
    assert.throws(function (_) {
      return StringToNumber(3);
    }, /Expected Array or iterable object of \[k, v\] entries, or keyed object: 3/);
  });

  (0, _test["default"])('does not accept strings (iterable, but scalar)', function (assert) {
    assert.throws(function () {
      return StringToNumber('abc');
    });
  });

  (0, _test["default"])('does not accept non-entries array', function (assert) {
    assert.throws(function () {
      return StringToNumber([1, 'a', 2]);
    });
  });

  (0, _test["default"])('accepts non-iterable array-like objects as keyed collections', function (assert) {
    var m = StringToNumber({ 'length': 3, '1': 1 });
    assert.equal(m.get('length'), 3);
    assert.equal(m.get('1'), 1);
    assert.deepEqual(m.toJS(), { 'length': 3, '1': 1 });
  });

  (0, _test["default"])('accepts flattened pairs via of()', function (assert) {
    var m = NumberToString.of(1, 'a', 2, 'b', 3, 'c');
    assert.equal(m.size, 3);
    assert.equal(m.get(1), 'a');
    assert.equal(m.get(2), 'b');
    assert.equal(m.get(3), 'c');
  });

  (0, _test["default"])('does not accept mismatched flattened pairs via of()', function (assert) {
    assert.throws(function () {
      return NumberToString.of(1, 'a', 2);
    }, /Missing value for key: 2/);
  });

  (0, _test["default"])('converts back to JS object', function (assert) {
    var m = StringToNumber({ 'a': 1, 'b': 2, 'c': 3 });
    assert.deepEqual(m.toObject(), { 'a': 1, 'b': 2, 'c': 3 });
  });

  (0, _test["default"])('iterates values', function (assert) {
    var m = StringToNumber({ 'a': 1, 'b': 2, 'c': 3 });
    var calls = [];
    var iterator = function iterator(v, k) {
      return calls.push([v, k]);
    };
    m.forEach(iterator);
    assert.deepEqual(calls, [[1, 'a'], [2, 'b'], [3, 'c']]);
  });

  (0, _test["default"])('merges two maps', function (assert) {
    var m1 = StringToNumber({ 'a': 1, 'b': 2, 'c': 3 });
    var m2 = StringToNumber({ 'wow': 13, 'd': 5, 'b': 66 });
    var m3 = m1.merge(m2);
    assert.deepEqual(m3.toObject(), {
      'a': 1, 'b': 2, 'c': 3,
      'wow': 13, 'd': 5, 'b': 66
    });
  });

  (0, _test["default"])('is persistent to sets', function (assert) {
    var m1 = StringToString();
    var m2 = m1.set('a', 'Aardvark');
    var m3 = m2.set('b', 'Baboon');
    var m4 = m3.set('c', 'Canary');
    var m5 = m4.set('b', 'Bonobo');
    assert.equals(m1.size, 0);
    assert.equals(m2.size, 1);
    assert.equals(m3.size, 2);
    assert.equals(m4.size, 3);
    assert.equals(m5.size, 3);
    assert.equals(m3.get('b'), 'Baboon');
    assert.equals(m5.get('b'), 'Bonobo');
  });

  (0, _test["default"])('is persistent to deletes', function (assert) {
    var m1 = StringToString();
    var m2 = m1.set('a', 'Aardvark');
    var m3 = m2.set('b', 'Baboon');
    var m4 = m3.set('c', 'Canary');
    var m5 = m4.remove('b');
    assert.equals(m1.size, 0);
    assert.equals(m2.size, 1);
    assert.equals(m3.size, 2);
    assert.equals(m4.size, 3);
    assert.equals(m5.size, 2);
    assert.equals(m3.has('b'), true);
    assert.equals(m3.get('b'), 'Baboon');
    assert.equals(m5.has('b'), false);
    assert.equals(m5.get('b'), undefined);
    assert.equals(m5.get('c'), 'Canary');
  });

  (0, _test["default"])('is persistent to setIn', function (assert) {
    var m1 = StringToString({ a: 'a', b: 'b' });
    var StringToMap = (0, _map.Map)(String, StringToString);
    var m2 = StringToMap({ level1: m1 });
    var m3 = m2.setIn(['level1', 'a'], 'AA');
    var m4 = m3.setIn(['level1', 'a'], 'BB');
    assert.throws(function () {
      return m2.setIn(['level1', 'a'], 5);
    });
    assert.throws(function () {
      return m2.setIn(['level1', 5], 'a');
    });
    assert.throws(function () {
      return m2.setIn([1, 'a'], 'a');
    });
    assert.deepEquals(m3.toJS(), { level1: { a: 'AA', b: 'b' } });
    assert.deepEquals(m4.toJS(), { level1: { a: 'BB', b: 'b' } });
  });

  (0, _test["default"])('is persistent to updateIn', function (assert) {
    var m1 = StringToString({ a: 'a', b: 'b' });
    var StringToMap = (0, _map.Map)(String, StringToString);
    var m2 = StringToMap({ level1: m1 });
    var m3 = m2.updateIn(['level1', 'a'], function (c) {
      return c + c;
    });
    var m4 = m3.updateIn(['level1', 'a'], function (c) {
      return c + c;
    });
    assert.throws(function () {
      return m2.updateIn(['level1', 'a'], 5);
    });
    assert.throws(function () {
      return m2.updateIn(['level1', 5], 'a');
    });
    assert.throws(function () {
      return m2.updateIn([1, 'a'], 'a');
    });
    assert.deepEquals(m1.toJS(), { a: 'a', b: 'b' });
    assert.deepEquals(m2.toJS(), { level1: { a: 'a', b: 'b' } });
    assert.deepEquals(m3.toJS(), { level1: { a: 'aa', b: 'b' } });
    assert.deepEquals(m4.toJS(), { level1: { a: 'aaaa', b: 'b' } });
  });

  (0, _test["default"])('can map many items', function (assert) {
    var m = StringToNumber();
    for (var ii = 0; ii < 2000; ii++) {
      m = m.set('thing:' + ii, ii);
    }
    assert.equals(m.size, 2000);
    assert.equals(m.get('thing:1234'), 1234);
  });

  (0, _test["default"])('maps values', function (assert) {
    var m = StringToString({ a: 'a', b: 'b', c: 'c' });
    var r = m.map(function (value) {
      return value.toUpperCase();
    });
    assert.deepEquals(r.toObject(), { a: 'A', b: 'B', c: 'C' });
    assert.deepEquals(m.toObject(), { a: 'a', b: 'b', c: 'c' });
  });

  (0, _test["default"])('maps values but changes types', function (assert) {
    var m = StringToString({ a: 'a', b: 'b', c: 'c' });
    assert.throws(function () {
      return m.map(function (value) {
        return value.charCodeAt(0);
      });
    }, /is not a string/);
  });

  (0, _test["default"])('maps keys', function (assert) {
    var m = StringToString({ a: 'a', b: 'b', c: 'c' });
    var r = m.mapKeys(function (key) {
      return key.toUpperCase();
    });
    assert.deepEquals(r.toObject(), { A: 'a', B: 'b', C: 'c' });
    assert.deepEquals(m.toObject(), { a: 'a', b: 'b', c: 'c' });
  });

  (0, _test["default"])('maps keys changes types', function (assert) {
    var m = StringToString({ a: 'a', b: 'b', c: 'c' });
    assert.throws(function () {
      return m.mapKeys(function (key) {
        return key.charCodeAt(0);
      }, /is not a string/);
    });
  });

  (0, _test["default"])('filters values', function (assert) {
    var m = StringToNumber({ a: 1, b: 2, c: 3, d: 4, e: 5, f: 6 });
    var r = m.filter(function (value) {
      return value % 2 === 1;
    });
    assert.deepEquals(r.toObject(), { a: 1, c: 3, e: 5 });
    assert.deepEquals(m.toObject(), { a: 1, b: 2, c: 3, d: 4, e: 5, f: 6 });
  });

  (0, _test["default"])('filterNots values', function (assert) {
    var m = StringToNumber({ a: 1, b: 2, c: 3, d: 4, e: 5, f: 6 });
    var r = m.filterNot(function (value) {
      return value % 2 === 1;
    });
    assert.deepEqual(r.toObject(), { b: 2, d: 4, f: 6 });
    assert.deepEquals(m.toObject(), { a: 1, b: 2, c: 3, d: 4, e: 5, f: 6 });
  });

  (0, _test["default"])('derives keys', function (assert) {
    var v = StringToNumber({ a: 1, b: 2, c: 3, d: 4, e: 5, f: 6 });
    assert.deepEquals(v.keySeq().toArray(), ['a', 'b', 'c', 'd', 'e', 'f']);
  });

  (0, _test["default"])('flips keys and values', function (assert) {
    var v = StringToString({ a: '1', b: '2', c: '3', d: '4', e: '5', f: '6' });
    assert.deepEquals(v.flip().toObject(), { '1': 'a', '2': 'b', '3': 'c', '4': 'd', '5': 'e', '6': 'f' });
  });

  (0, _test["default"])('can convert to a list', function (assert) {
    var m = StringToNumber({ a: 1, b: 2, c: 3 });
    var v = m.toList();
    var k = m.keySeq().toList();
    assert.equals(v.size, 3);
    assert.equals(k.size, 3);
    // Note: Map has undefined ordering, this List may not be the same
    // order as the order you set into the Map.
    assert.equals(v.get(1), 2);
    assert.equals(k.get(1), 'b');
  });

  (0, _test["default"])('sets', function (assert) {
    var map = StringToNumber();
    var len = 100;
    for (var ii = 0; ii < len; ii++) {
      assert.equals(map.size, ii);
      map = map.set('' + ii, ii);
      assert.throws(function () {
        return map.set(ii, ii);
      });
      assert.throws(function () {
        return map.set('' + ii, '' + ii);
      });
    }
    assert.equals(map.size, len);
    assert.equals(_immutable.is(map.toSet(), _immutable.Range(0, len).toSet()), true);
  });

  (0, _test["default"])('allows chained mutations', function (assert) {
    var m1 = StringToNumber();
    var m2 = m1.set('a', 1);
    var m3 = m2.withMutations(function (m) {
      return m.set('b', 2).set('c', 3);
    });
    var m4 = m3.set('d', 4);
    assert.throws(function () {
      return m2.withMutations(function (m) {
        return m.set('b', 'b');
      });
    });
    assert.throws(function () {
      return m2.withMutations(function (m) {
        return m.set(2, 2);
      });
    });

    assert.deepEquals(m1.toObject(), {});
    assert.deepEquals(m2.toObject(), { 'a': 1 });
    assert.deepEquals(m3.toObject(), { 'a': 1, 'b': 2, 'c': 3 });
    assert.deepEquals(m4.toObject(), { 'a': 1, 'b': 2, 'c': 3, 'd': 4 });
  });

  (0, _test["default"])('expresses value equality with unordered sequences', function (assert) {
    var m1 = StringToNumber({ A: 1, B: 2, C: 3 });
    var m2 = StringToNumber({ C: 3, B: 2, A: 1 });
    assert.equals(_immutable.is(m1, m2), true);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,