const webpack = require('webpack');
const WebpackDevServer = require('webpack-dev-server');
const errorOverlayMiddleware = require('react-dev-utils/errorOverlayMiddleware');
const clearConsole = require('react-dev-utils/clearConsole');
const formatWebpackMessages = require('react-dev-utils/formatWebpackMessages');
const chalk = require('chalk');

const { choosePort } = require('react-dev-utils/WebpackDevServerUtils');

const isInteractive = process.stdout.isTTY;

function printInstructions() {
    console.log();
    console.log('To access the site visit your django devserver URL (eg. http://127.0.0.1:8000/)');
    console.log();
}

/**
 * Copied from https://github.com/facebook/create-react-app/blob/next/packages/react-dev-utils/WebpackDevServerUtils.js
 * Adjusted printInstructions for our use case
 */
function createCompiler(config) {
    // "Compiler" is a low-level interface to Webpack.
    // It lets us listen to some events and provide our own custom messages.
    let compiler;
    try {
        compiler = webpack(config);
    } catch (err) {
        console.log(chalk.red('Failed to compile.'));
        console.log();
        console.log(err.message || err);
        console.log();
        process.exit(1);
    }

    // "invalid" event fires when you have changed a file, and Webpack is
    // recompiling a bundle. WebpackDevServer takes care to pause serving the
    // bundle, so if you refresh, it'll wait instead of serving the old one.
    // "invalid" is short for "bundle invalidated", it doesn't imply any errors.
    compiler.hooks.invalid.tap('invalid', () => {
        if (isInteractive) {
            clearConsole();
        }
        console.log('Compiling...');
    });

    let isFirstCompile = true;

    // "done" event fires when Webpack has finished recompiling the bundle.
    // Whether or not you have warnings or errors, you will get this event.
    compiler.hooks.done.tap('done', (stats) => {
        if (isInteractive) {
            clearConsole();
        }

        // We have switched off the default Webpack output in WebpackDevServer
        // options so we are going to "massage" the warnings and errors and present
        // them in a readable focused way.
        const messages = formatWebpackMessages(stats.toJson({}, true));
        const isSuccessful = !messages.errors.length && !messages.warnings.length;
        if (isSuccessful) {
            console.log(chalk.green('Compiled successfully!'));
        }
        if (isSuccessful && (isInteractive || isFirstCompile)) {
            printInstructions();
        }
        isFirstCompile = false;

        // If errors exist, only show errors.
        if (messages.errors.length) {
            // Only keep the first error. Others are often indicative
            // of the same problem, but confuse the reader with noise.
            if (messages.errors.length > 1) {
                messages.errors.length = 1;
            }
            console.log(chalk.red('Failed to compile.\n'));
            console.log(messages.errors.join('\n\n'));
            return;
        }

        // Show warnings if no errors were found.
        if (messages.warnings.length) {
            console.log(chalk.yellow('Compiled with warnings.\n'));
            console.log(messages.warnings.join('\n\n'));

            console.log(
                'If this is a legitimate use can you can ignore by adding ' +
                    chalk.cyan('// eslint-disable-next-line') +
                    ' to the line before.\n'
            );
        }
    });
    return compiler;
}

/**
 * Start a webpack devserver
 *
 * @param {String} host hostname to use for server
 * @param {String} defaultPort port to use for server. If taken prompts to use different port.
 * @param {Function} makeConfig  Function to create webpack config. Will be passed the host and port chosen.
 */
function startServer(host, defaultPort, makeConfig) {
    choosePort(host, defaultPort).then((port) => {
        if (port == null) {
            // We have not found a port.
            return;
        }
        const webpackConfigDev = makeConfig({
            serverHost: host,
            serverPort: port,
        });
        const serverConfig = {
            ...webpackConfigDev.devServer,
            before(app) {
                // This shows errors in overlay with clickable links to open in editor
                // See setEditorHandler in hot-client.js as well for related setup
                // to this.
                app.use(errorOverlayMiddleware());
            },
        };
        WebpackDevServer.addDevServerEntrypoints(webpackConfigDev, serverConfig);
        // Create a webpack compiler that is configured with custom messages.
        const compiler = createCompiler(webpackConfigDev);
        const devServer = new WebpackDevServer(compiler, serverConfig);
        // Launch WebpackDevServer.
        devServer.listen(port, host, (err) => {
            if (err) {
                return console.log(err);
            }
            if (isInteractive) {
                clearConsole();
            }
            return console.log('Starting the development server...\n');
        });

        ['SIGINT', 'SIGTERM'].forEach((sig) => {
            process.on(sig, () => {
                devServer.close();
                process.exit();
            });
        });
    });
}

module.exports = startServer;
