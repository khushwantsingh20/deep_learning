const assert = require('assert');

/**
 * Pre-processor that runs specified function on matching LESS files to return new source.
 */
class LessModifyPreprocessor {
    constructor(options) {
        this.options = options;
    }
    process(css, extra) {
        let nextCss = css;
        if (extra.fileInfo && this.options.test.test(extra.fileInfo.filename)) {
            nextCss = this.options.apply(nextCss, extra);
        }
        return nextCss;
    }
}

/**
 * Plugin that registers a pre-processor to transform the source of files matching a pattern
 *
 * Usage:
 *
 *   new LessModifyPreprocessorPlugin({
 *       test: /djrad\/src\/styles\/_variables\.less/,
 *       apply(source) {
 *           // Append our djrad overrides to the end of the djrad _variables.less file
 *           const importStr = `\n@import (reference) '${path.resolve('./src-react/styles/_djrad-vars.less')}';`;
 *           return source + importStr;
 *       },
 *   }),
 *
 * @param Object options
 * @param RegExp options.test Regular expression that should match files you want to modify the source of
 * @param Function options.apply Method that applies your changes. Gets passed the source and an object that
 *  that contains context and file information.
 */
module.exports = class LessModifyPreprocessorPlugin {
    constructor(options = {}) {
        const validOptions = ['test', 'apply'];
        const invalidOptions = Object.keys(options).filter((x) => !validOptions.includes(x));
        if (invalidOptions.length > 0) {
            throw new Error(
                `Invalid option(s) specified to LessModifyPreprocessorPlugin: ${invalidOptions.join(
                    ', '
                )}\nValid options are: ${validOptions.join(', ')}`
            );
        }
        assert(
            options.test instanceof RegExp,
            'LessModifyPreprocessorPlugin: test must be a regular expression'
        );
        assert(
            options.apply instanceof Function,
            'LessModifyPreprocessorPlugin: apply must be a function'
        );
        this.options = options;
    }
    install(less, pluginManager) {
        pluginManager.addPreProcessor(new LessModifyPreprocessor(this.options));
    }
};
