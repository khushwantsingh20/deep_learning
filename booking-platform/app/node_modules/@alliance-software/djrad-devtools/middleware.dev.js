// @flow
import { RSAA } from 'redux-api-middleware';
import type { Action } from '@alliance-software/djrad/types/action';
import { normalizeTypeDescriptors } from 'redux-api-middleware/lib/util';
import ApiLogger from './ApiLogger';

export const apiLogger = new ApiLogger();

function patchAction(action, logResponse) {
    if (typeof action !== 'object') {
        return action;
    }
    return {
        ...action,
        payload(_action, state, response) {
            logResponse(response);
            if (action.payload) {
                if (typeof action.payload == 'function') {
                    return action.payload(_action, state, response);
                }
                return action.payload;
            }
            return response;
        },
    };
}

export default function devtools() {
    return () => (next: Action => void) => async (action: Action) => {
        if (!action[RSAA]) {
            return next(action);
        }
        const { devtoolsRetryFor, ...rest } = action;
        const apiCall = apiLogger.addCallAction(action);
        const addResponse = response => apiCall.addFetchResponse(response);
        const types = normalizeTypeDescriptors(action[RSAA].types);
        const newAction = {
            ...rest,
            [RSAA]: {
                ...action[RSAA],
                types:
                    Array.isArray(types) && types.length === 3
                        ? [
                              types[0],
                              patchAction(types[1], addResponse),
                              patchAction(types[2], addResponse),
                          ]
                        : types,
            },
        };
        const n = next(newAction);
        return n.then(result => {
            apiCall.addActionResult(result);
            return result;
        });
    };
}
