import Alert from 'antd/lib/alert';
import Button from 'antd/lib/button';
import Icon from 'antd/lib/icon';
import message from 'antd/lib/message';
import React, { useState } from 'react';
import { CopyToClipboard } from 'react-copy-to-clipboard';
import { format as formatSql } from 'sqlformatter';
import sql from 'react-syntax-highlighter/dist/esm/languages/hljs/sql';
import { Light as SyntaxHighlighter } from 'react-syntax-highlighter';
import light from 'react-syntax-highlighter/dist/esm/styles/hljs/atom-one-light';

SyntaxHighlighter.registerLanguage('sql', sql);

const sqlStyle = {
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    color: '#1890ff',
    cursor: 'pointer',
};

function DupeQueryCountSection({ isAvailable, allQueries, dupeQueryId }) {
    const [isVisible, setIsVisible] = useState(false);

    if (!isAvailable) {
        return (
            <Alert
                type="warning"
                message="Duplicate details not available due to excessively large response"
            />
        );
    }

    if (!isVisible) {
        return <Button onClick={() => setIsVisible(true)}>Show Duplicates</Button>;
    }
    const queries = allQueries.filter(q => q.dupeQueryId === dupeQueryId);
    return (
        <>
            {queries.map((query, i) => {
                const time = (
                    <p>
                        <strong>Time: </strong> {query.time}s
                    </p>
                );
                if (query.dupePrimary) {
                    return <div key={i}>{time}</div>;
                }
                return (
                    <div key={i}>
                        <SyntaxHighlighter language="sql" style={light}>
                            {formatSql(query.sql)}
                        </SyntaxHighlighter>
                        {time}
                    </div>
                );
            })}
            <Button onClick={() => setIsVisible(false)}>Hide Duplicates</Button>
        </>
    );
}

export default function ApiCallSqlPanel({ apiCall }) {
    const [expandedRow, setExpandedRow] = useState();
    if (apiCall.headerSizeExceeded && (apiCall.sqlQueries || []).length === 0) {
        return (
            <div>Query details not available due to excessively large header response size.</div>
        );
    }
    if (!apiCall.response) {
        return <em>Waiting on API response...</em>;
    }
    if (!apiCall.sqlQueries) {
        return (
            <div>
                Support for SQL queries is not enabled. To enable add{' '}
                <code style={{ userSelect: 'all' }}>
                    djrad_devtools.middleware.DjradDevtoolsRequestMiddleware
                </code>{' '}
                to your <code>MIDDLEWARE</code> in django settings.
            </div>
        );
    }
    const supportsDupes =
        apiCall.sqlQueries.length > 0 && apiCall.sqlQueries[0].dupePrimary !== undefined;
    return (
        <>
            {!supportsDupes && (
                <small style={{ float: 'right' }}>
                    <sup>*</sup> Duplicate query detection not available (requires django 2)
                </small>
            )}
            {apiCall.headerSizeExceeded && (
                <Alert
                    type="warning"
                    message="There were too many queries to return in the API call header response. Details of duplicates are not available."
                />
            )}
            <table className="ant-table" style={{ tableLayout: 'fixed', width: '100%' }}>
                <thead className="ant-table-thead">
                    <tr>
                        <th style={{ width: 80 }}>Time</th>
                        <th>SQL</th>
                        {supportsDupes && <th style={{ width: 40 }}>Dupe Count</th>}
                        <th style={{ width: 20 }} />
                    </tr>
                </thead>
                <tbody className="ant-table-tbody">
                    {apiCall.sqlQueries
                        .filter(query => !supportsDupes || query.dupePrimary)
                        .map((query, i) => {
                            const isExpanded = i === expandedRow;
                            return (
                                <tr key={i}>
                                    <td style={{ width: 80 }}>
                                        {Number(
                                            query.dupeQueryCount > 0
                                                ? query.dupeTotalTime
                                                : query.time
                                        ).toFixed(3)}
                                        s
                                    </td>
                                    {!isExpanded && (
                                        <td style={sqlStyle} onClick={() => setExpandedRow(i)}>
                                            {query.sql}
                                        </td>
                                    )}
                                    {isExpanded && (
                                        <td>
                                            <SyntaxHighlighter language="sql" style={light}>
                                                {formatSql(query.sql)}
                                            </SyntaxHighlighter>
                                            {query.dupeQueryCount > 0 && (
                                                <DupeQueryCountSection
                                                    isAvailable={!apiCall.headerSizeExceeded}
                                                    allQueries={apiCall.sqlQueries}
                                                    dupeQueryId={query.dupeQueryId}
                                                />
                                            )}
                                        </td>
                                    )}
                                    {supportsDupes && <td>{query.dupeQueryCount}</td>}
                                    <td>
                                        <CopyToClipboard
                                            text={query.sql}
                                            onCopy={() => message.success('Copied!')}
                                        >
                                            <Icon
                                                type="copy"
                                                role="button"
                                                theme="twoTone"
                                                style={{
                                                    cursor: 'pointer',
                                                    fontSize: 16,
                                                }}
                                            />
                                        </CopyToClipboard>
                                    </td>
                                </tr>
                            );
                        })}
                </tbody>
            </table>
        </>
    );
}
