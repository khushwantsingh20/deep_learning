import FormField from '@alliance-software/djrad/components/form/FormField';
// eslint-disable-next-line no-restricted-imports
import ModelFetchSingle from '@alliance-software/djrad/components/model/ModelFetchSingle';
import { useFieldFormatter } from '@alliance-software/djrad/hooks/useFieldFormatter';
import Alert from 'antd/lib/alert';
import Button from 'antd/lib/button';
import Input from 'antd/lib/input';
import React, { useCallback, useMemo, useState } from 'react';
import useFieldWidget from '@alliance-software/djrad/hooks/useFieldWidget';
import { reduxForm } from 'redux-form';
import ErrorBoundary from './ErrorBoundary';

import RowView from './RowView';
import Slot from './Slot';
import SourceLink from './SourceLink';

const { Row, Label, Value } = RowView;

const warnedMessages = {};
function warnOnce(message) {
    if (!warnedMessages[message]) {
        warnedMessages[message] = true;
        // eslint-disable-next-line
        console.warn(message);
    }
}

const ModelField = reduxForm()(({ record, field, devtoolsData }) => {
    const widget = useFieldWidget({ field, style: { flex: 1 } });
    if (field.name === '__str__') {
        return (
            <RowView>
                <Row>
                    <Label width={100}>Label</Label>
                    <Value>{field.label}</Value>
                </Row>
                <Row>
                    <Value colSpan={2}>
                        <Alert
                            type="info"
                            message={
                                <>
                                    This field is used as a default label for a record. By default
                                    it comes from the model{' '}
                                    <code>
                                        <SourceLink source={devtoolsData.djradLabel.__str__}>
                                            __str__
                                        </SourceLink>
                                    </code>{' '}
                                    method but can be customised on the serializer by defining the{' '}
                                    <code>
                                        <SourceLink source={devtoolsData.djradLabel.getDjradLabel}>
                                            get_djrad_label
                                        </SourceLink>
                                    </code>{' '}
                                    method.
                                    {!devtoolsData.djradLabel.getDjradLabelDefined &&
                                        !devtoolsData.djradLabel.strDefined && (
                                            <p>
                                                <strong>Note:</strong> For this model neither{' '}
                                                <code>__str__</code> nor{' '}
                                                <code>get_djrad_label</code> is defined. If you have
                                                model or serializer inheritance then it may be fine
                                                otherwise it will be using a default (eg. Object
                                                #1). Check the links above to see what is being used
                                                (they may go to the base Model or Serializer
                                                implementations in which case you should implement
                                                your own).
                                            </p>
                                        )}
                                </>
                            }
                        />
                    </Value>
                </Row>
            </RowView>
        );
    }
    let widgetLabel = widget.type.displayName;
    if (!widget._source) {
        warnOnce(
            '_source is not available on JSX. Enable this for better support: https://babeljs.io/docs/en/babel-preset-react#development'
        );
    } else {
        let name = widget.type.displayName || widget.type.name;
        if (!name && widget._self && typeof widget._self == 'object' && widget.constructor) {
            name = widget._self.constructor.name;
        }
        widgetLabel = <SourceLink source={widget._source}>{name}</SourceLink>;
    }

    let formatterLabel = '(source unknown)';
    let formatter;
    if (record) {
        formatter = useFieldFormatter({ field, record, value: record.get(field.name) });
        if (!formatter || typeof formatter !== 'object') {
            formatterLabel = `(source unknown) - see ${field.constructor.name}.getDefaultFormatter`;
        } else {
            if (formatter.type) {
                formatterLabel = formatter.type.displayName;
            }
            if (formatter._source) {
                let name = formatter.type.displayName || formatter.type.name;
                if (
                    !name &&
                    formatter._self &&
                    typeof formatter._self == 'object' &&
                    formatter.constructor
                ) {
                    name = formatter._self.constructor.name;
                }
                formatterLabel = <SourceLink source={formatter._source}>{name}</SourceLink>;
            }
        }
    }
    return (
        <RowView>
            <Row>
                <Label width={100}>Label</Label>
                <Value>{field.label}</Value>
            </Row>
            <Row>
                <Label>Required?</Label>
                <Value>{field.required ? 'Yes' : 'No'}</Value>
            </Row>
            <Row>
                <Label>Read only?</Label>
                <Value>{field.readOnly ? 'Yes' : 'No'}</Value>
            </Row>
            <Row>
                <Label>Write only?</Label>
                <Value>{field.writeOnly ? 'Yes' : 'No'}</Value>
            </Row>
            <Row>
                <Label>Help Text</Label>
                <Value>{field.helpText}</Value>
            </Row>
            <Row>
                <Label>Field Class</Label>
                <Value>{field.constructor.name}</Value>
            </Row>
            <Row>
                <Label>Widget</Label>
                <Value style={{ paddingTop: 10 }}>
                    <ErrorBoundary>
                        <p>{widgetLabel}</p>
                        <Slot>
                            <div style={{ display: 'flex' }}>
                                <FormField
                                    reduxFormFieldComponent={field.getReduxFormFieldComponent()}
                                    name={field.name}
                                    widget={widget}
                                />
                            </div>
                        </Slot>
                    </ErrorBoundary>
                </Value>
            </Row>
            <Row>
                <Label>Formatter</Label>
                <Value style={{ paddingTop: 10 }}>
                    {formatter !== undefined ? (
                        <>
                            <p>{formatterLabel}</p>
                            <Slot>
                                <div style={{ display: 'flex' }}>{formatter}</div>
                            </Slot>
                        </>
                    ) : (
                        <p>
                            <em>To see formatter enter a record ID above</em>
                        </p>
                    )}
                </Value>
            </Row>
        </RowView>
    );
});

export default function ModelFieldsTab({ model, devtoolsData }) {
    const [keywords, setKeywords] = useState('');
    const [recordId, setRecordId] = useState(null);
    let fields = Object.values(model._meta.fields);
    if (keywords) {
        fields = fields.filter(field => field.name.match(new RegExp(keywords, 'i')));
    }
    const makeFieldRows = useCallback(
        record => {
            const initialValues = record ? record.toJS() : {};
            return fields.map(field => (
                <Row key={field.name} style={{ borderBottom: '1px solid #ccc' }}>
                    <Label>{field.name}</Label>
                    <Value style={{ paddingBottom: 10 }}>
                        <ModelField
                            form={field.name}
                            initialValues={{ [field.name]: initialValues[field.name] }}
                            field={field}
                            devtoolsData={devtoolsData}
                            record={record}
                        />
                    </Value>
                </Row>
                // eslint-disable-next-line react-hooks/exhaustive-deps
            ));
        },
        [fields, devtoolsData]
    );
    const ErrorComponent = useMemo(
        () => ({ type }) => (
            <>
                <Row key="error">
                    <Value colSpan={2}>
                        <Alert
                            type="error"
                            message={`There was a problem fetching record: ${type}`}
                        />
                    </Value>
                </Row>
                {makeFieldRows()}
            </>
        ),
        [makeFieldRows]
    );
    return (
        <div>
            <div style={{ display: 'flex' }}>
                <Input.Search
                    value={keywords}
                    autoFocus
                    onChange={({ target: { value } }) => setKeywords(value)}
                    placeholder="Search by field name"
                    style={{ marginRight: 10 }}
                />
                <Button
                    onClick={e => {
                        e.stopPropagation();
                        return setKeywords('');
                    }}
                >
                    Clear
                </Button>
            </div>
            <div style={{ display: 'flex', marginTop: 10 }}>
                <Input.Search
                    onSearch={value => setRecordId(value)}
                    placeholder="Preview record (enter record id)"
                    style={{ marginRight: 10 }}
                />
                <Button
                    onClick={e => {
                        e.stopPropagation();
                        return setRecordId(null);
                    }}
                >
                    Clear
                </Button>
            </div>
            <RowView>
                {!recordId && makeFieldRows()}
                {recordId && (
                    <ModelFetchSingle
                        key={recordId}
                        model={model}
                        id={recordId}
                        loadingComponent={() => (
                            <Row>
                                <Value colSpan={2}>Loading...</Value>
                            </Row>
                        )}
                        errorComponent={ErrorComponent}
                    >
                        {({ record }) => makeFieldRows(record)}
                    </ModelFetchSingle>
                )}
            </RowView>
        </div>
    );
}
