import { RSAA } from 'redux-api-middleware';

let id = 0;

class ApiCall {
    constructor(action, onResolve) {
        const { body, endpoint, headers, method, meta } = action[RSAA];
        this.id = id++;
        this.devtoolsRetryFor = action.devtoolsRetryFor;
        this.action = action;
        this.body = body;
        this.endpoint = endpoint;
        this.headers = headers;
        this.method = method;
        this.onResolve = onResolve;
        this.meta = meta;
        this.attempts = [this];
        this.sqlQueries = false;
    }

    addActionResult(result) {
        this.result = result;
        this.onResolve();
    }
    addFetchResponse(response) {
        this.response = response;
        const devToolsData = response.headers.get('x-djraddevtools');
        if (devToolsData) {
            const {
                urlName,
                queries,
                queryCount,
                totalQueryTime,
                executionTime,
                headerSizeExceeded,
            } = JSON.parse(devToolsData);
            this.sqlQueryCount = queryCount;
            this.headerSizeExceeded = headerSizeExceeded;
            this.sqlQueries = queries;
            this.urlName = urlName;
            this.totalQueryTime = totalQueryTime.toFixed(6);
            this.executionTime = executionTime.toFixed(4);
        }
    }
}
export default class ApiLogger {
    calls = [];
    listeners = [];

    notify() {
        this.listeners.forEach(cb => cb());
    }

    addCallAction(action) {
        this.notify();
        const call = new ApiCall(action, this.notify.bind(this));
        if (action.devtoolsRetryFor) {
            action.devtoolsRetryFor.attempts.push(call);
        } else {
            this.calls.unshift(call);
        }
        return call;
    }

    subscribe(listener) {
        this.listeners.push(listener);

        return () => {
            const index = this.listeners.indexOf(listener);
            if (index !== -1) {
                this.listeners.splice(index, 1);
            }
        };
    }
}
