import Button from 'antd/lib/button';
import Collapse from 'antd/lib/collapse';
import Input from 'antd/lib/input';
import Tabs from 'antd/lib/tabs';
import Tag from 'antd/lib/tag';
import React, { useEffect, useState } from 'react';
import { RSAA } from 'redux-api-middleware';
import JSONTree from 'react-json-tree';
import { connect } from 'react-redux';
import ApiCallSqlPanel from './ApiCallSqlPanel';
import ErrorBoundary from './ErrorBoundary';
import useDevToolsData from './hooks/useDevToolsData';
import HttpMethod from './HttpMethod';
import { apiLogger } from './middleware.dev';
import RowView from './RowView';
import SourceLink from './SourceLink';

const { Row, Label, Value } = RowView;

const { Panel } = Collapse;

const BASE_URL = window.location.origin;

function Endpoint({ endpoint }) {
    let display = endpoint;
    if (endpoint.startsWith(BASE_URL)) {
        display = endpoint.replace(BASE_URL, '');
    }
    const style = {
        whiteSpace: 'nowrap',
        textOverflow: 'ellipse',
        overflow: 'hidden',
    };
    return (
        <a href={endpoint} rel="noopener noreferrer" target="_blank" style={style}>
            {display}
        </a>
    );
}

function TimeTag({ time, prefix = '' }) {
    if (time == null) {
        return null;
    }
    const color = time > 1.5 ? 'red' : 'green';
    return (
        <Tag color={color}>
            {prefix}
            {time}s
        </Tag>
    );
}

function SqlSummaryTag({ apiCall, prefix = '', onClick }) {
    if (apiCall.sqlQueries) {
        const color = apiCall.sqlQueryCount > 20 || apiCall.totalQueryTime > 1.5 ? 'red' : 'green';
        return (
            <Tag color={color} onClick={onClick}>
                {prefix}
                {apiCall.sqlQueryCount} in {apiCall.totalQueryTime}s
            </Tag>
        );
    }
    if (apiCall.response) {
        return `${prefix}(N/A)`;
    }
    return '';
}

function HeadersSummary({ headers, editable, onHeadersChange }) {
    const makeOnChange = header => ({ target: { value } }) =>
        onHeadersChange(state => ({ ...state, [header]: value }));
    return (
        <RowView>
            {Object.entries(headers).map(([key, value]) => (
                <Row key={key}>
                    <Label>{key}</Label>
                    <Value>
                        {editable ? (
                            <Input type="text" value={value} onChange={makeOnChange(key)} />
                        ) : (
                            value
                        )}
                    </Value>
                </Row>
            ))}
        </RowView>
    );
}

const hasJsonBody = call => call.headers['Content-Type'] === 'application/json';

const doesSupportBody = call => call.method.toLowerCase() !== 'get';

function ApiCallBody({ call }) {
    if (hasJsonBody(call)) {
        return <JSONTree data={JSON.parse(call.body)} />;
    }
    return call.body;
}

const ApiCallReplay = connect()(({ call, onSuccess, dispatch }) => {
    let initialBody = call.body;
    if (hasJsonBody(call)) {
        try {
            initialBody = JSON.stringify(JSON.parse(call.body), null, 2);
        } catch (e) {
            // blah
        }
    }
    const [formState, setFormState] = useState({
        endpoint: call.endpoint,
        body: initialBody,
        headers: call.headers,
    });
    const fieldChange = fieldName => ({ target: { value } }) =>
        setFormState(state => ({ ...state, [fieldName]: value }));
    const retry = async () => {
        const { endpoint, body, headers } = formState;
        await dispatch({
            [RSAA]: {
                ...call.action[RSAA],
                endpoint,
                headers,
                ...(doesSupportBody(call) ? { body } : {}),
            },
            devtoolsRetryFor: call.devtoolsRetryFor || call,
        });
        onSuccess();
    };
    return (
        <>
            <Collapse defaultActiveKey={['endpoint', 'headers', 'body']}>
                <Panel header="Endpoint" key="endpoint">
                    <Input
                        type="text"
                        value={formState.endpoint}
                        onChange={fieldChange('endpoint')}
                    />
                </Panel>
                <Panel header="Headers" key="headers">
                    <HeadersSummary
                        headers={formState.headers}
                        onHeadersChange={fn =>
                            setFormState(state => ({ ...state, headers: fn(state.headers) }))
                        }
                        editable
                    />
                </Panel>
                {doesSupportBody(call) && (
                    <Panel header="Body" key="body">
                        <Input.TextArea
                            autosize
                            onChange={fieldChange('body')}
                            value={formState.body}
                        />
                    </Panel>
                )}
            </Collapse>
            <Button type="primary" onClick={retry} block style={{ marginTop: 10 }}>
                Replay API Call
            </Button>
        </>
    );
});

function ApiCallDetails({ call, defaultActiveKey = 'request' }) {
    const [attemptIndex, setAttemptIndex] = useState(0);
    const [showReplay, setShowReplay] = useState(false);
    const currentCall = call.attempts[attemptIndex];
    const handleReplaySuccess = () => {
        setShowReplay(false);
        setAttemptIndex(index => index + 1);
    };
    const { response } = currentCall;
    return (
        <div style={{ paddingLeft: 30, margin: '10px 0', borderLeft: '1px solid #ccc' }}>
            Attempt {attemptIndex + 1} of {call.attempts.length}
            <Button
                disabled={attemptIndex === 0}
                onClick={() => setAttemptIndex(i => i - 1)}
                icon="left"
                size="small"
                style={{ marginLeft: 5 }}
            />
            <Button
                icon="right"
                size="small"
                disabled={attemptIndex >= call.attempts.length - 1}
                onClick={() => setAttemptIndex(i => i + 1)}
                style={{ marginLeft: 5 }}
            />
            <hr />
            <Tabs
                animated={false}
                tabBarExtraContent={
                    <Button onClick={() => setShowReplay(s => !s)} size="small" type="primary">
                        {showReplay ? 'Cancel Replay' : 'Replay API Call'}
                    </Button>
                }
                defaultActiveKey={defaultActiveKey}
            >
                <Tabs.TabPane
                    key="request"
                    tab={
                        <>
                            Request / Response{' '}
                            {currentCall.response && <TimeTag time={currentCall.executionTime} />}
                        </>
                    }
                >
                    {!showReplay && (
                        <Collapse
                            defaultActiveKey={[
                                'endpoint',
                                'headers',
                                'body',
                                'response',
                                'action-result',
                            ]}
                        >
                            <Panel header="Endpoint" key="endpoint">
                                {currentCall.endpoint}
                            </Panel>
                            <Panel header="Headers" key="headers">
                                <HeadersSummary headers={currentCall.headers} />
                            </Panel>
                            {doesSupportBody(currentCall) && (
                                <Panel header="Body" key="body">
                                    <ApiCallBody call={currentCall} />
                                </Panel>
                            )}
                            {response && (
                                <Panel
                                    key="response"
                                    header={
                                        <>
                                            Response{' '}
                                            {response.ok ? (
                                                <Tag color="green">{response.status}</Tag>
                                            ) : (
                                                <Tag color="red">{response.status}</Tag>
                                            )}
                                        </>
                                    }
                                >
                                    <p>This is the actual Response object from the fetch call.</p>
                                    <JSONTree
                                        data={{
                                            headers: [...response.headers.entries()].reduce(
                                                (acc, [key, value]) => {
                                                    acc[key] = value;
                                                    return acc;
                                                },
                                                {}
                                            ),
                                            ok: response.ok,
                                            redirected: response.redirected,
                                            status: response.status,
                                            statusText: response.statusText,
                                            type: response.type,
                                            url: response.url,
                                        }}
                                    />
                                    <Button
                                        onClick={() =>
                                            // eslint-disable-next-line
                                            console.log(response)
                                        }
                                    >
                                        Log to console
                                    </Button>
                                </Panel>
                            )}
                            <Panel header="Action Result" key="action-result">
                                <p>
                                    This is the redux action result. This is what you would have
                                    received when the promise returned by dispatching an action
                                    resolved.
                                </p>
                                <JSONTree data={currentCall.result} />
                                <Button
                                    onClick={() =>
                                        // eslint-disable-next-line
                                        console.log(currentCall.result)
                                    }
                                >
                                    Log to console
                                </Button>
                            </Panel>
                        </Collapse>
                    )}
                    {showReplay && (
                        <ApiCallReplay
                            key={currentCall.id}
                            call={currentCall}
                            onSuccess={handleReplaySuccess}
                        />
                    )}
                </Tabs.TabPane>
                <Tabs.TabPane
                    tab={
                        <>
                            SQL Queries <SqlSummaryTag apiCall={currentCall} />
                        </>
                    }
                    key="sql"
                >
                    <ApiCallSqlPanel apiCall={currentCall} />
                </Tabs.TabPane>
            </Tabs>
        </div>
    );
}

function ApiCallRow({ call, urlDefinition }) {
    const [expanded, setExpanded] = useState(false);
    return (
        <div
            style={{
                borderBottom: '1px solid #ddd',
                paddingBottom: 10,
                marginBottom: 10,
            }}
        >
            <div style={{ display: 'flex' }}>
                <Button
                    icon={expanded ? 'down' : 'right'}
                    style={{
                        border: 0,
                        padding: 0,
                        margin: '0 5px 0 0',
                        height: 16,
                        boxShadow: 'none',
                    }}
                    type="primary"
                    onClick={() => setExpanded(e => (e ? false : 'request'))}
                    ghost
                >
                    <HttpMethod method={call.method} />
                </Button>
                <div
                    style={{
                        flex: 1,
                        display: 'flex',
                        overflowX: 'hidden',
                        flexDirection: 'column',
                    }}
                >
                    <Endpoint endpoint={call.endpoint} />
                    {urlDefinition && (
                        <div>
                            <SourceLink source={urlDefinition.viewsetSource}>
                                {urlDefinition.viewsetSource.name}
                            </SourceLink>
                            .
                            <SourceLink source={urlDefinition.source}>
                                {urlDefinition.source.name}
                            </SourceLink>
                            ({urlDefinition.name})
                        </div>
                    )}
                </div>
                <div>
                    <TimeTag time={call.response && call.executionTime} />
                    <SqlSummaryTag
                        apiCall={call}
                        prefix="SQL: "
                        onClick={() => setExpanded('sql')}
                    />
                </div>
            </div>
            {expanded && (
                <ApiCallDetails
                    call={call}
                    urlDefinition={urlDefinition}
                    defaultActiveKey={expanded}
                />
            )}
        </div>
    );
}

export default function ApiCallsPanel({ filter = () => true }) {
    const devToolsData = useDevToolsData();
    const [, forceUpdate] = useState(0);
    useEffect(() => apiLogger.subscribe(() => forceUpdate(s => s + 1)));
    return (
        <ErrorBoundary>
            {apiLogger.calls.filter(filter).map(call => (
                <ApiCallRow
                    call={call}
                    key={call.id}
                    urlDefinition={devToolsData.getNamedUrl(call.urlName, call.method)}
                />
            ))}
        </ErrorBoundary>
    );
}
