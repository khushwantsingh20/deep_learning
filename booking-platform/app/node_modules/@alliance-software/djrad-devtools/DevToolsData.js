// @flow
import Site from '@alliance-software/djrad/site/Site';

type SourceLocation = {
    filename: string,
    implicitlyCreated: boolean,
    lineNumber?: number,
    name: string,
};

type DjradLabel = {
    getDjradLabel: SourceLocation,
    getDjradLabelDefined: boolean,
    strDefined: boolean,
    __str__: SourceLocation,
};

class UrlDefinition {
    isDetail: boolean;
    method: string;
    methodName: string;
    name: string;
    pattern: string;
    url: string;
    source: SourceLocation;
    viewsetSource: SourceLocation;

    constructor({ isDetail, method, methodName, name, pattern, url, source }, viewsetSource) {
        this.isDetail = isDetail;
        this.method = method;
        this.methodName = methodName;
        this.name = name;
        this.pattern = pattern;
        this.url = url;
        this.source = source;
        this.viewsetSource = viewsetSource;
    }
}

class ModelDevToolsData {
    apiRootUrl: string;
    baseUrl: string;
    djradLabel: DjradLabel;
    model: SourceLocation;
    registration: SourceLocation;
    serializer: SourceLocation;
    viewset: SourceLocation;
    urls: Array<UrlDefinition>;

    constructor(data) {
        const {
            apiRootUrl,
            baseUrl,
            djradLabel,
            model,
            registration,
            serializer,
            urls,
            viewset,
        } = data;

        this.apiRootUrl = apiRootUrl;
        this.djradLabel = djradLabel;
        this.baseUrl = baseUrl;
        this.urls = urls.map(url => new UrlDefinition(url, viewset));
        this.viewset = viewset;
        this.serializer = serializer;
        this.registration = registration;
        this.model = model;
    }
}

export default class DevToolsData {
    constructor(site: Site) {
        const { models, namedUrls } = [...site.models.values()].reduce(
            (acc, model) => {
                const {
                    _definition: { __devtools: modelDevToolsData },
                } = model._meta;
                if (!modelDevToolsData) {
                    throw new Error(
                        'DevTools not setup properly. Make sure DEBUG is True and get_frontend_serializer returns DevToolsRegistrationSerializer'
                    );
                }
                acc.models[model._meta.modelId] = new ModelDevToolsData(modelDevToolsData);
                const urls = acc.models[model._meta.modelId].urls.reduce((modelNamedUrls, url) => {
                    modelNamedUrls[`${url.method.toLowerCase()}.${url.name}`] = url;
                    return modelNamedUrls;
                }, {});
                Object.assign(acc.namedUrls, urls);
                return acc;
            },
            { models: {}, namedUrls: {} }
        );
        this.models = models;
        this.namedUrls = namedUrls;
    }

    getNamedUrl(name, method) {
        return this.namedUrls[method.toLowerCase() + '.' + name];
    }

    getForModel(model) {
        let modelId = model;
        if (typeof model !== 'string') {
            modelId = model._meta.modelId;
        }
        return this.models[modelId];
    }
}
