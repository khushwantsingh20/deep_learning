// @flow
import * as React from 'react';
import { FieldFormatterContext } from '../components/model/FieldFormatterProvider';
import Field from '../model/fields/Field';
import type { Model } from '../model/Model';

const { useContext } = React;

type Props = {
    record: Model,
    /** Either field or fieldName should be specified */
    field: ?Field,
    fieldName: ?string,
    /** Optionally specify value. If not provided will be extracted from record. */
    value: ?any,
};

/**
 * Get formatter to use for specified field.
 *
 * Works the same as [FieldFormatter](/components/FieldFormatter/) but in hook
 * form.
 *
 * @example
 * ```js
 * function MyFieldFormatter({ record }) {
 *     const formatter = useFieldFormatter({ record, fieldName: 'name' });
 *     return <div>{formatter}</div>;
 * }
 * ```
 */
export function useFieldFormatter({ field, fieldName, record, value, ...rest }: Props): React.Node {
    const context = useContext(FieldFormatterContext);
    let finalField = field;
    let finalValue = value;
    if (!field && fieldName) {
        finalField = record._meta.fields[fieldName];
        if (!finalField) {
            throw new Error(`No such field ${fieldName} on model ${record._meta.modelId}`);
        }
    }
    let finalFieldName = fieldName;
    if (field && !fieldName) {
        finalFieldName = field.name;
    }
    if (value == null) {
        finalValue = record.get(finalFieldName);
    }
    const formatter = context.getFormatterForField(finalField, record, finalValue, rest);
    if (formatter === undefined) {
        // eslint-disable-next-line
        console.warn(
            `FieldFormatter for field ${finalFieldName || '<unspecified>'} on model ${
                record._meta.modelId
            } returned undefined; this is unexpected`
        );
        return null;
    }
    return formatter;
}
