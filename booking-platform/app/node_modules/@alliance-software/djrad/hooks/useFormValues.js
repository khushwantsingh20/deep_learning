// @flow
import { useSelector } from 'react-redux';
import { formValueSelector } from 'redux-form';
import isEqual from 'lodash/isEqual';
import getIn from 'lodash/get';

/**
 * Access values for fields `fieldNames` in form `formName`
 *
 * NOTE: For each field in `fieldNames` every change to that field will cause
 * your component to re-render (ie. on every keystroke). If you have a heavy
 * component this may cause performance issues so use sparingly.
 *
 * @param {String} formName the name of the form to get values from
 * @param {Array<string>} fieldNames The name of fields to extract from form
 * @param {Object} initialValues Initial values to return before form itself has
 * been initialised. As the form value selector will - in many cases - run before
 * the form itself has rendered there's no way to know ahead of time what the initial
 * values of the form will be. If you don't pass anything here then the values returned
 * for the initial render will be an empty object. To correct this pass the initial
 * values used on the form here.
 * @param {Function} getReduxFormState Only required if redux-form state is located
 * somewhere other than the default place in redux (you almost certainly don't
 * need to change this)
 * @returns {Object} returns an object with keys `fieldNames` that always
 * contains the latest form value for that field.
 *
 * @example
 *
 * ```jslive
 * function UserForm() {
 *   const formName = "userForm";
 *   const { email } = useFormValues(formName, ['email']);
 *   return (
 *    <ModelForm model="demo.user" name={formName} onSubmit={logger.log} layout="horizontal">
 *       <ModelForm.Item name="firstName" />
 *       <ModelForm.Item name="lastName" />
 *       <ModelForm.Item
 *         name="email"
 *         help={email && <p>Double check that {email} is correct</p>}
 *       />
 *     </ModelForm>
 *   );
 * }
 * <UserForm />
 * ```
 */
export default function useFormValues(
    formName: string,
    fieldNames: Array<string>,
    initialValues: {} = {},
    getReduxFormState: (state: Object) => Object = state => state.form
): {} {
    return useSelector(state => {
        // If the form doesn't exist yet it can't have been initialised so we
        // need to return the specified initial values. We specifically check
        // the full path to the form as getFormNames doesn't work properly with
        // dotted form names. Further the key may exist after form state has been
        // destroyed... it just won't have registeredFields set.
        const formState = getIn(getReduxFormState(state), [formName, 'registeredFields'].join('.'));
        if (!formState) {
            return initialValues;
        }
        const selectValue = formValueSelector(formName, getReduxFormState);
        const value = selectValue(state, ...fieldNames);
        if (value && typeof value != 'object' && fieldNames.length === 1) {
            return { [fieldNames[0]]: value };
        }
        if (value == null) {
            return fieldNames.reduce((acc, fn) => {
                acc[fn] = null;
                return acc;
            }, {});
        }
        return value;
    }, isEqual);
}
