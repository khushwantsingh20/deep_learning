// @flow
import { useState, useContext, useEffect } from 'react';
import { __RouterContext } from 'react-router';
import type { Location, Match, RouterHistory } from 'react-router-dom';

type Context = {
    history: RouterHistory,
    location: Location,
    match: Match,
};

/**
 * Get access to the react-router context
 *
 * This should one day be replaceable with official solution.
 * See https://github.com/ReactTraining/react-router/issues/6430
 *
 * @param {Boolean} subscribe whether to subscribe to changes in history. If true
 * any location changes will re-run the hook and you will get the latest version
 * of `location` and `match`. If you set this to false you will NOT get any changes
 * to `location` or `match` - it will _only_ be the initial value when the hook
 * was first run. Generally this options is useful only if you need access to
 * `history` only.
 */
export default function useRouter(subscribe: boolean = true): Context {
    const routerContext = useContext(__RouterContext);
    const [, forceUpdate] = useState(false);
    useEffect(() => {
        if (subscribe) {
            return routerContext.history.listen(() => forceUpdate(value => !value));
        }
        return () => {};
    }, [subscribe, routerContext.history]);

    return routerContext;
}
