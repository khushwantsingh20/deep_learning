// @flow
/**
 * MIT License
 *
 *  Copyright (c) 2019 Alexander Reardon
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */
// This code is taken from https://github.com/alexreardon/use-memo-one but modified
// to allow custom comparison operator
import { useEffect, useRef, useState } from 'react';

type Cache<T> = {|
    inputs: ?(mixed[]),
    result: T,
|};

export type ComparisonFn = (newInputs: mixed[], lastInputs: mixed[]) => boolean;

export function shallowStrictEquals(newInputs: mixed[], lastInputs: mixed[]) {
    // no checks needed if the inputs length has changed
    if (newInputs.length !== lastInputs.length) {
        return false;
    }
    // Using for loop for speed. It generally performs better than array.every
    // https://github.com/alexreardon/memoize-one/pull/59

    for (let i = 0; i < newInputs.length; i++) {
        // using shallow equality check
        if (newInputs[i] !== lastInputs[i]) {
            return false;
        }
    }
    return true;
}

/**
 * Compare two inputs and consider them equal if stringified values are the same
 *
 * Can use with `useMemoOne` or `useCallbackOne`. Note that both these functions
 * to shallow equality by default so you only need to use this method if you
 * need deep equality checks.
 *
 * @example
 *
 * ```js
 * const options = { filter: { id: 1 } }
 * const memoizedOptions = useMemoOne(() => options, options, jsonStringifiedEquals);
 * ```
 * @param newInputs
 * @param lastInputs
 * @returns {boolean}
 */
export function jsonStringifiedEquals(newInputs: mixed[], lastInputs: mixed[]) {
    return newInputs === lastInputs || JSON.stringify(newInputs) === JSON.stringify(lastInputs);
}

/**
 * Based on https://github.com/alexreardon/use-memo-one but supports custom
 * comparison operator (eg. [jsonStringifiedEquals](/api/js/hooks/jsonStringifiedEquals).
 *
 * @param getResult Function that returns value to memoize
 * @param inputs Dependency array. When values in this change getResult is called again
 * @param compare Custom comparision operator. Defaults to shallow strict equality.
 * @returns {T}
 */
export default function useMemoOne<T>(
    // getResult changes on every call,
    getResult: () => T,
    // the inputs array changes on every call
    inputs?: mixed[],
    // Comparison function to use when determining whether inputs have changed
    compare?: ComparisonFn = shallowStrictEquals
): T {
    // using useState to generate initial value as it is lazy
    const initial: Cache<T> = useState(() => ({
        inputs,
        result: getResult(),
    }))[0];

    const committed = useRef<Cache<T>>(initial);

    // persist any uncommitted changes after they have been committed
    const isInputMatch: boolean = Boolean(
        inputs && committed.current.inputs && compare(inputs, committed.current.inputs)
    );

    // create a new cache if required
    const cache: Cache<T> = isInputMatch
        ? committed.current
        : {
              inputs,
              result: getResult(),
          };

    // commit the cache
    useEffect(() => {
        committed.current = cache;
    }, [cache]);

    return cache.result;
}
