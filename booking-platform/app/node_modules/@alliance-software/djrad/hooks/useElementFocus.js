// @flow
import { useCallback, useEffect } from 'react';

type Options = {
    /**
     * Selector of a container to scroll into view. If specified then `focusSelector`
     * should be within this container.
     *
     * @example
     * Scroll to the container with 'has-error' class and, if found, focus on the
     * first input, select or textarea found.
     * ```js
     * useElementFocus(true, { containerSelector: '.has-error'})
     * ```
     */
    containerSelector?: string,
    /**
     * Selector for element to call `focus` on. Defaults to 'input,select,textarea'
     */
    focusSelector?: string,
};

/**
 * Focus on an element and/or scroll a container into view based on a prop
 *
 * The focus/scrolling happens once whenever shouldFocus becomes true.
 *
 * For use with djrad forms [useModelFormProcessor](/api/js/hooks/#useModelFormProcessor)
 * does this internally.
 *
 * @example
 * ```js
 * const [error, setError] = useState(false);
 * // When error state is set will scroll to first error on page and if it
 * // contains a focusable input it will focus it.
 * useElementFocus(error, { containerSelector: '.has-error' });
 *
 * // Form renders any fields wrapped in a div with class 'has-error'
 * return (
 *    <MyFormWithValidationError onSubmitFail={() =>setError(true)} />
 * );
 * ```
 *
 * @param {Boolean} shouldFocus When this changes to any truthy value the
 * element specified by containerSelector will be scrolled to (if any) and the
 * element identified by focusSelector will be focused (if any - defaults to
 * the first input, select or textarea elements).
 * @param {Options} options @expand
 * @return Returns a function you can call to manually trigger focus
 */
export default function useElementFocus(shouldFocus: boolean, options: Options = {}): () => void {
    const { containerSelector, focusSelector = 'input,select,textarea' } = options;
    const focus = useCallback(() => {
        requestAnimationFrame(() => {
            let container = document;
            if (containerSelector) {
                container = document.querySelector(containerSelector);
            }
            const input =
                container && container.querySelector && container.querySelector(focusSelector);
            if (input) {
                // Always scroll into view in case focus doesn't work. On mobile safari focus
                // won't work but at least the input will be scrolled into view.
                input.scrollIntoView();
                input.focus();
            } else if (container && container.scrollIntoView) {
                container.scrollIntoView();
            }
        });
    }, [containerSelector, focusSelector]);
    useEffect(() => {
        if (shouldFocus) {
            focus();
        }
    }, [containerSelector, focus, focusSelector, shouldFocus]);

    return focus;
}
