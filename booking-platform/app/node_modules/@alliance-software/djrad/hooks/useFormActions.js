// @flow
import { useMemo } from 'react';
import { useDispatch } from 'react-redux';
import unboundFormActions from 'redux-form/lib/actions';
import type { BoundFormActions } from '../types/reduxFormBoundActions';

/**
 * Returns an object keyed by the action name and mapped to a redux action already
 * bound to dispatch and the specified form name.
 *
 * See https://redux-form.com/8.2.1/docs/api/actioncreators.md/ for the available
 * actions. Note that you don't need to pass the `form` argument - it's passed
 * for you.
 *
 * @example
 * ```js
 * function UserModal() {
 *   const formName = 'user-form';
 *   const formActions = useFormAction(formName);
 *
 *   return (
 *
 *     <Modal onOk={formActions.submit}>
 *       <UserForm formName={formName} />
 *     </Modal>
 *   );
 * }
 * ```
 */
export default function useFormActions(formName: string): BoundFormActions {
    const dispatch = useDispatch();
    return useMemo(() => {
        return Object.entries(unboundFormActions).reduce((acc, [actionName, action]) => {
            acc[actionName] = (...args) =>
                dispatch(action(actionName === 'destroy' ? [formName] : formName, ...args));
            return acc;
        }, {});
    }, [dispatch, formName]);
}
