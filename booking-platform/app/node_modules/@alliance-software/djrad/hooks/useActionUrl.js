// @flow
import { useContext } from 'react';
import type { Match } from 'react-router-dom';

import { isModelInstance } from '../model/Model';
import type { Model } from '../model/Model';
import type { ModelId } from '../model/types';
import { ActionUrlContext } from '../site/components/context';

type Options = {
    /**
     * react-router match object that URL should be relative to. If specified match.url will form the base of the URL.
     */
    match?: Match,
    /**
     * An optional prefix to use for URL's for this model. If not provided uses the getPrefix() value from the model.
     */
    urlBase?: string,
    /**
     * Query string to include in the URL
     */
    query?: string,
};

/**
 * Generate a link for an action on a model
 * @param modelOrRecordOrModelId Either a record, the registration id for a model or the model class itself
 * @param action The action name (eg. 'detail', 'update', etc)
 * @param params Extra params for the URL. If you are generating a link for a detail route and you have passed the
 * class to modelOrRecordOrModelId (rather than the instance) you can pass the id here eg. `{ id: 5 }`
 * @param options @expand
 *
 * @example
 * ```js
 * function RecordDetailLink({ record }) {
 *     const url = useActionUrl(record, 'detail');
 *     return <Link to={url}>{record.__str__}</Link>;
 * }
 * ```
 */
export default function useActionUrl(
    modelOrRecordOrModelId: Class<Model> | Model | ModelId,
    action: string,
    params: { [string]: string | number },
    options?: Options = {}
) {
    const { getActionUrl } = useContext(ActionUrlContext);
    if (isModelInstance(modelOrRecordOrModelId) && !params) {
        params = { id: modelOrRecordOrModelId.get(modelOrRecordOrModelId._meta.pkFieldName) };
    }
    return getActionUrl(modelOrRecordOrModelId, action, params || {}, options);
}
