// @flow
import * as React from 'react';
import { FieldWidgetContext } from '../components/model/FieldWidgetProvider';
import Field from '../model/fields/Field';

const { useContext } = React;

type Props = {
    /** Instance of field to render. This usually comes from a model record: `model._meta.fields.firstName` */
    field: Field,
    /** Whether field id disabled. Defaults to `field.readOnly`. */
    disabled?: boolean,
};

/**
 * Get widget to use for specified field.
 *
 * Works the same as [FieldWidget](/components/FieldWidget/) but in hook
 * form.
 *
 * @param {Props} props @expand
 *
 * @example
 * ```js
 * function MyFieldWidget({ record }) {
 *     const formatter = useFieldWidget({ field: record._meta.fields.name });
 *     return <div>{formatter}</div>;
 * }
 * ```
 *
 * @returns A React element ready for rendering
 */
export default function useFieldWidget(props: Props): React.Node {
    const context = useContext(FieldWidgetContext);
    const { field, disabled = field.readOnly, ...rest } = props;
    const finalProps = {
        ...rest,
        disabled,
    };
    return context.getWidgetForField(field, finalProps);
}
