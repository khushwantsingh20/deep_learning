// @flow
// Copied from redux-form/lib/actions.types.js.flow without first param (form)
// useFormActions binds the actions with specified form name.
// eslint-disable-next-line import/no-unresolved
import type { Action, FieldType } from 'redux-form/lib/types';

export type ArrayInsertAction = {
    type: string,
    meta: { field: string, index: number },
    payload: any,
} & Action;
export type ArrayInsert = (field: string, index: number, value: any) => ArrayInsertAction;
export type ArrayMoveAction = {
    type: string,
    meta: { field: string, from: number, to: number },
} & Action;
export type ArrayMove = (field: string, from: number, to: number) => ArrayMoveAction;
export type ArrayPopAction = {
    type: string,
    meta: { field: string },
} & Action;
export type ArrayPop = (field: string) => ArrayPopAction;
export type ArrayPushAction = {
    type: string,
    meta: { field: string },
    payload: any,
} & Action;
export type ArrayPush = (field: string, value: any) => ArrayPushAction;
export type ArrayRemoveAction = {
    type: string,
    meta: { field: string, index: number },
} & Action;
export type ArrayRemove = (field: string, index: number) => ArrayRemoveAction;
export type ArrayRemoveAllAction = {
    type: string,
    meta: { field: string },
} & Action;
export type ArrayRemoveAll = (field: string) => ArrayRemoveAllAction;
export type ArrayShiftAction = {
    type: string,
    meta: { field: string },
} & Action;
export type ArrayShift = (field: string) => ArrayShiftAction;
export type ArraySpliceAction = {
    type: string,
    meta: {
        form: string,
        field: string,
        index: number,
        removeNum: number,
    },
    payload?: any,
} & Action;
export type ArraySplice = (
    form: string,
    field: string,
    index: number,
    removeNum: number,
    value: any
) => ArraySpliceAction;
export type ArraySwapAction = {
    type: string,
    meta: { field: string, indexA: number, indexB: number },
} & Action;
export type ArraySwap = (field: string, indexA: number, indexB: number) => ArraySwapAction;
export type ArrayUnshiftAction = {
    type: string,
    meta: { field: string },
    payload: any,
} & Action;
export type ArrayUnshift = (field: string, value: any) => ArrayUnshiftAction;
export type AutofillAction = {
    type: string,
    meta: { field: string },
    payload: any,
} & Action;
export type Autofill = (field: string, value: any) => AutofillAction;
export type BlurAction = {
    type: string,
    meta: { field: string, touch: boolean },
    payload: any,
} & Action;
export type Blur = (field: string, value: any, touch: boolean) => BlurAction;
export type ChangeAction = {
    type: string,
    meta: {
        form: string,
        field: string,
        touch: ?boolean,
        persistentSubmitErrors: ?boolean,
    },
    payload: any,
} & Action;
export type Change = (
    field: string,
    value: any,
    touch?: boolean,
    persistentSubmitErrors?: boolean
) => ChangeAction;
export type ClearSubmitAction = {
    type: string,
    meta: { form: string },
} & Action;
export type ClearSubmit = () => ClearSubmitAction;
export type ClearSubmitErrorsAction = {
    type: string,
    meta: { form: string },
} & Action;
export type ClearSubmitErrors = () => ClearSubmitErrorsAction;
export type ClearAsyncErrorAction = {
    type: string,
    meta: { field: string },
} & Action;
export type ClearAsyncError = (field: string) => ClearAsyncErrorAction;
export type ClearFieldsAction = {
    type: string,
    meta: {
        form: string,
        keepTouched: boolean,
        persistentSubmitErrors: boolean,
        fields: string[],
    },
} & Action;
export type ClearFields = (
    keepTouched: boolean,
    persistentSubmitErrors: boolean,
    ...fields: string[]
) => ClearFieldsAction;
export type DestroyAction = { type: string, meta: { form: string[] } } & Action;
export type Destroy = () => DestroyAction;
export type FocusAction = {
    type: string,
    meta: { field: string },
} & Action;
export type Focus = (field: string) => FocusAction;
export type InitializeAction = {
    type: string,
    meta: { keepDirty: boolean },
    payload: Object,
} & Action;
export type Initialize = (
    values: Object,
    otherMeta?: Object
) =>
    | InitializeAction
    | ((values: Object, keepDirty: boolean, otherMeta?: Object) => InitializeAction);
export type RegisterFieldAction = {
    type: string,
    meta: { form: string },
    payload: { name: string, type: FieldType },
} & Action;
export type RegisterField = (name: string, type: FieldType) => RegisterFieldAction;
export type ResetAction = { type: string, meta: { form: string } } & Action;
export type Reset = () => ResetAction;
export type ResetSectionAction = { type: string, meta: { sections: string[] } } & Action;
export type ResetSection = (...sections: string[]) => ResetSectionAction;
export type StartAsyncValidationAction = {
    type: string,
    meta: { field: string },
} & Action;
export type StartAsyncValidation = (
    field: string,
    index: number,
    value: any
) => StartAsyncValidationAction;
export type StartSubmitAction = {
    type: string,
    meta: { form: string },
} & Action;
export type StartSubmit = () => StartSubmitAction;
export type StopAsyncValidationAction = {
    type: string,
    meta: { form: string },
    payload: ?Object,
    error: boolean,
} & Action;
export type StopAsyncValidation = (errors: ?Object) => StopAsyncValidationAction;
export type StopSubmitAction = {
    type: string,
    meta: { form: string },
    payload: ?Object,
    error: boolean,
} & Action;
export type StopSubmit = (errors: ?Object) => StopSubmitAction;
export type SubmitAction = { type: string, meta: { form: string } } & Action;
export type Submit = () => SubmitAction;
export type SetSubmitFailedAction = {
    type: string,
    meta: { fields: string[] },
    error: true,
} & Action;
export type SetSubmitFailed = (...fields: string[]) => SetSubmitFailedAction;
export type SetSubmitSucceededAction = {
    type: string,
    meta: { fields: string[] },
    error: false,
} & Action;
export type SetSubmitSucceeded = (...fields: string[]) => SetSubmitSucceededAction;
export type TouchAction = {
    type: string,
    meta: { fields: string[] },
} & Action;
export type Touch = (...fields: string[]) => TouchAction;
export type UnregisterFieldAction = {
    type: string,
    meta: { form: string },
    payload: { name: string, destroyOnUnmount: boolean },
} & Action;
export type UnregisterField = (name: string, destroyOnUnmount: boolean) => UnregisterFieldAction;
export type UntouchAction = {
    type: string,
    meta: { fields: string[] },
} & Action;
export type Untouch = (...fields: string[]) => UntouchAction;
export type UpdateSyncErrorsAction = {
    type: string,
    meta: { form: string },
    payload: { syncErrors: Object, error: any },
} & Action;
export type UpdateSyncErrors = (syncErrors: Object, error: any) => UpdateSyncErrorsAction;
export type UpdateSyncWarningsAction = {
    type: string,
    meta: { form: string },
    payload: { syncWarnings: Object, warning: any },
} & Action;
export type UpdateSyncWarnings = (syncWarnings: Object, warning: any) => UpdateSyncWarningsAction;

export type BoundFormActions = {
    arrayInsert: ArrayInsert,
    arrayMove: ArrayMove,
    arrayPop: ArrayPop,
    arrayPush: ArrayPush,
    arrayRemove: ArrayRemove,
    arrayRemoveAll: ArrayRemoveAll,
    arrayShift: ArrayShift,
    arraySplice: ArraySplice,
    arraySwap: ArraySwap,
    arrayUnshift: ArrayUnshift,
    autofill: Autofill,
    blur: Blur,
    change: Change,
    clearSubmit: ClearSubmit,
    clearSubmitErrors: ClearSubmitErrors,
    clearAsyncError: ClearAsyncError,
    clearFields: ClearFields,
    destroy: Destroy,
    focus: Focus,
    initialize: Initialize,
    registerField: RegisterField,
    reset: Reset,
    resetSection: ResetSection,
    startAsyncValidation: StartAsyncValidation,
    startSubmit: StartSubmit,
    stopAsyncValidation: StopAsyncValidation,
    stopSubmit: StopSubmit,
    submit: Submit,
    setSubmitFailed: SetSubmitFailed,
    setSubmitSucceeded: SetSubmitSucceeded,
    touch: Touch,
    unregisterField: UnregisterField,
    untouch: Untouch,
    updateSyncErrors: UpdateSyncErrors,
    updateSyncWarnings: UpdateSyncWarnings,
};
