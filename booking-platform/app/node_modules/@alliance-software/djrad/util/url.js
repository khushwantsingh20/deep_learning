// @flow
import qs from 'qs';
import type { Location } from 'react-router-dom';

export function appendSlash(path: string): string {
    if (!path) {
        return '/';
    }
    const [url, ...rest] = path.split('?');
    if (url[url.length - 1] !== '/') {
        const finalUrl = `${url}/`;
        if (rest.length > 0) {
            return `${finalUrl}?${rest.join('/')}`;
        }
        return finalUrl;
    }
    return path;
}

export function getPathname(path: string): string {
    return appendSlash(path.split('?')[0]);
}

export function stripTrailingSlash(path: string): string {
    if (path && path[path.length - 1] === '/') {
        return path.substr(0, path.length - 1);
    }
    return path;
}

export function stripLeadingSlash(path: string): string {
    if (path && path[0] === '/') {
        return path.substr(1);
    }
    return path;
}

export function parentUrl(url: string, level: number = 1): string {
    if (level < 1) {
        return url;
    }
    if (!url) {
        return '/';
    }
    const finalUrl = stripTrailingSlash(url)
        .split('/')
        .slice(0, -1)
        .join('/');
    if (level > 1) {
        return parentUrl(finalUrl, level - 1);
    }
    return appendSlash(finalUrl);
}

/**
 * Parse query query params string
 * @param {String} search query params string. May start with '?', eg. ?query=blah
 * @returns {Object} object with key / value for each query param
 */
export function parseQueryParamsString(search: string): Object {
    if (search && search[0] === '?') {
        search = search.substr(1);
    }
    return qs.parse(search);
}

/**
 * Parse query string from react-router location
 * @param {Location} location react-router location object
 * @returns {Object} object with key / value for each query param
 */
export function parseLocationQuery(location: Location): Object {
    return parseQueryParamsString(location.search);
}

export function buildPath(...parts: Array<string | number>): string {
    if (parts.length === 0) {
        return '/';
    }
    return (
        '/' +
        appendSlash(
            parts.map(uri => stripTrailingSlash(stripLeadingSlash(uri.toString()))).join('/')
        )
    );
}

type AppendToUrlOptions = {
    /** Number of sections to remove from the tail of the url */
    popSections?: number,
    /** Object of query parameters to include in URL */
    query?: string | {},
};

export function appendToUrl(
    url: string,
    uris: string | Array<string>,
    options: AppendToUrlOptions = {}
): string {
    const { popSections = 0, query = '' } = options;
    if (!Array.isArray(uris)) {
        uris = [uris];
    }
    uris = uris.filter(uri => uri && uri !== '/');
    const finalUrl = stripTrailingSlash(parentUrl(url, popSections)) + buildPath(...uris);
    if (query) {
        return `${finalUrl}?${qs.stringify(query)}`;
    }
    return finalUrl;
}
