// @flow
import oneLine from 'common-tags/lib/oneLine';
import { $modelDefinition } from 'alliance-redux-api/lib/Model';
import pathToRegexp from 'path-to-regexp';
import startCase from 'lodash/startCase';
import { appendToUrl } from '../util/url';
import type { ModelMeta, ModelReduxSelectors } from './Model';

export const $isModelRegistered = Symbol.for('djrad/model_registered');
const modelRegDocs = 'https://djrad.herokuapp.com/docs/quickstart/registration/#javascript-models';

/**
 * Base model class for all models in the system. At runtime methods here are copied to the actual underlying
 * immutablejs Record class.
 *
 * Keep what you put in here simple and keep in mind all fields on the model are available on the record so
 * avoid naming conflicts by using get/has/... prefixes on methods.
 *
 * Avoid setting any properties on the class directly - just stick to methods. eg.
 *
 * ```js
 * class MyModel extends DeferredInitModel {
 *     // Don't do this, it won't exist in the final class
 *     myProp = 5;
 * }
 * ```
 *
 * Whenever data is fetched from the backend for this model an instance of that models class is created. You can
 * add useful utility methods to it (eg. `getName`).
 *
 * There are various static methods available for generating URL's for the model.
 */
export default class DeferredInitModel {
    /**
     * Contains selector functions used for extracting data for this model from the redux state. Use this when you
     * need to read data directly out of the redux cache.
     *
     * Usage is with react-redux connect:
     *
     * ```js
     * function mapStateToProps(state) {
     *     return {
     *         // This returns an immutable ordered map keyed by id of all data in the cache for MyModel
     *         items: MyModel.selectors.all(state),
     *     };
     * }
     * connect(mapStateToProps)(MyComponent);
     * ```
     */
    static selectors: ModelReduxSelectors;
    /**
     * The meta data for this model. This is available both as a static property and a instance property.
     *
     * ```js
     * // Access known fields
     * const fields = MyModel._meta.fields;
     * // Label for model
     * const label = MyModel._meta.label;
     * // ... etc - see ModelMeta documentation for more options
     * ```
     */
    static _meta: ModelMeta;
    _meta: ModelMeta;

    /**
     * Check if current user has permission to access a global (model) action (eg. list, create).
     *
     * @param action name of the global action to check
     * @returns {Promise<boolean>} Resolves to boolean indicating user has permission or not
     */
    static hasActionPerm(action: string): Promise<boolean> {
        return this._meta.hasActionPerm(action);
    }

    /**
     * Check if current user has permission to access an object action.
     *
     * @param action name of the object action to check
     * @returns {Promise<boolean>} Resolves to boolean indicating user has permission or not
     */
    hasActionPerm(action: string): Promise<boolean> {
        return this._meta.hasActionPerm(action, this);
    }

    /**
     * Generate a label for an action. Can be used in components like ActionLinkList to generate
     * label if none provided.
     * @param action Name of the action
     * @return Label to use for specified action
     */
    static getActionLabel(action: string): string {
        if (action === 'detail') {
            return 'View';
        }
        return startCase(action);
    }

    /**
     * Get the part of a url for an action.
     *
     * eg. for action 'delete' the URL may be /products/5/delete/ in which
     * case the part is also 'delete'
     * @param action name of the action
     * @return part of the URL without any slashes
     */
    static getActionUrlPart(action: string): string {
        switch (action) {
            case 'list':
                // Default list page is eg. /products/
                return '';
            default:
                return action;
        }
    }

    /**
     * Get the base URL prefix for this model. Forms the default prefix of any urls, eg.
     *
     *   /products/5/delete/
     *
     * The prefix here would be '/products/'.
     *
     * Should contain trailing and leading slashes.
     *
     * @return string with leading and trailing slashes
     */
    static getUrlPrefix(): string {
        return '/' + this._meta.urlBase + '/';
    }

    /**
     * Get pattern for an action. Determines whether object or global action automatically
     * and defers to getGlobalActionPattern or getObjectActionPattern accordingly
     *
     * @returns Pattern string to use with react-router. Should be a pattern [path-to-regexp](https://www.npmjs.com/package/path-to-regexp) understands.
     */
    static getActionPattern(action: string, prefix?: string): string {
        if (this._meta.isValidGlobalAction(action)) {
            return this.getGlobalActionPattern(action, prefix);
        }
        return this.getObjectActionPattern(action, prefix);
    }

    /**
     * Get URL for an action. Determines whether object or global action automatically
     * and defers to getGlobalActionUrl or getObjectActionUrl accordingly
     *
     * @returns URL to use for specified action
     */
    static getActionUrl(action: string, params: {}, prefix?: string): string {
        if (this._meta.isValidGlobalAction(action)) {
            return this.getGlobalActionUrl(action, params, prefix);
        }
        return this.getObjectActionUrl(action, params, prefix);
    }

    /**
     * Get the route pattern to use for a global action
     *
     * @param action to generate pattern for
     * @param prefix URL prefix to use. Defaults to this.getUrlPrefix(). Typically used to nest URLs for a model
     * under another model (eg. related models)
     * @throws Error if an invalid action or object action is provided
     * @returns Pattern string to use with react-router. Should be a pattern [path-to-regexp](https://www.npmjs.com/package/path-to-regexp) understands
     */
    static getGlobalActionPattern(action: string, prefix?: string): string {
        this.validateGlobalAction(action);
        if (prefix == null) {
            prefix = this.getUrlPrefix();
        }
        return appendToUrl(prefix, this.getActionUrlPart(action));
    }

    /**
     * Get the URL to use for a global action.
     *
     * Uses result of getGlobalActionPattern and returns string with all parameters replaced.
     *
     * @param action to generate URL for
     * @param params parameters to replace. should match all replacement variables specified in
     * getGlobalActionPattern.
     * @param prefix URL prefix to use. Defaults to this.getUrlPrefix(). Typically used to nest URLs for a model
     * under another model (eg. related models)
     * @throws Error if an invalid action or object action is provided
     * @returns URL to use for specified action
     */
    static getGlobalActionUrl(action: string, params: {} = {}, prefix?: string): string {
        const toPath = pathToRegexp.compile(this.getGlobalActionPattern(action, prefix));
        return toPath({ action, ...params });
    }

    /**
     * Get the base pattern to use for all object specific action patterns.
     *
     * eg. If your model had the routes:
     *    /products/:id/detail/
     *    /products/:id/update/
     *
     * then the prefix is /products/:id/
     *
     * This makes it easier to write routes that may want to have a base component at the /products/:id/ level and
     * have detail/update sit as nested routes underneath it.
     *
     * @param prefix URL prefix to use. Defaults to this.getUrlPrefix(). Typically used to nest URLs for a model
     * under another model (eg. related models)
     * @returns Pattern string to use with react-router. Should contain an :id part. Should be a pattern [path-to-regexp](https://www.npmjs.com/package/path-to-regexp) understands
     */
    static getObjectActionPatternPrefix(prefix?: string): string {
        if (prefix == null) {
            prefix = this.getUrlPrefix();
        }
        return appendToUrl(prefix, ':id');
    }

    /**
     * Get the route pattern to use for an object action
     *
     * @param action to generate pattern for
     * @param prefix URL prefix to use. Defaults to this.getUrlPrefix(). Typically used to nest URLs for a model
     * under another model (eg. related models)
     * @throws Error if an invalid action or global action is provided
     * @returns Pattern string to use with react-router. Should contain an :id part. Should be a pattern [path-to-regexp](https://www.npmjs.com/package/path-to-regexp) understands
     */
    static getObjectActionPattern(action: string, prefix?: string): string {
        this.validateObjectAction(action);
        return appendToUrl(
            this.getObjectActionPatternPrefix(prefix),
            this.getActionUrlPart(action)
        );
    }

    /**
     * Get the URL to use in routes for a global action with all parameters replaced.
     *
     * Uses result of getObjectActionPattern and returns string with all parameters replaced.
     *
     * @param action to generate URL for
     * @param params parameters to replace. Should match all replacement variables specified in
     * getGlobalActionPattern. Should contain an 'id' key.
     * @param prefix URL prefix to use. Defaults to this.getUrlPrefix(). Typically used to nest URLs for a model
     * under another model (eg. related models)
     * @throws Error if an invalid action or object action is provided
     * @returns URL to use for the specified action
     */
    static getObjectActionUrl(
        action: string,
        params: { id: string | number },
        prefix?: string
    ): string {
        const toPath = pathToRegexp.compile(this.getObjectActionPattern(action, prefix));
        return toPath(params);
    }

    /**
     * Validate that the specified action is valid and a global action (ie. not an object action)
     * @param action Name of action to validate
     * @throws Error if not a valid action or action is a object action
     */
    static validateGlobalAction(action: string): void {
        if (!this._meta.isValidGlobalAction(action)) {
            if (this._meta.isValidObjectAction(action)) {
                throw new Error(
                    `${action} is an object action and can't be used as a global action.`
                );
            }
            throw new Error(`Invalid global action specified: ${action}`);
        }
    }

    /**
     * Validate that the specified action is valid and an object action (ie. not a global action)
     * @param action name of action to validate
     * @throws Error if not a valid action or action is a global action
     */
    static validateObjectAction(action: string): void {
        if (!this._meta.isValidObjectAction(action)) {
            if (this._meta.isValidGlobalAction(action)) {
                throw new Error(
                    `${action} is an global action and can't be used as an object action.`
                );
            }
            throw new Error(`Invalid object action specified: ${action}`);
        }
    }

    /**
     * Is this a partial record? This means not all fields for the record have been fetched;
     * only a subset are available.
     * @returns {boolean}
     */
    isPartialRecord(): boolean {
        // Only the full record has a reference to the class for partial records
        return !this[$modelDefinition].partialRecordClass;
    }
}

/**
 * Trap for using model before it's initialized. This gets replaced on initialization.
 * Since babel7 defining this as a `static get _meta` on the class itself doesn't work
 */
Object.defineProperty(DeferredInitModel, '_meta', {
    get() {
        if (this[$isModelRegistered]) {
            throw new Error(oneLine`
                _meta accessed on uninitialized model. The model has been registered but was used before initialization. 
                This likely means the model is being used outside of a component or redux action. See ${modelRegDocs}.
            `);
        }
        throw new Error(
            `_meta accessed on unregistered model. You need to register this model before use. See ${modelRegDocs}.`
        );
    },
});
