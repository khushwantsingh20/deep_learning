// @flow
import ManyToOneRelation from './ManyToOneRelation';
import ManyToManyRelation from './ManyToManyRelation';
import OneToManyRelation from './OneToManyRelation';
import ForwardOneToOneRelation from './ForwardOneToOneRelation';
import ReverseOneToOneRelation from './ReverseOneToOneRelation';
import Relation from './Relation';

import type { Model } from '../Model';
import type { ModelId, RelationDescriptor } from '../types';

export default function buildRelation(
    fromModel: Class<Model>,
    descriptor: RelationDescriptor,
    models: Map<ModelId, Class<Model>>
): Relation {
    const model = models.get(descriptor.relationRegistrationId);
    if (!model) {
        throw new Error(
            `Expected to find model registration with id ${
                descriptor.relationRegistrationId
            } but could not.`
        );
    }
    if (descriptor.relationType === 'ManyToMany') {
        let throughModel;
        const { throughRegistrationId } = descriptor;
        if (throughRegistrationId) {
            throughModel = models.get(throughRegistrationId);
        }
        return new ManyToManyRelation(fromModel, model, descriptor.filterable, throughModel);
    }
    if (descriptor.relationType === 'ManyToOne') {
        return new ManyToOneRelation(fromModel, model, descriptor.filterable);
    }
    if (descriptor.relationType === 'ForwardOneToOne') {
        return new ForwardOneToOneRelation(fromModel, model, descriptor.filterable);
    }
    if (descriptor.relationType === 'OneToMany') {
        return new OneToManyRelation(
            fromModel,
            model,
            descriptor.remoteFieldName,
            descriptor.filterable
        );
    }
    if (descriptor.relationType === 'ReverseOneToOne') {
        return new ReverseOneToOneRelation(
            fromModel,
            model,
            descriptor.remoteFieldName,
            descriptor.filterable
        );
    }
    throw new Error(`Unknown relation type of ${descriptor.relationType}`);
}
