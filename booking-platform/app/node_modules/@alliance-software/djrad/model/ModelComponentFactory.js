// @flow
import * as React from 'react';
import { Helmet } from 'react-helmet';

import type { ListViewProps, ListFilterProps } from '../components/model/FetchListView';
import ModelForm from '../components/model/ModelForm';
import type { RenderModelFormProps } from '../components/model/ModelFormProcessor';
import DetailGridView from '../components/model/DetailGridView';
import type { Props as DetailGridViewProps } from '../components/model/DetailGridView';
import ListTableView from '../components/model/ListTableView';
import ActionLinkList from '../components/model/ActionLinkList';
import type { Model } from './Model';
import ModelFilterForm from '../components/filter/ModelFilterForm';

export default class ModelComponentFactory {
    model: Class<Model>;

    constructor(model: Class<Model>) {
        this.model = model;
    }

    buildCreateForm(props: RenderModelFormProps) {
        return (
            <ModelForm
                {...props}
                model={this.model}
                layout="horizontal"
                fieldNames={this.model._meta.crud.createFields}
            />
        );
    }

    buildUpdateForm(props: RenderModelFormProps) {
        return (
            <ModelForm
                {...props}
                model={this.model}
                layout="horizontal"
                fieldNames={this.model._meta.crud.updateFields}
            />
        );
    }

    buildDetailView(props: DetailGridViewProps) {
        // $FlowFixMe: complains about fields (which is Array<string> not matching type of Array<Field | string>).. no idea
        const { record } = props;
        return (
            <React.Fragment>
                <Helmet>
                    <title>
                        {record._meta.labelPlural} - {record.__str__}
                    </title>
                </Helmet>
                <h2>{record.__str__}</h2>
                <DetailGridView
                    {...props}
                    model={this.model}
                    fields={this.model._meta.crud.detailFields}
                />
            </React.Fragment>
        );
    }

    buildListViewRecordActions(record: Model) {
        return <ActionLinkList record={record} actions={['detail', 'update', 'delete']} />;
    }

    buildListFilter(props: ListFilterProps) {
        if (this.model._meta.crud.filterFields.length === 0) {
            return null;
        }
        return <ModelFilterForm layout="horizontal" model={this.model} {...props} />;
    }

    /**
     * This is used to specify what fields to include in fetch payload. Make sure you override
     * this if you customise the fields shown in buildListView
     */
    getListViewFields() {
        // Always copy to avoid accidental mutation of underlying array
        return [...this.model._meta.crud.listFields];
    }

    buildListView(props: ListViewProps) {
        const { sortableFields } = this.model._meta.crud;
        const listFields = [...this.getListViewFields()];
        listFields.push({
            dataIndex: 'actions',
            render: (value, record) => this.buildListViewRecordActions(record),
        });
        return <ListTableView {...props} columns={listFields} sortableFields={sortableFields} />;
    }
}
