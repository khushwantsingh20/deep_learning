// @flow
import * as React from 'react';
import { List as AntList } from 'antd';
import { FieldArray, Field as ReduxFormField } from 'redux-form';

import type { WidgetProps } from '../../components/form/FormField';
import type { FormatterProps } from '../../components/formatter/types';
import ListWidget from '../../components/form/widgets/ListWidget';
import ContainerField from './ContainerField';

export type RenderListItemExtra = {
    value: any,
    onRemove: () => void,
    index: number,
};

export default class ListField extends ContainerField {
    renderListItem = (formFieldName: string, extra: RenderListItemExtra) =>
        this.field.getListItemWidget(formFieldName, extra);

    getDefaultWidget(props: WidgetProps) {
        if (this.field.choiceRefinementUrl || this.field.choices) {
            return this.field.getDefaultWidget({ ...props, multiple: true });
        }
        return (
            <ListWidget
                min={this.required ? 1 : 0}
                {...props}
                renderItem={this.renderListItem}
                defaultValue={this.field.getDefaultValue()}
            />
        );
    }

    parse(values: ?Array<any>): Array<any> {
        return (values || []).map(value => this.field.parse(value));
    }

    format(values: ?Array<any>): Array<any> {
        return (values || []).map(value => this.field.format(value));
    }

    getDefaultFormatter(props: FormatterProps): React.Node {
        const { value } = props;
        return (
            <AntList
                dataSource={value ? value.toArray() : []}
                renderItem={item => (
                    <AntList.Item>
                        {this.field.getDefaultFormatter({ ...props, value: item })}
                    </AntList.Item>
                )}
            />
        );
    }

    getReduxFormFieldComponent() {
        if (this.field.choiceRefinementUrl || this.field.choices) {
            return ReduxFormField;
        }
        return FieldArray;
    }

    // eslint-disable-next-line no-unused-vars
    transformFilterValue(value: any, allValues: { [string]: any }): { [string]: any } {
        if (!value || (Array.isArray(value) && value.length === 0)) {
            return {};
        }
        return { [this.name]: value };
    }
}
