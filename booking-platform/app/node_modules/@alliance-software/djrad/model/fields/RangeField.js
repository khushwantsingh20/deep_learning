import React from 'react';
import { Fields as ReduxFormFields } from 'redux-form';

import Field from './Field';
import InputRangeWidget from '../../components/form/widgets/InputRangeWidget';

/**
 * We create this outside of RangeReduxFormField to avoid creating a component every
 * time RangeReduxFormField is  used. This can cause problems as it looks like a new
 * component every time as so gets unmounted / remounted every render.
 */
function RangeWrapperWidget({ originalFieldName, originalComponent: OriginalComponent, ...props }) {
    const { [originalFieldName]: field } = props;
    return (
        <OriginalComponent lower={field.lower} upper={field.upper} combined={field} {...props} />
    );
}
export function RangeReduxFormField({
    name,
    component: OriginalComponent,
    format,
    parse,
    ...rest
}) {
    // We track the lower and upper bound as separate fields as sub-keys under the main
    // form field. We also include the main field name to allow updating both values
    // simultaneously. The component above passes each field individually through
    // to the underlying widget component so it can use either 'lower', 'upper', or
    // 'combined'. See DateRangeWidget and InputRangeWidget for examples.
    // Data is stored as an object of shape:
    // {
    //    lower: ...,
    //    upper: ...,
    // }
    return (
        <ReduxFormFields
            names={[name, `${name}.lower`, `${name}.upper`]}
            originalFieldName={name}
            originalComponent={OriginalComponent}
            component={RangeWrapperWidget}
            format={format}
            parse={parse}
            {...rest}
        />
    );
}

export default class RangeField extends Field {
    constructor(model, site, relation, options) {
        super(model, site, relation, options);
        const {
            fieldClassOptions: { upperBoundSuffix, lowerBoundSuffix },
        } = options;
        this.lowerBoundSuffix = lowerBoundSuffix;
        this.upperBoundSuffix = upperBoundSuffix;
    }

    getReduxFormFieldComponent() {
        return RangeReduxFormField;
    }

    getRangeValueFormatter(props) {
        return props.value;
    }

    getDefaultFormatter(props) {
        if (!props.value) {
            return null;
        }
        const { lower, upper } = props.value;
        return (
            <React.Fragment>
                {this.getRangeValueFormatter({ ...props, value: lower })} -{' '}
                {this.getRangeValueFormatter({ ...props, value: upper })}
            </React.Fragment>
        );
    }

    getDefaultWidget(widgetProps) {
        return <InputRangeWidget {...widgetProps} />;
    }

    /**
     * When this field is used as a filter this function can be used to transform a value
     * into a different shape as required by the backend. Should return an object indexed
     * by name that will be merged with all other fields in a form.
     * @param value
     * @returns {[null]}
     */
    transformFilterValue(value) {
        if (!value) {
            return {};
        }
        const { lower, upper } = value;
        return {
            [this.name]: undefined,
            [`${this.name}${this.lowerBoundSuffix}`]: lower,
            [`${this.name}${this.upperBoundSuffix}`]: upper,
        };
    }
}
