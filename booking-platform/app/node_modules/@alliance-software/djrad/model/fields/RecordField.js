// @flow
import React from 'react';
import Field from './Field';
import type { FieldDefinition } from '../types';
import type { Model } from '../Model';
import ModelForm from '../../components/model/ModelForm';
import type { WidgetProps } from '../../components/form/FormField';
import Relation from '../relations/Relation';
import Site from '../../site/Site';

export default class RecordField extends Field {
    recordDefinition: {
        fields: { [string]: Field },
        fieldNames: Array<string>,
        writeableFieldNames: Array<string>,
    };

    constructor(
        model: Class<Model>,
        site: Site,
        relation: ?Relation,
        options: FieldDefinition,
        fields: Array<Field>
    ) {
        super(model, site, relation, options);
        this.recordDefinition = fields.reduce(
            (acc, field) => {
                acc.fields[field.name] = field;
                acc.fieldNames.push(field.name);
                if (!field.readOnly) {
                    acc.writeableFieldNames.push(field.name);
                }
                return acc;
            },
            {
                fields: {},
                fieldNames: [],
                writeableFieldNames: [],
            }
        );
    }

    getDefaultWidget(props: WidgetProps) {
        const { fields, writeableFieldNames } = this.recordDefinition;
        return (
            <ModelForm
                initialValues={props.value}
                layout="horizontal"
                fieldNames={writeableFieldNames}
                fieldDefinitions={fields}
                formName={this.name}
                footer={null}
            />
        );
    }

    async getDefaultValue() {
        const { fields, writeableFieldNames } = this.recordDefinition;
        const defaultValues = {};
        for (const fieldName of writeableFieldNames) {
            const field = fields[fieldName];
            const value = await field.getDefaultValue();
            if (value != null) {
                defaultValues[fieldName] = value;
            }
        }
        return defaultValues;
    }
}
