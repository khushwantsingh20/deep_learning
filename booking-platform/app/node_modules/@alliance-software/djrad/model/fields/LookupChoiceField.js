// @flow
import * as React from 'react';
import { Select, Input } from 'antd';
import { Fields } from 'redux-form';

import type { WidgetProps } from '../../components/form/FormField';
import Field from './Field';
import ContainerField from './ContainerField';

import './LookupChoiceField.less';

type LookupChoiceOptions = {
    lookupChoices: Array<[any, string]>,
    valueSuffix: string,
    lookupSuffix: string,
};

const LookupChoiceReduxFormField = ({ name, ...rest }) => {
    const lookupTypeName = `${name}.lookupType`;
    const lookupValueName = `${name}.lookupValue`;
    return (
        <Fields
            names={[name, lookupTypeName, lookupValueName]}
            originalFieldName={name}
            {...rest}
        />
    );
};

export default class LookupChoiceField extends ContainerField {
    lookupChoices: ?Map<any, string>;
    valueSuffix: string;
    lookupSuffix: string;

    constructor(
        field: Field | ContainerField,
        options: LookupChoiceOptions,
        defaultValue: ?Array<any>
    ) {
        super(field, defaultValue);
        const { lookupChoices, valueSuffix, lookupSuffix } = options;
        this.lookupChoices = new Map(lookupChoices);
        this.valueSuffix = valueSuffix;
        this.lookupSuffix = lookupSuffix;
    }

    getDefaultWidget(props: WidgetProps) {
        const fields = props[props.originalFieldName];
        const { filterLookupNoValue } = this.site.config.constants;
        const hideValueWidget = filterLookupNoValue.includes(fields.lookupType.input.value);
        return (
            <Input.Group className="djrad--lookup-choice-field__input-group" compact>
                <Select {...fields.lookupType.input}>
                    {[...this.lookupChoices.entries()].map(([value, label]) => (
                        <Select.Option key={value} value={value}>
                            {label}
                        </Select.Option>
                    ))}
                </Select>
                {!hideValueWidget &&
                    this.field.getDefaultWidget({
                        ...fields.lookupValue.input,
                        meta: fields.lookupValue.meta,
                    })}
            </Input.Group>
        );
    }

    format(value: {}, name: string): ?{} {
        if (name === `${this.field.name}.lookupValue`) {
            return this.field.format(value);
        }
        return value;
    }

    parse(value: {}, name: string): ?{} {
        if (name === `${this.field.name}.lookupValue`) {
            return this.field.parse(value);
        }
        return value;
    }

    getDefaultValue(): ?Array<any> {
        return {
            lookupType: this.defaultValue,
            lookupValue: this.field.defaultValue,
        };
    }

    getReduxFormFieldComponent() {
        return LookupChoiceReduxFormField;
    }

    transformFilterValue(value: any): { [string]: any } {
        const { lookupType, lookupValue } = value;
        // Some lookup types require no value (eg. isnull)
        if (this.site.config.constants.filterLookupNoValue.includes(lookupType)) {
            // NOTE: This only works for ChoiceFields where you specify a null_label
            // (the actual label doesn't matter)
            return {
                [`${this.name}${this.valueSuffix}`]: null,
                [`${this.name}${this.lookupSuffix}`]: lookupType,
            };
        }
        if (!lookupValue) {
            return {};
        }
        return {
            [`${this.name}${this.valueSuffix}`]: lookupValue,
            [`${this.name}${this.lookupSuffix}`]: lookupType,
        };
    }
}
