// @flow
type ManyToOneRelationDescriptor = {
    relationType: 'ManyToOne',
    relationRegistrationId: string,
    filterable: boolean,
    normalizeToField: ?string,
};
type OneToManyRelationDescriptor = {
    relationType: 'OneToMany',
    relationRegistrationId: string,
    remoteFieldName: string,
    filterable: boolean,
    normalizeToField: ?string,
};
type ManyToManyRelationDescriptor = {
    relationType: 'ManyToMany',
    relationRegistrationId: string,
    filterable: boolean,
    throughRegistrationId: ?string,
    normalizeToField: ?string,
};
type ForwardOneToOneDescriptor = {
    relationType: 'ForwardOneToOne',
    relationRegistrationId: string,
    filterable: boolean,
    normalizeToField: ?string,
};
type ReverseOneToOneDescriptor = {
    relationType: 'ReverseOneToOne',
    relationRegistrationId: string,
    remoteFieldName: string,
    filterable: boolean,
    normalizeToField: ?string,
};
export type RelationDescriptor =
    | ManyToOneRelationDescriptor
    | ManyToManyRelationDescriptor
    | OneToManyRelationDescriptor
    | ForwardOneToOneDescriptor
    | ReverseOneToOneDescriptor;

type ModelReferenceStorageTypeDescriptor = {
    name: 'ModelReference',
    registrationId: string,
};

export type StorageTypeDescriptor =
    | {
          name: 'String' | 'File' | 'Image' | 'Date' | 'Number' | 'Boolean' | 'Record',
          subType: ?StorageTypeDescriptor,
          defaultValue: any,
      }
    | {
          name: 'List',
          subType: StorageTypeDescriptor,
          defaultValue: Array<any>,
      }
    | ModelReferenceStorageTypeDescriptor;

export type FieldContainerDescriptor = {
    containerType: 'List',
    child: ?FieldContainerDescriptor,
    defaultValue: ?Array<any>,
};

export type FieldDefinition = {
    fieldClassName: string,
    // Any options specified to fieldClassName
    fieldClassOptions: ?Object,
    name: string,
    originalFieldName: string,
    pk: boolean,
    source: string,
    label: string,
    required: boolean,
    helpText: ?string,
    defaultValue: ?any,
    choices: ?Array<[any, string]>,
    // If specified defines an API endpoint to use to fetch choice values. This is intended
    // to be used in conjunction with RemoteChoicesWidget.
    // @see RemoteChoicesWidget
    choiceRefinementUrl: ?string,
    readOnly: boolean,
    writeOnly: boolean,
    storageType: StorageTypeDescriptor,
    relation?: RelationDescriptor,
    containedIn?: FieldContainerDescriptor,
    defaultValueMap?: Map<any, any>,
};

export type ModelId = string;

export type PermissionName = string;
export type PermissionNameList = Array<PermissionName>;

export type ModelDefinition = {
    appLabel: string,
    urlBase: string,
    endpoint: string,
    actions: {
        global: PermissionNameList,
        object: PermissionNameList,
    },
    actionPermissions: { [actionName: string]: PermissionNameList },
    relatedLookup: ?{
        endpoint: string,
        supportsKeywordSearch: boolean,
    },
    pkFieldName: string,
    label: string,
    labelPlural: string,
    modelId: ModelId,
    fields: Array<FieldDefinition>,
    crud: {
        sortableFields: Array<string>,
        listFields: Array<string>,
        detailFields: Array<string>,
        createFields: Array<string>,
        updateFields: Array<string>,
        filterFields: Array<FieldDefinition>,
    },
    orderedModel?: {
        orderFieldName: string,
        orderWithRespectTo: ?Array<string>,
    },
};
