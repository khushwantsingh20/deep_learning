// @flow
import * as React from 'react';
import { Provider } from 'react-redux';
import type { Match } from 'react-router-dom';
import { withRouter } from 'react-router-dom';
import { BreadcrumbProvider } from '../../components/breadcrumbs';
import FieldFormatterProvider from '../../components/model/FieldFormatterProvider';
import FieldWidgetProvider from '../../components/model/FieldWidgetProvider';
import { LastLocationProvider } from '../../components/routing/LastLocation';

import RedirectTrailingSlash from '../../components/routing/RedirectTrailingSlash';
import type { Model } from '../../model/Model';
import type { ModelId } from '../../model/types';
import type { Store } from '../../types/store';
import { appendToUrl } from '../../util/url';
// import initComponentFactory from '../../factory/init';
// import type { ComponentRegistrationMapping } from '../../factory/init';
import Site from '../Site';
import { ActionUrlContext, DjradContext } from './context';

let DevTools;
try {
    DevTools = require('@alliance-software/djrad-devtools/DevTools').default;
} catch (e) {
    // Not installed
}

type DjradSettings = {
    /**
     * The default date format to use in components. Used by
     * [DateWidget](/Components/DateWidget/#format).
     */
    dateFormat?: string,
    /**
     * The default date & time format to use in components. Used by
     * [DateTimeWidget](/Components/DateTimeWidget/#format).
     */
    dateTimeFormat?: string,
    /**
     * The default page size to use. Used by [useListModel](/api/js/hooks/#useListModel)
     */
    defaultPageSize?: number,
};

type Props = {
    /**
     * The djrad Site object
     */
    site: Site,
    match: Match,
    children: React.Node,
    /**
     * Whether to force trailing slashes. If true will log a warning in dev
     * when links don't contain a trailing slash.
     */
    trailingSlash: boolean,
    /**
     * The redux store
     */
    store: Store,
    /**
     * An object defining default settings to use. Can be accessed anywhere
     * using the [useSettings](/api/js/hooks/#useSettings) hook.
     *
     * You can pass your own app specific settings here in addition to the
     * settings used internally by djrad.
     */
    settings?: DjradSettings,
};

type CrudActionOptions = {
    match?: Match,
    urlBase?: string,
    query?: string,
};

const defaultSettings = {
    dateFormat: 'MMMM Do YYYY',
    dateTimeFormat: 'MMMM Do YYYY, h:mm a',
    defaultPageSize: 20,
};

export type getActionUrlType = (
    modelClass: Class<Model> | Model | ModelId,
    action: string,
    params?: { [string]: string | number },
    options?: CrudActionOptions
) => string;

/**
 * Provider that entire wrap needs to be wrapped in. Sets up necessary
 * djrad providers and the redux provider.
 */
class DjradProvider extends React.Component<Props> {
    settings: DjradSettings;

    static defaultProps = {
        trailingSlash: true,
    };

    constructor(props) {
        if (props.app) {
            throw new Error(
                "The 'app' prop to DjradProvider has been renamed to 'site'. Please update your usage."
            );
        }
        // initComponentFactory(this.props.componentRegistrationMapping);
        props.site.initialize(props.store);
        super(props);
    }

    buildUrl(
        url: string,
        modelClass: Class<Model> | Model | ModelId,
        action: string,
        options?: CrudActionOptions = {}
    ) {
        if (typeof modelClass == 'string') {
            const modelId = modelClass;
            // $FlowFixMe: Not sure why this doesn't validate...
            modelClass = this.props.site.models.get(modelId);
            if (!modelClass) {
                throw new Error(`Unknown model specified: ${modelId}`);
            }
        }
        const query = options.query;
        const urlBase = options.urlBase || modelClass._meta.urlBase;
        if (!action) {
            return appendToUrl(url, urlBase);
        }
        switch (action) {
            case 'update':
            case 'delete':
                return appendToUrl(url, [urlBase, ':id', action], { query });
            case 'view':
                return appendToUrl(url, [urlBase, ':id'], { query });
            case 'list':
                return appendToUrl(url, [urlBase], { query });
            default:
                return appendToUrl(url, [urlBase, action], { query });
        }
    }

    getActionUrl: getActionUrlType = (
        modelClass: Class<Model> | Model | ModelId,
        action: string,
        params: { [string]: string | number } = {},
        options?: CrudActionOptions = {}
    ) => {
        const match = options.match || this.props.match;
        modelClass = this.props.site.getModelClass(modelClass);
        const query = options.query;
        // urlBase of empty string is valid so only use default on null / undefined
        const prefix = options.urlBase == null ? modelClass.getUrlPrefix() : options.urlBase;
        const url = appendToUrl(match.url, modelClass.getActionUrl(action, params, prefix));
        if (query) {
            return appendToUrl(url, '', { query });
        }
        return url;
    };

    render() {
        const { children, trailingSlash, store } = this.props;
        const { getActionUrl } = this;
        const { site } = this.props;
        const settings = {
            ...defaultSettings,
            ...this.props.settings,
        };
        // Provide... all the things
        return (
            <Provider store={store}>
                <DjradContext.Provider value={{ settings, djradSite: site }}>
                    <ActionUrlContext.Provider value={{ getActionUrl }}>
                        <BreadcrumbProvider>
                            <LastLocationProvider history={this.props.history}>
                                <FieldFormatterProvider>
                                    <FieldWidgetProvider>
                                        {DevTools && <DevTools />}
                                        {children}
                                        {trailingSlash && <RedirectTrailingSlash />}
                                    </FieldWidgetProvider>
                                </FieldFormatterProvider>
                            </LastLocationProvider>
                        </BreadcrumbProvider>
                    </ActionUrlContext.Provider>
                </DjradContext.Provider>
            </Provider>
        );
    }
}

export default withRouter(DjradProvider);
