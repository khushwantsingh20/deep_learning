// @flow
import qs from 'qs';

import type { ApiListResponse } from './types';

export class ApiResponse {
    count: number;
    paginated: boolean;
    results: Array<Object>;
    nextPage: ?number;
    previousPage: ?number;

    constructor(response: ApiListResponse) {
        const { payload } = response;
        if (Array.isArray(payload)) {
            this.count = payload.length;
            this.paginated = false;
            this.results = payload;
        } else {
            const { next, previous, results, count } = payload;
            this.count = count;
            this.paginated = true;
            this.results = results;
            if (next) {
                const { page } = qs.parse(next.split('?').pop());
                if (page) {
                    this.nextPage = Number(page);
                }
            }
            if (previous) {
                const { page } = qs.parse(previous.split('?').pop());
                if (page) {
                    this.previousPage = Number(page);
                }
            }
        }
    }

    getTotalCount(): number {
        return this.count;
    }

    getResults(): Array<Object> {
        return this.results;
    }

    isPaginated(): boolean {
        return this.paginated;
    }

    getNextPage(): number | false {
        if (!this.nextPage) {
            return false;
        }
        return this.nextPage;
    }

    getPreviousPage(): number | false {
        if (!this.previousPage) {
            return false;
        }
        return this.previousPage;
    }
}
