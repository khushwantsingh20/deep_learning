// @flow
import * as React from 'react';
import { Button } from 'antd';
import { Field } from 'redux-form';
import type { FieldProps } from 'redux-form';
import FormContext from './formContext';
import type { FormFieldProps } from './FormField';

const { useContext } = React;

export const RAD_FORM_ACTION_FIELD_NAME = '__RAD_FORM_ACTION';

export const FORM_ACTIONS = {
    DELETE: 'ACTION_DELETE',
    CLEAR: 'ACTION_CLEAR',
    SAVE: 'ACTION_SAVE',
    SAVE_AND_CONTINUE: 'ACTION_SAVE_AND_CONTINUE',
    SAVE_AND_ADD_ANOTHER: 'ACTION_SAVE_AND_ADD_ANOTHER',
};
const AUTO_SUBMIT_FORM_ACTIONS = [
    FORM_ACTIONS.SAVE_AND_ADD_ANOTHER,
    FORM_ACTIONS.SAVE_AND_CONTINUE,
];
export type FormActionType = $Values<typeof FORM_ACTIONS>;

// We are abusing redux-form Field just to get access to whether form is submitting and to
// set a field that tracks the selected action...
// As such we just ignore the input value
type WrapperProps = FieldProps &
    FormFieldProps & {
        /**
         * The action name. Can be one of the built in types or any string constant:
         * @example
         * ```js
         * import { FORM_ACTIONS } from '@alliance-software/djrad/components/form/FormButton';
         *
         * FORM_ACTIONS.DELETE
         * FORM_ACTIONS.SAVE
         * FORM_ACTIONS.SAVE_AND_CONTINUE
         * FORM_ACTIONS.SAVE_AND_ADD_ANOTHER
         * ```
         *
         * The action clicked is available in the form submission on the constant:
         *
         * @example
         * ```js
         * import { SUBMISSION_ACTION_FIELD_NAME } from '@alliance-software/djrad/components/form/Form';
         *
         * <Form onSubmit={data => console.log(data[SUBMISSION_ACTION_FIELD_NAME])}>
         *     ...
         * </Form>
         * ```
         *
         * [ModelFormProcessor](/components/ModelFormProcessor/) will handle the above actions by default. If
         * you are not using `ModelFormProcessor` or you add your own actions you will need to handle them
         * yourself.
         */
        action?: string,
        /**
         * If true the button will display a loading state when the form is submitting. See loading prop on [Button](https://ant.design/components/button/)
         * for what this means. If `loadingMessage` is also specified it will be rendered instead of `children` when
         * in the loading state.
         */
        showLoading?: boolean,
        /**
         * If specified this will be rendered in place of `children` when the form is submitting. Only used when
         * `showLoading` is true.
         */
        loadingMessage?: React.Node,
        /**
         * If true clicking this button will cause a form submission. You can use this in place of `htmlType="submit"`
         * for cases where you have multiple buttons you want to cause a submission but you want to control which
         * one is the default. This is important to control what happens when the user presses enter in a field for
         * example - in this case the _first_ button with `htmlType` of 'submit' is used.
         */
        submitOnClick?: boolean,
        /**
         * [type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type) of the button. The
         * [Button](https://ant.design/components/button/) component defaults to a type of 'button'. If you want the
         * button to trigger a form submit set this to `submit` or specify `submitOnClick`.
         */
        htmlType?: string,
    };
function ButtonWrapper({
    input,
    meta,
    action,
    submitOnClick,
    htmlType,
    showLoading = false,
    loadingMessage,
    children,
    ...rest
}: WrapperProps): React.Element<typeof Button> {
    const loading = meta.submitting && showLoading;
    // Actions are passed via context to the parent form using context.onFormAction
    // See Form.js
    // This is still a connected redux form though purely to get access to submitting state

    // Some buttons we want to, by default, cause a submit without having to be manually
    // specified with htmlType="submit". This is because if you have multiple htmlType="submit"
    // then the _first_ one in the DOM will run when you press enter on a field.
    if (submitOnClick == null) {
        submitOnClick = AUTO_SUBMIT_FORM_ACTIONS.includes(action);
    }
    // Disable submitOnClick if button would submit anyway to avoid double submit
    if (htmlType === 'submit') {
        submitOnClick = false;
    }
    const context = useContext(FormContext);
    return (
        <Button
            disabled={meta.submitting}
            loading={loading}
            onClick={() => context.onFormAction(action, submitOnClick)}
            htmlType={htmlType}
            {...rest}
        >
            {loading && loadingMessage ? loadingMessage : children}
        </Button>
    );
}

/**
 * Renders a button that triggers a form action. If the action triggers a submit (as controlled by the `submitOnClick` or
 * `htmlType="submit"` props) then the action name will be available in the form data on the `_submitAction` key. You can
 * also react to the action by passing [onFormAction](/components/Form/#onFormAction) to the form the button is contained
 * within.
 *
 * Default button types are:
 *
 * ```js
 * import { FORM_ACTIONS } from '@alliance-software/djrad/components/form/FormButton';
 *
 * // Handled by ModelFormProcessor
 * FORM_ACTIONS.DELETE
 * // Clears the form
 * FORM_ACTIONS.CLEAR
 * // Default action
 * FORM_ACTIONS.SAVE
 * // Handled by ModelFormProcessor. Instead of redirecting stays on current page on save.
 * FORM_ACTIONS.SAVE_AND_CONTINUE
 * // Handled by ModelFormProcessor. Redirects to creation page after save.
 * SAVE_AND_ADD_ANOTHER
 * ```
 *
 * Note that if you aren't using `ModelFormProcessor` the actions (apart from CLEAR) will do nothing unless you react
 * to them in some way in either `onSubmit` or in `onFormAction`.
 */
export default function FormButton(props: WrapperProps): React.Element<typeof Field> {
    // Use a field to track the action taken on the button (eg. save, save and continue etc)
    return <Field {...props} name={RAD_FORM_ACTION_FIELD_NAME} component={ButtonWrapper} />;
}
