// @flow
import { SubmissionError } from 'redux-form';
import { ApiError } from '../../api';

/**
 * Handle an API error in a form. Takes a standard ApiError as returned
 * by the various API actions and throws it as a `SubmissionError` with
 * the correct parameters such that redux-form will add it to the form
 * errors.
 *
 * @example
 * ```js
 * export function LoginForm({ login, onSuccess, formName = 'login', ...rest }) {
 *     const performLogin = async data => {
 *         try {
 *             const response = await login(data);
 *             if (onSuccess) {
 *                 onSuccess(response);
 *             }
 *         } catch (apiError) {
 *             handleErrorResponse(apiError);
 *         }
 *     };
 *     const footer = (
 *         <FormButton
 *             type="primary"
 *             size="large"
 *             showLoading
 *             loadingMessage="Please wait..."
 *             htmlType="submit"
 *         >
 *             Sign in
 *         </FormButton>
 *     );
 *     return (
 *         <Form
 *             {...rest}
 *             form={formName}
 *             onSubmit={performLogin}
 *             footer={footer}
 *         >
 *             <FormItem>
 *                 <FormField name="username" placeholder="Username" autoFocus />
 *             </FormItem>
 *             <FormItem hasFeedback>
 *                 <FormField name="password" placeholder="Password" type="password" />
 *             </FormItem>
 *         </Form>
 *     );
 * }
 * ```
 * @param apiError An ApiError from one of the API actions. If no specific errors can be found
 * then returns a generic global form error.
 *
 * @returns No return - always throws a `SubmissionError`
 */
export function handleErrorResponse(apiError: Error | ApiError) {
    if (
        apiError &&
        apiError.status === 400 &&
        apiError.response &&
        typeof apiError.response == 'object'
    ) {
        const errors = apiError.response;
        let finalErrors = errors;
        if (errors && typeof errors == 'object' && errors.nonFieldErrors) {
            const { nonFieldErrors, ...rest } = errors;
            finalErrors = {
                ...rest,
                _error: nonFieldErrors,
            };
        }
        throw new SubmissionError(finalErrors);
    }
    console.error(apiError); // eslint-disable-line
    throw new SubmissionError({
        _error: 'Unexpected error. Please try again.',
    });
}
