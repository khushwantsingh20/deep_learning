import React from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import { Button, Row } from 'antd';
import componentPropType from '../../../prop-types/component';

import './ListItemWidget.less';

const defaultRenderButton = ({ onRemove, canRemove }) =>
    canRemove && (
        <Button
            type="danger"
            size="small"
            shape="circle"
            icon="close"
            onClick={onRemove}
            className="djrad--list-item-remove"
        />
    );

/**
 * Render a single item in a list. Use in conjuction with [ListWidget](/components/ListWidget/).
 */
export default function ListItemWidget({
    inputWidget,
    renderButton,
    canRemove,
    onRemove,
    wrapperClassName,
    ...rest
}) {
    let inputEl;
    if (React.isValidElement(inputWidget)) {
        inputEl = React.cloneElement(inputWidget, rest);
    } else {
        inputEl = React.createElement(inputWidget, rest);
    }
    return (
        <Row className={cx('djrad--list-item-widget', wrapperClassName)}>
            {inputEl}
            {renderButton({ onRemove, canRemove, ...rest })}
        </Row>
    );
}

ListItemWidget.propTypes = {
    /** Class name to apply to the `div` wrapper in addition to the default class `djrad--list-item-widget` */
    wrapperClassName: PropTypes.string,
    /**
     * Component to render the input widget for this item. Can either be a component or component element.
     * If an element is passed it will be cloned and passed normal widget props (value, onChange etc).
     * eg. `inputWidget={NumberWidget}` and `inputWidget={<NumberWidget />}` are equivalent.
     **/
    inputWidget: PropTypes.oneOfType([componentPropType, PropTypes.node]).isRequired,
    /**
     * Render the remove button for this item. Receives:
     *
     * | Param | Type | Desc |
     * |-------|------|------|
     * |params | Object | |
     * |params.onRemove|Func|Callback that will remove the item|
     * |params.canRemove|Boolean|True if this item can be removed. See [ListWidget](/components/ListWidget/) `min` prop.|
     * |params.* | Object| All other props passed through to ListItemWidget excluding inputWidget, renderButton and wrapperClassName |
     */
    renderButton: PropTypes.func,
    /** Callback to remove this item. Usually provided by `ListWidget`. */
    onRemove: PropTypes.func.isRequired,
    /** Whether this item can be removed. Usually provided by `ListWidget`. */
    canRemove: PropTypes.bool.isRequired,
};

ListItemWidget.defaultProps = {
    renderButton: defaultRenderButton,
};
