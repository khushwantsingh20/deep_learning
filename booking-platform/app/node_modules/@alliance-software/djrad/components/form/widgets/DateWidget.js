// @flow
import { DatePicker } from 'antd';
import moment from 'moment';
import * as React from 'react';
import useSettings from '../../../hooks/useSettings';
import type { WidgetProps } from '../FormField';

type Props = WidgetProps & {
    /** Current value, either instance of moment or a string */
    value?: moment | string,
    /**
     * Date format. To customise this globally see [DjradProvider](/components/DjradProvider/#settings).
     * @see http://momentjs.com/docs/#/displaying/
     */
    format?: string,
    /**
     * Whether to show time or not. If object is specified it is passed as props to the [TimePicker](https://ant.design/components/time-picker/#API)
     */
    showTime?: boolean | {},
    /**
     * Will be passed the last date value selected and the DOM event that triggered
     * when the widget is blurred. Note that the value on event.target can't be relied
     * on - use the first parameter to access the value.
     *
     * Note that antd calls this even when the calendar is still open so use with
     * caution.
     */
    onBlur?: (date: moment, event: Event) => void,
};

const defaultSettings = {
    dateFormat: 'MMMM Do YYYY',
    dateTimeFormat: 'MMMM Do YYYY, h:mm a',
};

/**
 * Date / Time picker. Uses ant.design `DatePicker`.
 * @see [DatePicker](https://ant.design/components/date-picker) for all available props.
 */
const DateWidget = React.forwardRef((props: Props, ref) => {
    const settings = useSettings(defaultSettings);
    // Track last value set in onChange so is available in onBlur
    const lastValue = React.useRef(props.value);
    const {
        value,
        showTime = false,
        format = settings[`${showTime ? 'dateTime' : 'date'}Format`],
        onBlur,
        onChange,
        ...rest
    } = props;
    let finalValue = value;
    if (finalValue && !moment.isMoment(finalValue)) {
        finalValue = moment(finalValue);
    }
    if (finalValue === '') {
        finalValue = null;
    }
    // Ant doesn't pass us anything useful here - the event target doesn't point
    // at the relevant input so we have to extract it from the ref.
    const wrappedOnBlur = e => {
        onBlur(lastValue.current, e);
    };
    return (
        <DatePicker
            ref={ref}
            format={format}
            showTime={showTime}
            value={finalValue}
            onBlur={onBlur && wrappedOnBlur}
            onChange={(nextValue, ...extra) => {
                lastValue.current = nextValue;
                return onChange(nextValue, ...extra);
            }}
            {...rest}
        />
    );
});

export default DateWidget;
