// @flow
import React from 'react';
import { Spin } from 'antd';

import type { ChoicesWidgetProps } from './RemoteChoicesWidget';
import SelectWidget from '../SelectWidget';
import InfiniteScrollContainer from '../../../InfiniteScrollContainer';

/**
 * Wrap onBlur/onChange to handle transforming the value
 * from internal format used by SelectWidget to raw value
 * expected.
 */
const wrapChangeCallback = callback => value => {
    if (!callback) {
        return null;
    }
    if (!value) {
        return callback(null);
    }
    if (Array.isArray(value)) {
        return callback(value.map(v => v.key));
    }
    return callback(value.key);
};

/**
 * Display values as a select dropdown. Uses infinite scroll to fetch more
 * records when pagination is used on the backend.
 *
 * Used as default `choicesWidget` for [RemoteChoicesWidget](/components/RemoteChoicesWidget/)
 */
export default function RemoteChoicesSelectWidget(props: ChoicesWidgetProps) {
    const {
        multiple,
        isFetching,
        items,
        value,
        onFetchMore,
        onChange,
        onBlur,
        clearSearch,
        ...rest
    } = props;
    const transformValue = val => {
        if (!val) {
            return val;
        }
        if (multiple) {
            return val.map(item => ({ key: item.id, label: item.label })).toArray();
        }
        return { key: val.id, label: val.label };
    };
    return (
        <InfiniteScrollContainer onReachBottom={onFetchMore}>
            <SelectWidget
                mode={multiple ? 'multiple' : null}
                labelInValue
                showSearch
                filterOption={false}
                notFoundContent={isFetching ? <Spin size="small" /> : <em>No results found</em>}
                value={transformValue(value)}
                onChange={wrapChangeCallback(onChange)}
                onBlur={wrapChangeCallback(onBlur)}
                onDropdownVisibleChange={open => !open && props.clearSearch()}
                {...rest}
            >
                {items.map(item => (
                    <SelectWidget.Option key={item.id} value={item.id}>
                        {item.label}
                    </SelectWidget.Option>
                ))}
            </SelectWidget>
        </InfiniteScrollContainer>
    );
}
