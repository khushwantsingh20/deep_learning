import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { Button, Modal } from 'antd';
import { Form } from 'redux-form';
import { $modelDefinition } from 'alliance-redux-api/lib/Model';
import { DjradContext } from '../../../site/components/context';
import ModelFormProcessor from '../../model/ModelFormProcessor';
import ModelLookupWidget from './ModelLookupWidget';
import ModelFetchSingle from '../../model/ModelFetchSingle';
import ButtonBar from '../../form/ButtonBar';
import FormButton, { FORM_ACTIONS } from '../../form/FormButton';

import './RelatedModelLookupWidget.less';

const UPDATE = 'UPDATE';
const ADD = 'ADD';

const ModalAddForm = ({ model, footer, onSuccess }) => (
    <ModelFormProcessor
        renderForm={formProps =>
            model._meta.componentFactory.buildCreateForm({
                ...formProps,
                wrapperComponent: Form,
                forceConnected: true,
                footer,
            })
        }
        model={model}
        formName={model._meta.modelId}
        onSuccess={onSuccess}
    />
);

const ModalUpdateForm = ({ model, footer, recordId, onSuccess }) => (
    <ModelFetchSingle model={model} id={recordId}>
        {({ record }) => (
            <ModelFormProcessor
                renderForm={formProps =>
                    model._meta.componentFactory.buildUpdateForm({
                        ...formProps,
                        wrapperComponent: Form,
                        forceConnected: true,
                        footer,
                    })
                }
                initialValues={record.toJS()}
                record={record}
                model={model}
                formName={model._meta.modelId}
                onSuccess={onSuccess}
            />
        )}
    </ModelFetchSingle>
);

class DefaultRenderButtons extends Component {
    state = {
        resolvingPermissions: true,
        actionPerms: {},
    };
    componentDidMount() {
        this.permissionCheckPromise = this.resolvePermissions();
        this.hasMounted = true;
    }

    componentWillUnmount() {
        this.hasMounted = false;
    }

    async resolvePermissions() {
        this.setState({ resolvingPermissions: true });
        const { toModel, recordId } = this.props;
        const permsToCheck = [];
        if (recordId && this.props.showUpdate) {
            const record = new toModel[$modelDefinition].partialRecordClass({
                [toModel._meta.pkFieldName]: recordId,
            });
            permsToCheck.push(
                record.hasActionPerm('update').then(hasPerm => (hasPerm ? 'update' : false))
            );
        }
        if (this.props.showAdd) {
            permsToCheck.push(
                toModel._meta.hasActionPerm('create').then(hasPerm => (hasPerm ? 'create' : false))
            );
        }
        const actionsWithPerm = (await Promise.all(permsToCheck)).filter(Boolean);
        if (this.hasMounted) {
            this.setState({
                resolvingPermissions: false,
                actionPerms: actionsWithPerm.reduce((acc, action) => {
                    acc[action] = true;
                    return acc;
                }, {}),
            });
        }
    }

    componentDidUpdate(prevProps) {
        if (
            this.props.recordId !== prevProps.recordId ||
            this.props.toModel !== prevProps.toModel ||
            this.props.showUpdate !== prevProps.showUpdate ||
            this.props.showAdd !== prevProps.showAdd
        ) {
            this.permissionCheckPromise = this.resolvePermissions();
        }
    }
    render() {
        const { onAdd, onUpdate, recordId } = this.props;
        const { resolvingPermissions, actionPerms } = this.state;
        if (resolvingPermissions || (!actionPerms.update && !actionPerms.create)) {
            return null;
        }
        return (
            <div className="djrad--related-model-lookup__default-buttons">
                {actionPerms.create && (
                    <Button
                        className="djrad--related-model-lookup__default-buttons-add"
                        type="primary"
                        size="small"
                        shape="circle"
                        icon="plus"
                        onClick={onAdd}
                    />
                )}
                {actionPerms.update && (
                    <Button
                        type="primary"
                        size="small"
                        shape="circle"
                        icon="edit"
                        disabled={!recordId}
                        onClick={onUpdate}
                    />
                )}
            </div>
        );
    }
}

// TODO: This component has a few issues
// - No control over rendering modal, no option to change wrapper
// - Uses ModelComponentFactory, no props to control form rendering

/**
 * Render a lookup widget for a related model with add and edit buttons.
 *
 * @acceptsProps ModelLookupWidget
 */
export default class RelatedModelLookupWidget extends React.PureComponent {
    static propTypes = {
        /**
         * Function used to render buttons if any are shown. The update button is shown
         * if `showUpdate` is true (the default) and `update` is a supported action for this
         * model. The add button is shown is `showAdd` is true (the default) and `create`
         * is a supported action for this model.
         */
        renderButtons: PropTypes.func,
        /**
         * Whether to show the add button. The model must also support the `create` action for
         * the button to be shown. Rendering is controlled by `renderButtons`.
         */
        showAdd: PropTypes.bool,
        /**
         * Whether to show the update button for the currently selected option. The model must
         * also support the `create` action for the button to be shown. Rendering is controlled
         * by `renderButtons`.
         */
        showUpdate: PropTypes.bool,
    };

    static defaultProps = {
        showAdd: true,
        showUpdate: true,
        renderButtons: props => <DefaultRenderButtons {...props} />,
    };

    static contextType = DjradContext;

    state = {
        showForm: null,
    };

    handleShowAdd = () => this.setState({ showForm: ADD });
    handleShowUpdate = () => this.setState({ showForm: UPDATE });

    handleSuccess = record => {
        if (this.props.multiple) {
            const value = this.props.value;
            if (value != null) {
                this.props.onChange([...value, record.getId()]);
            } else {
                this.props.onChange([record.getId()]);
            }
        } else {
            this.props.onChange(record.getId());
        }
        this.setState({ showForm: null });
    };

    handleCancel = () => this.setState({ showForm: null });

    render() {
        const {
            multiple,
            fromModel,
            fromFieldName,
            showAdd,
            showUpdate,
            renderButtons,
            style,
            ...rest
        } = this.props;
        delete rest.toModel;
        const toModel = this.context.djradSite.getModelClass(this.props.toModel);
        const { showForm } = this.state;
        const shouldShowAdd = toModel._meta.isValidAction('create') && showAdd;
        const shouldShowUpdate = toModel._meta.isValidAction('update') && showUpdate;
        const hasButtons = shouldShowAdd || shouldShowUpdate;
        const formFooter = (
            <ButtonBar
                leftButtons={<FormButton onClick={this.handleCancel}>Cancel</FormButton>}
                rightButtons={
                    <FormButton type="primary" action={FORM_ACTIONS.SAVE} htmlType="submit">
                        SAVE
                    </FormButton>
                }
            />
        );

        return (
            <div className="djrad--related-model-lookup__wrapper" style={style}>
                <ModelLookupWidget
                    labelFieldName="__str__"
                    multiple={multiple}
                    fromModel={fromModel}
                    fromFieldName={fromFieldName}
                    {...rest}
                />
                {hasButtons &&
                    renderButtons({
                        toModel,
                        showAdd: shouldShowAdd,
                        showUpdate: shouldShowUpdate,
                        onUpdate: this.handleShowUpdate,
                        onAdd: this.handleShowAdd,
                        recordId: rest.value,
                    })}
                {showForm && (
                    <Modal closable onCancel={this.handleCancel} footer={null} width="80vw" visible>
                        {showForm === ADD && (
                            <ModalAddForm
                                model={toModel}
                                footer={formFooter}
                                onSuccess={this.handleSuccess}
                            />
                        )}
                        {showForm === UPDATE && (
                            <ModalUpdateForm
                                model={toModel}
                                footer={formFooter}
                                onSuccess={this.handleSuccess}
                                recordId={rest.value}
                            />
                        )}
                    </Modal>
                )}
            </div>
        );
    }
}
