import React from 'react';
import { Select } from 'antd';

// TODO: https://gitlab.internal.alliancesoftware.com.au/alliance/djrad/issues/4
export default class SelectWidget extends React.Component {
    static selectWidgetInstanceCount = 0;

    state = {
        focused: false,
    };

    constructor(props) {
        super(props);
        this.dropdownClassName = `__select-widget-${SelectWidget.selectWidgetInstanceCount++}`;
    }

    handleScroll = e => this.props.onScroll(e);

    handleFocus = e => {
        if (this.props.onFocus) {
            this.props.onFocus(e);
        }
        this.setState({ focused: true });
    };

    handleBlur = e => {
        if (this.props.onBlur) {
            this.props.onBlur(e);
        }
        if (this.dropdownListUl) {
            this.dropdownListUl.removeEventListener('scroll', this.handleScroll);
            this.dropdownListUl = null;
        }
        this.setState({ focused: false });
    };

    pollForEl = (count = 0) => {
        if (count >= 10) {
            // eslint-disable-next-line
            console.warn(
                'Failed to find dropdown UL after 10 attempts. onScroll will not be called.'
            );
            return;
        }
        if (this.state.focused && !this.dropdownListUl) {
            this.dropdownListUl = document.querySelector(`.${this.dropdownClassName} ul`);
            if (this.dropdownListUl) {
                this.dropdownListUl.addEventListener('scroll', this.handleScroll);
            }
            requestAnimationFrame(() => this.pollForEl(count + 1));
        }
    };

    componentDidUpdate() {
        this.pollForEl();
    }

    render() {
        const { children, onScroll, dropdownClassName, ...rest } = this.props;
        const extraProps = {};
        if (onScroll) {
            extraProps.onFocus = this.handleFocus;
            extraProps.onBlur = this.handleBlur;
        }
        let finalDropdownClassName = this.dropdownClassName;
        if (dropdownClassName) {
            finalDropdownClassName += ` ${dropdownClassName}`;
        }
        return (
            <Select dropdownClassName={finalDropdownClassName} {...rest} {...extraProps}>
                {children}
            </Select>
        );
    }
}

SelectWidget.Option = Select.Option;
SelectWidget.OptGroup = Select.OptGroup;
