import * as React from 'react';
import PropTypes from 'prop-types';
import { DatePicker } from 'antd';
import moment from 'moment';

import { fieldShape, fieldInputShape, fieldMetaShape } from '../../../prop-types/form';
import { DjradContext } from '../../../site/components/context';

const { RangePicker } = DatePicker;

function convertValue(value) {
    if (!value) {
        return null;
    }
    if (!moment.isMoment(value)) {
        return moment(value);
    }
    return value;
}

/**
 * @see [RangePicker](https://ant.design/components/date-picker/#RangePicker) for other props accepted
 */
export default class DateRangeWidget extends React.Component {
    static contextType = DjradContext;

    static propTypes = {
        /** Lower bound field. Typically comes from redux-form, see https://redux-form.com/7.3.0/docs/api/field.md/#props */
        lower: fieldShape.isRequired,
        /** Upper bound field. Typically comes from redux-form, see https://redux-form.com/7.3.0/docs/api/field.md/#props */
        upper: fieldShape.isRequired,
        /** Combined upper / lower bound field. */
        combined: PropTypes.shape({
            lower: fieldShape.isRequired,
            upper: fieldShape.isRequired,
            input: fieldInputShape.isRequired,
            meta: fieldMetaShape.isRequired,
        }),
        /** True if show allow selection of time */
        showTime: PropTypes.bool,
        /** Date format to use */
        format: PropTypes.string,
    };

    render() {
        const { settings } = this.context;
        const {
            combined,
            upper,
            lower,
            showTime = false,
            format = settings[`${showTime ? 'dateTime' : 'date'}Format`],
            ...rest
        } = this.props;
        function onChange(value) {
            combined.input.onChange({
                lower: value[0],
                upper: value[1],
            });
        }
        return (
            <RangePicker
                format={format}
                showTime={showTime}
                value={[lower.input.value, upper.input.value].map(convertValue)}
                onChange={onChange}
                onFocus={combined.input.onFocus}
                {...rest}
            />
        );
    }
}
