// @flow
import React from 'react';
import { Upload } from 'antd';
import type { WidgetProps } from '../FormField';

type Props = WidgetProps & {
    /** Current value. For existing uploads will be a string representing the filename, for new uploads a [File](https://developer.mozilla.org/en-US/docs/Web/API/File/File) instance. */
    value?: string | File,
};

// TODO: Rework this, expose more of interface from antd upload

/**
 * @see [Upload](https://ant.design/components/upload/) for other props accepted
 */
export default class FileUploadWidget extends React.Component<Props> {
    beforeUpload = (file: File) => {
        this.props.onChange(file);
        return false;
    };

    render() {
        const handleRemove = () => {
            // TODO: This won't work if backend has blank=True, null=False. Not sure what's best here?
            this.props.onChange(null);
        };
        const fileList = [];
        const { value } = this.props;
        if (value) {
            if (typeof this.props.value == 'string') {
                // TODO: Not sure about this stuff, probably need to be able
                // to serialize file better from backend to include relevant
                // data
                const parts = this.props.value.split('/');
                fileList.push({
                    uid: -1,
                    name: parts.length > 0 ? parts[parts.length - 1] : value,
                    status: 'done',
                    url: value,
                    thumbUrl: value,
                });
            } else {
                fileList.push(value);
            }
        }
        return (
            <Upload
                multiple={false}
                beforeUpload={this.beforeUpload}
                onRemove={handleRemove}
                fileList={fileList}
            >
                {this.props.children || 'Click to upload'}
            </Upload>
        );
    }
}
