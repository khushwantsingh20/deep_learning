/* eslint-disable */
// TODO: This file to be refactored
import * as React from 'react';
import { connect } from 'react-redux';
import { change, formValueSelector } from 'redux-form';
import { withRouter } from 'react-router';
import type { Location, Match, RouterHistory } from 'react-router-dom';

type Props = {
    formName: string,
    /** @ignore */
    match: Match,
    /** @ignore */
    location: Location,
    /** @ignore */
    history: RouterHistory,
};

type CombinedProps = Props & {
    /** @ignore */
    formFieldChange: (formName: string, fieldName: string, value: any) => void,
};

/**
 * Reads initial values from current history state. This allows you to easily link to a form
 * (eg. using [Link](https://reacttraining.com/react-router/web/api/Link/to-object)) and set
 * some values on the form automatically.
 *
 * The expected state structure is:
 *
 * {
 *     initialValues: {
 *         formName: {
 *             fieldName1: value1,
 *             fieldName2: value2,
 *         },
 *     },
 * }
 *
 * This component will read the values from state and pass them through to the child:
 *
 * @example
 * ```js
 * <FormInitialValuesHistoryProvider name="myForm">
 *     {(initialValues) => <MyForm name="myForm" initialValues={...initialValues} />}
 * </FormInitialValuesHistoryProvider>
 * ```
 **/
class FormInitialValuesHistoryProvider extends React.Component<CombinedProps> {
    /**
     * Get initial values from history state. This is used by
     * ModelRelatedAddEditModal to pass back details when
     * a related record is created
     */
    getInitialValues = () => {
        const { formName, location } = this.props;
        const { state = { initialValues: {} } } = location;
        return (state.initialValues || {})[formName];
    };

    componentDidMount() {
        this.clearInitialValues();
    }

    clearInitialValues() {
        if (this.getInitialValues()) {
            // Clear out any initial values in history state after used
            const { history, formName, location } = this.props;
            const { state = { initialValues: {} } } = location;
            const initialValues = { ...(state.initialValues || {}) };
            delete initialValues[formName];
            history.replace({ state: { initialValues } });
        }
    }

    componentDidUpdate() {
        this.clearInitialValues();
        // Handle initialValues being passed after we have initialised... in this case
        // we simply set the fields on the form directly.
        const initialValues = this.getInitialValues();
        if (initialValues) {
            const { formFieldChange, formName, reduxState } = this.props;
            const selector = formValueSelector(formName);
            Object.keys(initialValues).forEach(fieldName => {
                const currentValue = selector(reduxState, fieldName);
                let value = initialValues[fieldName];
                if (Array.isArray(currentValue)) {
                    if (!Array.isArray(value)) {
                        value = [value];
                    }
                    value = [...currentValue, ...value];
                }
                // This is probably a bad idea... but!
                // Mutate initialValues in place with our transformed value.
                // This allows changing of initial values via history.push from
                // places that have no knowledge of what our current form looks like.
                // We want to retain current values for fields that accept multiple
                // values... this is the easiest way to achieve that.
                // TODO: ^ This was for previous implementation of related model
                // add / update which it used the URL to show modal... we don't do
                // this anymore. Should we still support this?
                initialValues[fieldName] = value;
                formFieldChange(formName, fieldName, value);
            });
        }
    }

    render() {
        return this.props.children(this.getInitialValues());
    }
}

const EnhancedFormInitialValuesHistoryProvider: React.ComponentType<Props> = withRouter(
    connect(
        state => ({ reduxState: state }),
        { formFieldChange: change }
    )(FormInitialValuesHistoryProvider)
);
export default EnhancedFormInitialValuesHistoryProvider;
