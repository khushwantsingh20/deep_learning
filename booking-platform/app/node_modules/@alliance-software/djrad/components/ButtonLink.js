// @flow
import React from 'react';
import { Button } from 'antd';
import { createLocation } from 'history';
import { withRouter } from 'react-router';
import type { LocationShape, Location, Match, RouterHistory } from 'react-router-dom';

type Props = {
    /** @ignore */
    location: Location,
    /** @ignore */
    match: Match,
    /** @ignore */
    history: RouterHistory,
    /** @ignore */
    onClick?: (e: Event) => void,
    /**
     * The pathname or location to link to.
     * @see [Link](https://reacttraining.com/react-router/web/api/Link).
     */
    to: string | LocationShape,
    /** When true, clicking the link will replace the current entry in the history stack instead of adding a new one. */
    replace?: boolean,
    /** Target as per [a.target](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target) */
    target?: string,
};

function isModifiedEvent(event) {
    return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}

/**
 * Like react-router Link except render using antd `Button`. DOM element is an `a`.
 *
 * Accepts same props as [Button](https://ant.design/components/button)
 */
function ButtonLink({
    history,
    match,
    location,
    to,
    replace,
    staticContext,
    onClick,
    ...rest
}: Props) {
    const handleClick = event => {
        if (onClick) {
            onClick(event);
        }
        if (
            // This logic copied from react-router Link
            // https://github.com/ReactTraining/react-router/blob/master/packages/react-router-dom/modules/Link.js#L24
            !event.defaultPrevented && // onClick prevented default
            event.button === 0 && // ignore everything but left clicks
            !rest.target && // let browser handle "target=_blank" etc.
            !isModifiedEvent(event) // ignore clicks with modifier keys
        ) {
            event.preventDefault();
            if (replace) {
                history.replace(to);
            } else {
                history.push(to);
            }
        }
    };
    const toLocation = typeof to === 'string' ? createLocation(to, null, null, location) : to;
    const href = toLocation ? history.createHref(toLocation) : '';
    return (
        <Button
            {...rest}
            // This makes antd render as a `a` instead of `button`
            href={href}
            onClick={handleClick}
        />
    );
}

export default withRouter(ButtonLink);
