// @flow
import * as React from 'react';
import type { RouterHistory, Location } from 'react-router-dom';
import LastLocation from './LastLocation';

export type WithLocationProps = {
    lastLocation: ?Location,
    lastLocationDistinct: ?Location,
    history: RouterHistory,
};

function getDisplayName(WrappedComponent) {
    return WrappedComponent.displayName || WrappedComponent.name || 'Component';
}

/**
 * Higher order component to pass through last location props. Component will receive three
 * props - `history`, `lastLocation` and `lastLocationDistinct`.
 *
 * @example
 *
 * ```jslive { "fakeBrowser": true }
 * function MyComponent({ lastLocation }) {
 *     let el;
 *     if (!lastLocation) {
 *         el = <em>No last location</em>;
 *     } else {
 *         el = <div><strong>Last Location:</strong> {lastLocation.pathname}</div>
 *     }
 *     return (
 *       <React.Fragment>
 *         {el}
 *        <ul>
 *          <li><Link to="/link1/">Link 1</Link></li>
 *          <li><Link to="/link2/">Link 2</Link></li>
 *          <li><Link to="/link3/">Link 3</Link></li>
 *        </ul>
 *        </React.Fragment>
 *     );
 * }
 *
 * const EnhancedMyComponent = withLastLocation(MyComponent);
 * <EnhancedMyComponent />
 * ```
 *
 * @hoc
 */
export default function withLastLocation<Props: {}>(
    Component: React.ComponentType<WithLocationProps & Props>
): React.ComponentType<Props> {
    function WithLastLocation(props) {
        return (
            <LastLocation>
                {lastLocationValues => <Component {...props} {...lastLocationValues} />}
            </LastLocation>
        );
    }
    WithLastLocation.displayName = `WithLastLocation(${getDisplayName(Component)})`;
    return WithLastLocation;
}
