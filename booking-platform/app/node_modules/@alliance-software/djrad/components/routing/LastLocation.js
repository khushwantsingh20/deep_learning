// @flow
import * as React from 'react';
import PropTypes from 'prop-types';
import type { RouterHistory, Location } from 'react-router-dom';

const { Provider, Consumer: LastLocation } = React.createContext({});

type ProviderProps = {
    history: RouterHistory,
    children: React.Node,
};

type ProviderState = {
    lastLocation: ?Location,
    lastLocationDistinct: ?Location,
    currentLocation: Location,
};

/**
 * Provider that tracks last location. Tracks both the last location and the distinct last location - that
 * is the last location that has a different pathname to the current location. For example if you were on
 * /abc/ and ran `history.push('/abc/123/')` then lastLocation and lastLocationDistinct would both point to
 * /abc/. If you then ran `history.push('/abc/123/')` again lastLocation would be `/abc/123/` but lastLocationDistinct
 * would be `/abc/`.
 *
 * **NOTE:** Djrad includes this by default as part of DjradProvider - you
 * don't need to explicitly use the LastLocationProvider
 */
export class LastLocationProvider extends React.Component<ProviderProps, ProviderState> {
    static propTypes = {
        history: PropTypes.object.isRequired,
        children: PropTypes.node.isRequired,
    };
    constructor(props: ProviderProps) {
        super(props);
        this.state = {
            lastLocationDistinct: null,
            lastLocation: null,
            currentLocation: props.history.location,
        };
    }
    unsubscribe: ?() => void;
    componentDidMount() {
        this.unsubscribe = this.props.history.listen(location => {
            const { currentLocation, lastLocationDistinct } = this.state;
            const nextState: Object = {
                lastLocation: { ...currentLocation },
                currentLocation: location,
            };
            if (!lastLocationDistinct || location.pathname !== currentLocation.pathname) {
                nextState.lastLocationDistinct = nextState.lastLocation;
            }
            this.setState(nextState);
        });
    }
    componentWillUnmount() {
        if (this.unsubscribe) {
            this.unsubscribe();
        }
    }
    render() {
        const { lastLocationDistinct, lastLocation } = this.state;
        const { history } = this.props;
        return (
            <Provider value={{ lastLocation, lastLocationDistinct, history }}>
                {this.props.children}
            </Provider>
        );
    }
}

/**
 * LastLocation consumer. Example usage:
 *
 * ```js
 * <LastLocation>
 *     {({ lastLocation }) => {
 *         if (lastLocation) {
 *             return `Last location is ${lastLocation.pathname}`;
 *         }
 *         return `No last location`;
 *     }
 * </LastLocation>
 * ```
 *
 * Also available as a HOC:
 *
 * ```js
 * import withLastLocation from '@alliance-software/djrad/components/routing/withLastLocation';
 *
 * function MyComponent({ lastLocation, lastLocationDistinct }) {
 *     return ...
 * }
 * export default withLastLocation(MyComponent);
 * ```
 */
export default LastLocation;
