import React from 'react';
import Immutable from 'immutable';
import { connect } from 'react-redux';
import debounce from 'lodash/debounce';
import injectSite from '../../site/injectSite';

import './Placeholder.less';

class Placeholder extends React.Component {
    state = {
        isLoading: true,
    };

    checkLoading = debounce(() => {
        if (this.loading.size === 0) {
            this.setState({ isLoading: false });
        }
    }, 10);

    loading = [];
    componentDidUpdate(prevProps) {
        if (this.state.isLoading === false) {
            return;
        }
        this.loading = this.props.loading
            .map((value, key) => {
                if (value && value !== prevProps.loading.get(key)) {
                    return key;
                }
                return null;
            })
            .filter(Boolean)
            .toList();
        if (this.loading.size === 0) {
            this.checkLoading();
        }
    }

    render() {
        const { children, placeholder } = this.props;
        return (
            <React.Fragment>
                <div
                    className={
                        this.state.isLoading
                            ? 'djrad--placeholder__wrapper-loading'
                            : 'djrad--placeholder__wrapper'
                    }
                >
                    {children}
                </div>
                {this.state.isLoading && placeholder}
            </React.Fragment>
        );
    }
}

function mapStateToProps(state, props) {
    const loading = [...props.djradSite.models.values()].map(model => [
        model._meta.modelId,
        model.selectors.loading(state).isFetching,
    ]);
    return {
        loading: Immutable.Map(loading),
    };
}

export default injectSite(connect(mapStateToProps)(Placeholder));
