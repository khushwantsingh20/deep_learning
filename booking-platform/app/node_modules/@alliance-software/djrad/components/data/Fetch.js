// @flow
import * as React from 'react';
import PropTypes from 'prop-types';
import isEqual from 'lodash/isEqual';

import { ApiError } from '../../api';
import injectSite from '../../site/injectSite';
import type { InjectSiteProps } from '../../site/injectSite';

type Props = {
    endpoint: string,
    children: ({ response: ?{}, isFetching: boolean, error: ?Error | ApiError }) => React.Node,
    queryParams?: ?{},
};

const propTypes = {
    endpoint: PropTypes.string.isRequired,
    children: PropTypes.func.isRequired,
    queryParams: PropTypes.object,
};

type CombinedProps = Props & InjectSiteProps;

type State = {
    response: ?{},
    isFetching: boolean,
    error: ?ApiError | Error,
};

class Fetch extends React.Component<CombinedProps, State> {
    static propTypes = propTypes;
    hasMounted: boolean = false;

    // Used in test cases
    fetchPromise = null;

    state = {
        response: null,
        isFetching: true,
        error: null,
    };

    componentDidMount() {
        this.hasMounted = true;
        this.fetch();
    }

    componentWillUnmount() {
        this.hasMounted = false;
    }

    componentDidUpdate(prevProps: CombinedProps) {
        if (
            prevProps.djradSite !== this.props.djradSite ||
            prevProps.endpoint !== this.props.endpoint ||
            !isEqual(prevProps.queryParams, this.props.queryParams)
        ) {
            this.fetch();
        }
    }

    fetch() {
        this.setState({ isFetching: true });
        const { endpoint, djradSite, queryParams = null } = this.props;
        this.fetchPromise = djradSite.api.get(endpoint, queryParams).then(
            ({ payload, error }) => {
                if (!this.hasMounted) {
                    return;
                }
                if (error) {
                    this.setState({ isFetching: false, error: payload });
                } else {
                    this.setState({ response: payload, isFetching: false });
                }
            },
            (error: ApiError | Error) => {
                if (this.hasMounted) {
                    this.setState({ isFetching: false, error });
                }
            }
        );
    }

    render() {
        const { response, error, isFetching } = this.state;
        const { children } = this.props;
        return children({ response, isFetching, error });
    }
}

// Exporting injectSite() directly doesn't seem to work when you go to use it - complains
// about not passing in the injected props. Adding explicit annotation here fixes it.
const EnhancedFetch: React.ComponentType<Props> = injectSite(Fetch);

export default EnhancedFetch;
