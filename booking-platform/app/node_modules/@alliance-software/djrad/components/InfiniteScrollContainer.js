// @flow
import * as React from 'react';

type Props = {
    /** Number between 0 and 1. onReachBottom callback called when
        this ratio has been reached (eg. 0.8 would trigger callback
        when scrolled 80% way down) */
    threshold: number,
    onReachBottom: (scrollProgress: number) => void,
    children: React.Node,
};

export default class InfiniteScrollContainer extends React.PureComponent<Props> {
    static defaultProps = {
        threshold: 0.8,
    };

    handleScroll = ({ target }: Event) => {
        if (target instanceof HTMLElement) {
            const { offsetHeight, scrollHeight, scrollTop } = target;
            const scrollProgress = scrollTop / (scrollHeight - offsetHeight);
            if (scrollProgress > this.props.threshold) {
                this.props.onReachBottom(scrollProgress);
            }
        } else {
            // This should never actually happen in practice - the above check is just
            // to make flow happy (needs refined type on EventTarget)
            console.warn('Scroll event fired on something that was HTMLElement, this is not valid'); // eslint-disable-line
        }
    };

    render() {
        return React.cloneElement(React.Children.only(this.props.children), {
            onScroll: this.handleScroll,
        });
    }
}
