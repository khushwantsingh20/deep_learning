import React from 'react';
import { List } from 'antd';
import ModelFetchList from '../model/ModelFetchList';
import ActionLink from '../model/ActionLink';

export default function ManyRelatedFormatter({ record, fieldName, value }) {
    const { relation, reverseRelation } = record._meta.fields[fieldName];
    const targetModel = relation ? relation.model : reverseRelation.model;
    const renderList = ({
        isLoading,
        pageSize,
        records,
        currentPage,
        totalPages,
        gotoPage,
        count,
    }) => {
        const handlePaginationChange = (page, newSize) => gotoPage(page, newSize);
        return (
            <List
                dataSource={Array.isArray(records) ? records : records.toArray()}
                loading={isLoading}
                pagination={
                    totalPages > 1 && {
                        pageSize,
                        current: currentPage,
                        total: count,
                        onChange: handlePaginationChange,
                    }
                }
                renderItem={item => (
                    <List.Item>
                        {targetModel && targetModel._meta.isValidAction('detail') ? (
                            <ActionLink record={item} action="detail">
                                {item.__str__}
                            </ActionLink>
                        ) : (
                            item.__str__
                        )}
                    </List.Item>
                )}
            />
        );
    };
    if (!value || value.size === 0) {
        return renderList({ records: [], totalPages: 0, count: 0 });
    }
    const isListOfIds = typeof value.first() !== 'object';
    if (!isListOfIds) {
        return renderList({ records: value, count: value.length, totalPages: 1 });
    }
    if (targetModel) {
        return (
            <ModelFetchList
                model={targetModel}
                baseFilter={{ pk: value.toArray() }}
                defaultPageSize={5}
            >
                {renderList}
            </ModelFetchList>
        );
    }
    return value;
}
