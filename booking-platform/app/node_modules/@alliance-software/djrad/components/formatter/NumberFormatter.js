// @flow
import * as React from 'react';
import type { FormatterProps } from './types';

type Props = FormatterProps & {
    value?: number,
    /** See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString */
    locales?: string | Array<string>,
    /** See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString for available options */
    localeOptions?: {
        localeMatcher?: string,
        style?: string,
        currency?: string,
        currencyDisplay?: string,
        useGrouping?: boolean,
        minimumIntegerDigits?: number,
        minimumFractionDigits?: number,
        maximumFractionDigits?: number,
        minimumSignificantDigits?: number,
        maximumSignificantDigits?: number,
    },
};

export default class NumberFormatter extends React.Component<Props> {
    render() {
        const { value, locales = [], localeOptions } = this.props;
        if (value == null) {
            return value;
        }
        let finalValue = value;
        if (typeof value != 'number') {
            finalValue = Number(value);
        }
        if (Number.isNaN(finalValue)) {
            // TODO: What should we do here for display purposes?
            return 'Invalid number';
        }
        return finalValue.toLocaleString(locales, localeOptions);
    }
}
