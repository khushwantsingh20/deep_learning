// @flow
import * as React from 'react';

import Field from '../../model/fields/Field';
import type { Model } from '../../model/Model';

const { useContext, useMemo } = React;

type GetFormatterForField = (
    field: Field,
    record: Model,
    value: any,
    otherProps: ?{},
    parentGetFormatterForField: ?GetFormatterForField
) => React.Node;

type Props = {
    children: React.Node,
    /**
     * Function to return formatter for a field
     * @default field.getDefaultFormatter
     */
    getFormatterForField?: GetFormatterForField,
};

function defaultGetFormatterForField(
    field: Field,
    record: Model,
    value: any,
    otherProps: ?{} = {},
    parentGetFormatterForField: ?GetFormatterForField
) {
    const props = { record, value, fieldName: field.name, ...otherProps };
    let el;
    if (parentGetFormatterForField) {
        el = parentGetFormatterForField(field, record, value, otherProps);
    } else {
        el = field.getDefaultFormatter(props);
    }
    if (el) {
        /*
        TODO: I think this is not necessary - why would it be? We pass props above already.
        if (React.isValidElement(el)) {
            // $FlowFixMe Not smart enough to know isValidElement guarantees el is valid element to clone.
            return React.cloneElement(el, props);
        }
        */
        return el;
    }
    return value;
}

export const FieldFormatterContext = React.createContext({});

/**
 * Provide function to choose which field formatter component to use for
 * all usages of [FieldFormatter](/components/FieldFormatter/) that occur
 * within this component.
 *
 * Useful for overriding formatting for certain section of the sites,
 * particularly when you don't control all the content or it's cumbersome
 * to override.
 *
 * Defaults to using the underlying model `Field.getDefaultFormatter`.
 */
export default function FieldFormatterProvider({
    children,
    getFormatterForField = defaultGetFormatterForField,
}: Props) {
    const parentContext = useContext(FieldFormatterContext);
    const providedContext = useMemo(
        () => ({
            getFormatterForField: (field: Field, record: Model, value: any, otherProps: {} = {}) =>
                getFormatterForField(
                    field,
                    record,
                    value,
                    otherProps,
                    parentContext.getFormatterForField
                ),
        }),
        [getFormatterForField, parentContext.getFormatterForField]
    );
    return (
        <FieldFormatterContext.Provider value={providedContext}>
            {children}
        </FieldFormatterContext.Provider>
    );
}
