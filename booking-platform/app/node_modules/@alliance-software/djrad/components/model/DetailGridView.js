// @flow
import * as React from 'react';
import stripIndent from 'common-tags/lib/stripIndent';

import ActionLink from './ActionLink';
import ButtonLink from '../ButtonLink';
import DelimitedList from '../DelimitedList';

import FieldFormatter from './FieldFormatter';
import type { Model } from '../../model/Model';

import './DetailGridView.less';

type GridField = {
    key: string,
    label: string,
    render: (record: Model) => React.Node,
};

export type Props = {
    record: Model,
    /** Specify true to autogenerate footer from available actions */
    footer?: true | React.Node,
    /** Any additional elements to be added to the autogenerated footer (if enabled) */
    footerExtra?: Array<React.Node>,
    /** If not specified all fields will be displayed. Can be either a field name or a `Field` object which can be used to render custom content. */
    fields?: $ReadOnlyArray<string | GridField>, // see https://github.com/facebook/flow/issues/3502
    valueDecorator?: (value: React.Node, field: GridField, record: Model) => React.Node,
};

function Cell(props) {
    const { label, children } = props;
    return (
        <div className="djrad--detail-grid-view--field">
            <p className="djrad--detail-grid-view--field-heading">{label}</p>
            <div className="djrad--detail-grid-view--field-body">{children}</div>
        </div>
    );
}

const defaultDecorator = (value, field: GridField, record: Model) => value; // eslint-disable-line

export default function DetailGridView(props: Props) {
    const {
        record,
        valueDecorator = defaultDecorator,
        fields = record._meta.crud.detailFields,
        footerExtra = [],
    } = props;
    let footer = props.footer;
    if (footer === true) {
        let footerElements: Array<React.Node> = [];
        if (record._meta.isValidAction('update')) {
            footerElements.push(
                <ActionLink key="action" action="update" record={record} linkComponent={ButtonLink}>
                    Edit
                </ActionLink>
            );
        }
        if (record._meta.isValidAction('delete')) {
            footerElements.push(
                <ActionLink
                    key="delete"
                    action="delete"
                    type="danger"
                    record={record}
                    linkComponent={ButtonLink}
                >
                    Delete
                </ActionLink>
            );
        }

        footerElements = [...footerElements, ...footerExtra];

        if (footerElements.length > 0) {
            footer = (
                <footer className="djrad--detail-grid-view--footer">
                    <DelimitedList>{footerElements}</DelimitedList>
                </footer>
            );
        }
    }
    const invalidFieldNames = [];
    const finalFields: Array<GridField> = fields.map(fieldOrFieldName => {
        if (typeof fieldOrFieldName == 'string') {
            const fieldName = fieldOrFieldName;
            const field = record._meta.fields[fieldName];
            if (!field) {
                invalidFieldNames.push(fieldName);
            }
            return {
                key: field.name,
                label: field.label,
                render() {
                    return (
                        <FieldFormatter
                            field={field}
                            record={record}
                            value={record.get(field.name)}
                        />
                    );
                },
            };
        }
        return fieldOrFieldName;
    });
    if (invalidFieldNames.length > 0) {
        throw new Error(
            stripIndent`Invalid field names specified for record of type ${record._meta.modelId}

            ${invalidFieldNames.join(',')}

            Know fields are:

            ${record._meta.fieldNames.join(',')}
            `
        );
    }
    return (
        <React.Fragment>
            <div className="djrad--detail-grid-view--fields">
                {finalFields.map(field => (
                    <React.Fragment key={field.key}>
                        <Cell label={field.label}>
                            {valueDecorator(field.render(record), field, record)}
                        </Cell>
                    </React.Fragment>
                ))}
            </div>
            {footer}
        </React.Fragment>
    );
}

DetailGridView.defaultProps = {
    footer: true,
};

DetailGridView.Cell = Cell;
