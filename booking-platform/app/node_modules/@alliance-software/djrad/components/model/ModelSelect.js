import React from 'react';
import { fetchEntities } from 'alliance-redux-api';
import { connect } from 'react-redux';

import injectSite from '../../site/injectSite';

class ModelSelect extends React.Component {
    static defaultProps = {
        selector: (selectors, state) => selectors.all(state),
    };

    hasMounted = false;

    // For use in test cases
    fetchPromise = null;

    state = {
        isFetching: false,
    };

    componentDidMount() {
        if (this.props.fetchData) {
            this.refetch();
        }
        this.hasMounted = true;
    }

    componentWillUnmount() {
        this.hasMounted = false;
    }

    refetch = async () => {
        const { model } = this.props;
        const actions = {
            fetchEntities: this.props.fetchEntities,
        };
        this.setState({ isFetching: true });
        this.fetchPromise = this.props.fetchData(model, actions);
        await this.fetchPromise;
        if (this.hasMounted) {
            this.setState({ isFetching: false });
        }
    };

    render() {
        const { records, model } = this.props;
        const { isFetching } = this.state;
        return this.props.children({ isFetching, model, records });
    }
}

function mapStateToProps(state, props) {
    let { model } = props;
    if (typeof model == 'string') {
        model = props.djradSite.models.get(model);
    }

    const { selector } = props;

    return {
        records: selector(model.selectors, state),
        model,
    };
}

export default injectSite(
    connect(
        mapStateToProps,
        { fetchEntities }
    )(ModelSelect)
);
