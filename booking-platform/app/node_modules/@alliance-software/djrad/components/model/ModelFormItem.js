import React, { useContext, memo } from 'react';
import PropTypes from 'prop-types';
import { mutuallyExclusiveProps } from 'airbnb-prop-types';

import FormContext from '../form/formContext';
import FormItem from '../form/FormItem';
import ModelFormContext from './modelFormContext';
import ModelFormField from './ModelFormField';
import componentPropType from '../../prop-types/component';

/**
 * For convenience this can also be accessed from [ModelForm](/components/ModelForm/)
 * directly on `ModelForm.Item`.
 *
 * ModelFormItem wraps [FormItem](/components/FormItem/) but injects
 * some default props based on the specified field and renders a
 * `ModelFormField` as it's default children.
 *
 * If you wish to further customise rendering you can pass `children`
 * directly instead:
 *
 * ```
 * <ModelFormItem name="firstName">
 *   <MyCustomComponent />
 *   // You don't have to render a ModelFormField but most of the time you will
 *   <ModelFormField name="firstName" />
 * </ModelFormItem>
 * ```
 *
 * If you pass `name` then it will set the default `label` and `help`
 * props passed to `ModelFormField` based on the field definition. You
 * can override these defaults:
 *
 * ```
 * <ModelFormItem name="firstName" label="First Name" />
 * ```
 *
 * It's common to use the default provided but only customise the field widget:
 *
 * ```
 * <ModelFormItem name="isActive" widget={SwitchWidget} />
 * ```
 *
 * If there's extra props you want to pass down to the default widget you can do that too:
 *
 * ```
 * <ModelFormItem name="isActive" fieldProps={{ 'data-testid': 'test' }} />
 * ```
 *
 * @acceptsProps FormItem
 */
const ModelFormItem = memo(function ModelFormItem(props) {
    const { name, children, widget, fieldProps, ...rest } = props;
    let { required } = props;
    const extraProps = {};
    const { getFieldDefinition } = useContext(ModelFormContext);
    const { getFormPath } = useContext(FormContext);
    if (name) {
        const field = getFieldDefinition(name);
        extraProps.help = field.helpText;
        extraProps.label = field.label;
        extraProps.htmlFor = getFormPath(name);
        if (required == null && field.required) {
            required = field.required;
        }
    }

    let finalWidget = widget;
    // Allow widget to alternatively be passed through in fieldProps
    if (!finalWidget && fieldProps && fieldProps.widget) {
        finalWidget = fieldProps.widget;
    }
    return (
        <FormItem {...extraProps} {...rest} required={required}>
            {children || <ModelFormField {...fieldProps} name={name} widget={finalWidget} />}
        </FormItem>
    );
});

ModelFormItem.propTypes = {
    /**
     * Name of the model field to render. The model the field is on is determined by the ModelForm
     * this ModelFormItem appears within.
     */
    name: PropTypes.string,
    /**
     * Children to render. If you do not pass this a `ModelFormField` will be rendered instead
     * and passed `name`, `widget` and all values in `fieldProps`, ie.
     * ```
     * <ModelFormField
     *   {...fieldProps}
     *   name={name}
     *   widget={widget}
     * />
     * ```
     */
    children: (props, propName, componentName) => {
        if (!props.children && !props.name) {
            throw new Error(
                `If prop 'name' is not supplied you must pass 'children' to ${componentName}`
            );
        }
    },
    /**
     * Widget to use in underlying `ModelFormField`. Only applicable if explicit `children` are not
     * provided.
     */
    widget: mutuallyExclusiveProps(
        PropTypes.oneOfType([PropTypes.node, componentPropType]),
        'widget',
        'children'
    ),
    /**
     * When `children` isn't specified these props are passed directly down to the automatically
     * created `ModelFormField`. Note that `widget` can be specified directly on `ModelFormItem`
     * or in this object.
     *
     * @see /components/ModelFormfield/
     */
    fieldProps: mutuallyExclusiveProps(PropTypes.object, 'fieldProps', 'children'),
    /** If not provided defaults to the model field label */
    label: PropTypes.node,
    /** If not provided defaults to the model field help_text */
    help: PropTypes.node,
};

export default ModelFormItem;
