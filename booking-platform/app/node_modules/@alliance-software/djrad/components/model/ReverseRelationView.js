import * as React from 'react';
import { message, Button, Modal } from 'antd';
import { Switch, Route, withRouter } from 'react-router';
import injectSite from '../../site/injectSite';
import ButtonBar from '../form/ButtonBar';
import { appendToUrl } from '../../util/url';

import ReverseRelationFormProcessor from './ReverseRelationFormProcessor';

class ReverseRelationView extends React.Component {
    static defaultProps = {
        successMessage: 'Record saved',
        urlPrefix: '',
    };

    state = {
        isDeleting: false,
    };

    appendToUrl = (...params) =>
        appendToUrl(
            this.props.match.url,
            [this.props.urlPrefix, this.props.relationFieldName, ...params].filter(f => !!f)
        );

    handleEdit = item => {
        this.props.history.push(this.appendToUrl(item.id));
    };

    handleAdd = () => this.props.history.push(this.appendToUrl('create'));

    handleCancel = () => this.props.history.push(appendToUrl(this.props.match.url, ''));

    handleSuccess = () => {
        message.success(this.props.successMessage);
        this.props.history.push(appendToUrl(this.props.match.url, ''));
    };

    renderModal = (fromRecord = null) => (
        <Modal closable onCancel={this.handleCancel} footer={null} width="80vw" visible>
            <ReverseRelationFormProcessor
                renderForm={this.props.renderForm}
                fromRecord={fromRecord}
                relationFieldName={this.props.relationFieldName}
                toRecord={this.props.toRecord}
                onSuccess={this.handleSuccess}
                footer={
                    <ButtonBar
                        leftButtons={<Button onClick={this.handleCancel}>Cancel</Button>}
                        rightButtons={
                            <Button type="primary" htmlType="submit">
                                SAVE
                            </Button>
                        }
                    />
                }
            />
        </Modal>
    );

    renderUpdateModal = id => {
        const { toRecord, relationFieldName } = this.props;
        const records = toRecord.get(relationFieldName);
        const match = records.filter(r => r.id.toString() === id).first();
        if (!match) {
            return (
                <Modal closable onCancel={this.handleCancel} width="80vw" visible>
                    <p>That record could not be found.</p>
                </Modal>
            );
        }
        return this.renderModal(match);
    };

    handleDelete = item => {
        this.setState({ isDeleting: true });
        const { djradSite, toRecord, relationFieldName } = this.props;
        return djradSite.api
            .customDetailRoute('patch', toRecord, toRecord.getId(), relationFieldName, {
                delete: true,
                relationpk: item.id,
            })
            .then(
                async () => {
                    // Refetch data so removed item is no longer available on the main record
                    await djradSite.api.getModel(toRecord, toRecord.getId());
                    message.success('Record deleted');
                    this.setState({ isDeleting: false });
                },
                () => {
                    message.error('There was a problem deleting this item, please try again.');
                    this.setState({ isDeleting: false });
                }
            );
    };

    render() {
        const { renderList, toRecord, relationFieldName } = this.props;
        return (
            <React.Fragment>
                {renderList({
                    dataSource: toRecord.get(relationFieldName),
                    onAdd: this.handleAdd,
                    onEdit: this.handleEdit,
                    onDelete: this.handleDelete,
                    isDeleting: this.state.isDeleting,
                })}
                <Switch>
                    <Route path={this.appendToUrl('create')} render={() => this.renderModal()} />
                    <Route
                        path={this.appendToUrl(':id')}
                        render={routeProps => this.renderUpdateModal(routeProps.match.params.id)}
                    />
                </Switch>
            </React.Fragment>
        );
    }
}

export default withRouter(injectSite(ReverseRelationView));
