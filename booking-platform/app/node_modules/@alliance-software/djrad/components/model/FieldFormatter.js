// @flow
/* eslint-disable react/no-unused-prop-types */
import React from 'react';
import { useFieldFormatter } from '../../hooks/useFieldFormatter';
import Field from '../../model/fields/Field';
import type { Model } from '../../model/Model';

type Props = {
    record: Model,
    /** Either field or fieldName should be specified */
    field: ?Field,
    fieldName: ?string,
    /** Optionally specify value. If not provided will be extracted from record. */
    value: ?any,
};

/**
 * Format a value based on field type. Formatter used depends on nearest parent
 * [FieldFormatterProvider](#fieldformatterprovider). Djrad provides defaults but
 * they can be overridden anywhere in the app.
 *
 * Use this field when you don't specifically want to choose what formatter to
 * use and want to defer to defaults (either global defaults or defaults).
 */
export default function FieldFormatter(props: Props) {
    const el = useFieldFormatter(props);
    return React.createElement(React.Fragment, null, el);
}

FieldFormatter.propTypes = {};
