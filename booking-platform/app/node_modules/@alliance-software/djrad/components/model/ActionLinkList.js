// @flow
import * as React from 'react';
import isEqual from 'lodash/isEqual';
import { $modelDefinition } from 'alliance-redux-api/lib/Model';

import ActionLink from './ActionLink';
import DelimitedList from '../DelimitedList';
import type { Model } from '../../model/Model';

type Props = {
    /** List of action names to display. Permissions are checked for each action and if check fails action is not rendered. */
    actions: Array<string>,
    /** Set to true to bypass permission checks and render the links regardless */
    bypassPermissions: boolean,
    /** Passed through to [ActionLink](/components/ActionLink) */
    linkComponent?: React.ComponentType<*>,
    /** Any extra props to pass through to [ActionLink](/components/ActionLink/) */
    linkProps?: {},
    /** Component to use for the list. Defaults to [DelimitedList](/components/DelimitedList/) */
    listComponent: React.ComponentType<*>,
    /** Component to use to wrap each list item. Default to nothing (React.Fragment) */
    listItemComponent: React.ComponentType<*>,
    /** If user has no permission for any actions this component will be rendered if supplied, otherwise nothing will be rendered */
    noLinksComponent?: React.ComponentType<*>,
    /** Record to show action links for. You must pass either record or model & id */
    record?: Model,
    /** If record is not provided you can specify a model class here instead. You must pass `recordId` if you pass `model`. */
    model?: Class<Model>,
    /** Id for a record when passing `model` **/
    recordId?: number | string,
};

type State = {
    resolvingPermissions: boolean,
    actions: Array<string>,
};

/**
 * For a specified record render a list of links to action pages that a user has permission
 * to view.
 *
 * By default permissions are checked for each specified action and if permission is denied that link is not
 * rendered. To control what is rendered if no links would be rendered pass `noLinksComponent` - default is to render
 * nothing at all.
 *
 * If you don't want permission checks to take place pass `bypassPermissions`.
 */
export default class ActionLinkList extends React.Component<Props, State> {
    static defaultProps = {
        bypassPermissions: false,
        listComponent: DelimitedList,
        listItemComponent: React.Fragment,
    };

    state = {
        resolvingPermissions: true,
        // List of actions that user has permissions to. Will be a subset of this.props.actions.
        actions: [],
    };

    hasMounted: boolean = false;
    permissionCheckPromise = null;

    componentDidMount() {
        this.permissionCheckPromise = this.resolvePermissions();
        this.hasMounted = true;
    }

    componentWillUnmount() {
        this.hasMounted = false;
    }

    async resolvePermissions() {
        this.setState({ resolvingPermissions: true });
        const { actions, model, recordId, bypassPermissions } = this.props;
        let { record } = this.props;
        if (bypassPermissions) {
            this.setState({ resolvingPermissions: false, actions });
            return;
        }
        if (!record) {
            // Hack to workaround lack of record instance. Record instance is only required for the id
            // and methods on class for permissions anyway so fake it with a partial record with just id.
            record = new model[$modelDefinition].partialRecordClass({
                [model._meta.pkFieldName]: recordId,
            });
        }
        const actionPerms = await Promise.all(actions.map(action => record.hasActionPerm(action)));
        if (this.hasMounted) {
            this.setState({
                resolvingPermissions: false,
                actions: actions.filter((action, i) => actionPerms[i]),
            });
        }
    }

    componentDidUpdate(prevProps: Props) {
        if (
            this.props.record !== prevProps.record ||
            this.props.model !== prevProps.model ||
            this.props.recordId !== prevProps.recordId ||
            !isEqual(this.props.actions, prevProps.actions) ||
            this.props.bypassPermissions !== prevProps.bypassPermissions
        ) {
            this.permissionCheckPromise = this.resolvePermissions();
        }
    }

    render() {
        const { resolvingPermissions, actions } = this.state;
        if (resolvingPermissions) {
            return null;
        }
        const {
            actions: originalActions,
            record,
            model,
            recordId,
            noLinksComponent: NoLinksComponent,
            linkComponent,
            linkProps,
            listComponent: ListComponent,
            listItemComponent: ListItemComponent,
            bypassPermissions,
            ...rest
        } = this.props;
        if (!record && (!model || !recordId)) {
            throw new Error('You must specify either record or model & recordId');
        }
        let modelClass = model;
        let finalRecordId = recordId;
        if (record) {
            modelClass = record.constructor;
            finalRecordId = record.getId();
        }
        if (actions.length === 0) {
            if (NoLinksComponent) {
                return <NoLinksComponent />;
            }
            return null;
        }
        return (
            <ListComponent {...rest}>
                {actions.map(action => (
                    <ListItemComponent key={action}>
                        <ActionLink
                            {...linkProps}
                            bypassPermissions
                            action={action}
                            model={modelClass}
                            params={{ id: finalRecordId }}
                            linkComponent={linkComponent}
                        >
                            {modelClass.getActionLabel(action)}
                        </ActionLink>
                    </ListItemComponent>
                ))}
            </ListComponent>
        );
    }
}
