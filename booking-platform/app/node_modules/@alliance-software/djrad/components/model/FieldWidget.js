// @flow
/* eslint-disable react/no-unused-prop-types */
import React from 'react';
import useFieldWidget from '../../hooks/useFieldWidget';
import Field from '../../model/fields/Field';

type Props = {
    /** Instance of field to render. This usually comes from a model record: `model._meta.fields.firstName` */
    field: Field,
    /** Whether field id disabled. Defaults to `field.readOnly`. */
    disabled?: boolean,
};

/**
 * Render widget based on field type. Widget used depends on nearest parent
 * [FieldWidgetProvider](#fieldwidgetprovider). Djrad provides defaults but
 * they can be overridden anywhere in the app.
 *
 * Use this field when you don't specifically want to choose what widget to
 * use and want to defer to defaults (either global defaults or form defaults).
 *
 * Any extra props are passed directly through to widget.
 */
export default function FieldWidget(props: Props) {
    const el = useFieldWidget(props);
    return React.createElement(React.Fragment, null, el);
}
