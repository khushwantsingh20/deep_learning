// @flow
import * as React from 'react';
import { Link } from 'react-router-dom';
import type { Match } from 'react-router-dom';
import useActionUrl from '../../hooks/useActionUrl';
import useModelClass from '../../hooks/useModelClass';
import type { Model } from '../../model/Model';
import type { ModelId } from '../../model/types';
import CheckPermission from '../permissions/CheckPermission';

type Props = {
    /** Set to true to bypass permission checks and render the link regardless */
    bypassPermissions: boolean,
    /** If not specified will default to the label for an action as returned by Model.getActionLabel() */
    children?: React.Node,
    /** Defaults to [Link](https://reacttraining.com/react-router/web/api/Link) if not specified. To render as a button use [ButtonLink](#buttonlink) */
    linkComponent: React.ComponentType<*>,
    /** The action to render a link for. Must be a valid action for the specified model. */
    action: string,
    /** Either model id ('app_name.modelname') or model class */
    model?: ModelId | Class<Model>,
    /** Instance of Model. One of `model` or `record` is required. */
    record?: ?Model,
    /** Passed through to [CheckPermission](/components/CheckPermission/ to render when user does not have permission to view this action */
    permissionDeniedComponent?: React.ComponentType<*>,
    /** Optional parameters to pass through to action link generation. */
    params?: {},
    /** See [Link to object](https://reacttraining.com/react-router/web/api/Link/to-object) */
    search?: string,
    /** See [Link to object](https://reacttraining.com/react-router/web/api/Link/to-object) */
    hash?: string,
    /** See [Link to object](https://reacttraining.com/react-router/web/api/Link/to-object) */
    state?: any,
    /** Optional prefix to use for the URL. If not provided uses the getPrefix() value from the model. */
    urlBase?: string,
    /** Optional: react-router match object that URL should be relative to. If specified match.url will form the base of the URL. */
    match?: Match,
};

/**
 * Render a link to an action (eg. detail, update, delete) for a model. Permissions for that action
 * are checked and on failure renders either nothing or the component specified in `permissionDeniedComponent`.
 *
 * By default permissions are checked for the specified action. If you don't want permission
 * checks to take place pass `bypassPermissions`.
 */
export default function ActionLink(props: Props) {
    const {
        bypassPermissions,
        model,
        linkComponent: LinkComponent,
        action,
        record,
        children,
        state,
        search,
        hash,
        permissionDeniedComponent,
        params = {},
        urlBase,
        match,
        ...rest
    } = props;
    const finalParams: Object = { ...params };
    if (record) {
        finalParams.id = record.getId();
    }
    const actionUrlOptions = {};
    if (urlBase) {
        actionUrlOptions.urlBase = urlBase;
    }
    if (match) {
        actionUrlOptions.match = match;
    }
    const pathname = useActionUrl(model || record, action, finalParams, actionUrlOptions);
    const modelClass = useModelClass(model || record);
    let to = pathname;
    if (state || search || hash) {
        to = { state, search, hash, pathname };
    }
    const linkProps = {
        action,
        record,
        to,
        ...rest,
    };
    const label = children || modelClass.getActionLabel(action);

    const checkPermProps: Object = {
        action,
    };
    if (record) {
        checkPermProps.record = record;
    } else {
        checkPermProps.model = model;
        if (finalParams.id) {
            checkPermProps.id = finalParams.id;
        }
    }

    const renderLink = () => <LinkComponent {...linkProps}>{label}</LinkComponent>;

    if (bypassPermissions) {
        return renderLink();
    }

    return (
        <CheckPermission
            permissionDeniedComponent={permissionDeniedComponent}
            render={renderLink}
            {...checkPermProps}
        />
    );
}

ActionLink.defaultProps = {
    bypassPermissions: false,
    linkComponent: Link,
};
