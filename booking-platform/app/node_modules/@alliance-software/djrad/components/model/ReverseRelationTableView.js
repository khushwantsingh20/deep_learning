import * as React from 'react';
import Immutable from 'immutable';
import { Button, Table, Popconfirm } from 'antd';
import DelimitedList from '../DelimitedList';

import ReverseRelationView from './ReverseRelationView';

export default function ReverseRelationTableView(props) {
    const {
        toRecord,
        relationFieldName,
        successMessage,
        label,
        buildColumns,
        renderTitle,
        renderFooter,
        renderForm,
        urlPrefix,
        ...rest
    } = props;
    return (
        <ReverseRelationView
            urlPrefix={urlPrefix}
            renderForm={renderForm}
            toRecord={toRecord}
            relationFieldName={relationFieldName}
            successMessage={successMessage}
            label={label}
            renderList={listProps => (
                <Table
                    title={
                        renderTitle && (currentPageData => renderTitle(currentPageData, listProps))
                    }
                    footer={
                        renderFooter &&
                        (currentPageData => renderFooter(currentPageData, listProps))
                    }
                    {...rest}
                    dataSource={
                        Immutable.List.isList(listProps.dataSource)
                            ? listProps.dataSource.toArray()
                            : listProps.dataSource
                    }
                    columns={buildColumns({ label: props.label, ...listProps })}
                />
            )}
        />
    );
}

ReverseRelationTableView.defaultProps = {
    pagination: false,
    renderFooter(page, { onAdd }) {
        return (
            <Button onClick={onAdd} type="primary">
                Add
            </Button>
        );
    },
    rowKey: record => record.id,
    buildColumns({ isDeleting, label, onEdit, onDelete }) {
        return [
            {
                title: label,
                dataIndex: '__str__',
            },
            {
                title: '',
                dataIndex: 'actions',
                render(value, item) {
                    return (
                        <DelimitedList separator=" ">
                            <Button disabled={isDeleting} onClick={() => onEdit(item)}>
                                Edit
                            </Button>
                            <Popconfirm
                                title="Are you sure you want to delete this record?"
                                onConfirm={() => onDelete(item)}
                                okText="Yes"
                                cancelText="No"
                            >
                                <Button loading={isDeleting} type="danger">
                                    Delete
                                </Button>
                            </Popconfirm>
                        </DelimitedList>
                    );
                },
            },
        ];
    },
};
