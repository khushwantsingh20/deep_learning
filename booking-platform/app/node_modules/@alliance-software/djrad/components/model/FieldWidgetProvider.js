// @flow
import * as React from 'react';
import Field from '../../model/fields/Field';

import type { WidgetProps } from '../form/FormField';

const { useMemo, useContext } = React;

type GetWidgetForField = (
    field: Field,
    props: WidgetProps,
    parentGetWidgetForField: ?GetWidgetForField
) => React.Node;

type Props = {
    children: React.Node,
    /**
     * Function that receives a field and it's props and should render the appropriate widget
     * > **NOTE**: You must forward the `props` through to your underlying widget otherwise it won't
     * > have the expected form handlers (`onChange`, `onBlur` etc), the form value etc
     **/
    getWidgetForField?: GetWidgetForField,
};

function defaultGetWidgetForField(
    field: Field,
    props: WidgetProps,
    parentGetWidgetForField: ?GetWidgetForField
) {
    if (parentGetWidgetForField) {
        return parentGetWidgetForField(field, props);
    }
    return field.getDefaultWidget(props);
}

export const FieldWidgetContext = React.createContext({});

export default function FieldWidgetProvider({
    children,
    getWidgetForField = defaultGetWidgetForField,
}: Props) {
    const context = useContext(FieldWidgetContext);
    const providedContext = useMemo(
        () => ({
            getWidgetForField: (field: Field, props: WidgetProps) =>
                getWidgetForField(field, props, context.getWidgetForField),
        }),
        [context.getWidgetForField, getWidgetForField]
    );
    return (
        <FieldWidgetContext.Provider value={providedContext}>
            {children}
        </FieldWidgetContext.Provider>
    );
}
