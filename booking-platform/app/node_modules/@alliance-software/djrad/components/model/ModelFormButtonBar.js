// @flow
import * as React from 'react';
import ButtonBar from '../form/ButtonBar';
import { FORM_ACTIONS } from '../form/FormButton';
import Form from '../form/Form';
import type { Model } from '../../model/Model';

type RenderButtons = (buttons: Array<React.Element<typeof Form.Button>>) => React.Node;
const defaultRender: RenderButtons = buttons => buttons;

type Props = {
    /** List of actions supported. Defaults to inferring from provided model / record. */
    actions?: Array<$Values<typeof FORM_ACTIONS>>,
    /** Model to use for inferring available actions */
    model?: ?Class<Model>,
    /** Record to use for inferring available actions. This will include delete if specified and supported by model. */
    record?: Model,
    /** Optional render callback to render the left buttons. Receives an array of the buttons for left side. */
    renderLeft: RenderButtons,
    /** Optional render callback to render the right buttons. Receives an array of the buttons for right side. */
    renderRight: RenderButtons,
};

/**
 * Render a bar of button actions relevant to a model form. Must appear within a [ModelForm](/components/ModelForm/).
 */
export default function ModelFormButtonBar({
    actions,
    renderLeft,
    renderRight,
    model,
    record,
}: Props) {
    if (!actions) {
        const modelOrRecord = model || record;
        if (!modelOrRecord) {
            actions = [
                FORM_ACTIONS.SAVE,
                FORM_ACTIONS.SAVE_AND_CONTINUE,
                FORM_ACTIONS.SAVE_AND_ADD_ANOTHER,
            ];
        } else {
            actions = [FORM_ACTIONS.SAVE];
            if (record && modelOrRecord._meta.isValidAction('delete')) {
                actions.push(FORM_ACTIONS.DELETE);
            }
            if (modelOrRecord._meta.isValidAction('update')) {
                actions.push(FORM_ACTIONS.SAVE_AND_CONTINUE);
            }
            if (modelOrRecord._meta.isValidAction('create')) {
                actions.push(FORM_ACTIONS.SAVE_AND_ADD_ANOTHER);
            }
        }
    }
    const leftButtons = actions.includes(FORM_ACTIONS.DELETE)
        ? [
              <Form.Button type="danger" action={FORM_ACTIONS.DELETE}>
                  Delete
              </Form.Button>,
          ]
        : [];
    const rightButtons = [
        actions.includes(FORM_ACTIONS.SAVE_AND_ADD_ANOTHER) && (
            <Form.Button
                key="save-add-another"
                type="primary"
                ghost
                action={FORM_ACTIONS.SAVE_AND_ADD_ANOTHER}
            >
                Save and add another
            </Form.Button>
        ),
        actions.includes(FORM_ACTIONS.SAVE_AND_CONTINUE) && (
            <Form.Button
                key="save-continue"
                type="primary"
                ghost
                action={FORM_ACTIONS.SAVE_AND_CONTINUE}
            >
                Save and continue
            </Form.Button>
        ),
        actions.includes(FORM_ACTIONS.SAVE) && (
            <Form.Button key="save" type="primary" action={FORM_ACTIONS.SAVE} htmlType="submit">
                SAVE
            </Form.Button>
        ),
    ].filter(Boolean);
    return (
        <ButtonBar leftButtons={renderLeft(leftButtons)} rightButtons={renderRight(rightButtons)} />
    );
}

ModelFormButtonBar.defaultProps = {
    renderLeft: defaultRender,
    renderRight: defaultRender,
};
