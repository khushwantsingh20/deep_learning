import React from 'react';
import PropTypes from 'prop-types';
import oneLine from 'common-tags/lib/oneLine';
import injectSite from '../../site/injectSite';
import { modelClass } from '../../prop-types/model';
import FilterForm from './FilterForm';

/**
 * FilterForm using filters defined on a specific model
 *
 * @acceptsProps FilterForm
 * @acceptsProps ModelForm
 * @ignoreProp fieldDefinitions
 */
function ModelFilterForm({ model: modelOrModelId, djradSite, fieldNames, ...props }) {
    const model = djradSite.getModelClass(modelOrModelId);
    const { filterFields } = model._meta.crud;

    if (!filterFields.length) {
        throw new Error(oneLine`
            ${model._meta.modelId} has no filter fields defined. 
            Make sure you have defined a filterset on the model viewset.
        `);
    }

    const filterFieldDefinitions = filterFields.reduce((acc, field) => {
        acc[field.name] = field;
        return acc;
    }, {});

    const knownFieldNames = filterFields.map(({ name }) => name);
    const formFieldNames = fieldNames || knownFieldNames;

    const onUnknownField = fieldName => {
        throw new Error(oneLine`
            Field "${fieldName}" passed to ModelFilterForm is not defined on the model's filterset. 
            Known fields: ${knownFieldNames.join(', ')}. 
            Check your filterset includes the field '${fieldName}'.
        `);
    };

    if (fieldNames) {
        // Check that all supplied field names are defined in the filterset
        const unknownFieldNames = fieldNames.filter(
            name => !filterFieldDefinitions.hasOwnProperty(name)
        );
        if (unknownFieldNames.length) {
            throw new Error(oneLine`
                The following fields passed to ModelFilterForm are not defined on the model's filterset: 
                ${unknownFieldNames.join(', ')}. 
                Known fields: ${knownFieldNames.join(', ')}. 
                Check your filterset includes the fields ${unknownFieldNames.join(', ')}.
            `);
        }
    }

    return (
        <FilterForm
            formName={`${model._meta.modelId}_filters`}
            fieldDefinitions={filterFieldDefinitions}
            fieldNames={formFieldNames}
            onUnknownField={onUnknownField}
            {...props}
        />
    );
}

ModelFilterForm.propTypes = {
    /** Model the filter is for. Used to extract available filter fields. */
    model: modelClass(),
    /** List of filter field names to show. Defaults to all known */
    fieldNames: PropTypes.arrayOf(PropTypes.string),
    /** Name of form. Defaults to model id with a '_filters' suffix (eg. sample_app.user_filters) */
    formName: PropTypes.string,
};

const EnhancedModelFilterForm = injectSite(ModelFilterForm);

EnhancedModelFilterForm.Item = FilterForm.Item;
EnhancedModelFilterForm.Field = FilterForm.Field;
EnhancedModelFilterForm.Widget = FilterForm.Widget;
EnhancedModelFilterForm.Button = FilterForm.Button;

export default EnhancedModelFilterForm;
