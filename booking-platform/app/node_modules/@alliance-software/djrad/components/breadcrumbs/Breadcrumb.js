// @flow
import * as React from 'react';
import PropTypes from 'prop-types';
import { BreadcrumbContext } from './BreadcrumbProvider';

export { default as BreadcrumbProvider } from './BreadcrumbProvider';

type Props = {
    /** Optional URL breadcrumb should go to. Rendered as a link only if doesn't match current URL. */
    to?: string, // eslint-disable-line
    /** What to render as breadcrumb - can be anything */
    children: React.Node, // eslint-disable-line
};

const propTypes = {
    /* eslint-disable react/no-unused-prop-types */
    to: PropTypes.string,
    children: PropTypes.node.isRequired,
    /* eslint-enable react/no-unused-prop-types */
};

/**
 * This component doesn't render anything where it is used - it registers
 * a breadcrumb to be rendered in a `Breadcrumbs` component. This allows
 * you to define your breadcrumbs in your relevant views in a nested fashion.
 * For example,
 *
 * ```js
 * // Actual breadcrumbs are rendered by this component
 * <Breadcrumbs />
 *
 * // Elsewhere in the app. `match` is the current route match provided by react-router.
 * // It's best to use `match.url` where possible as the base for breadcrumbs so that
 * // changing the route path automatically changes the breadcrumb.
 * <div>
 *    <h3>Users</h3>
 *    <Breadcrumb to={match.url}>Users</Breadcrumb>
 *    <UserList />
 *    <Route to={`${match.url}/:id`} component={UserView} />
 * </div>
 *
 * // UserView - rendered as nested route on Users
 * <div>
 *   <h4>User {params.id}</h4>
 *   <Breadcrumb>User ${id}</Breadcrumb>
 * </div>
 * ```
 *
 * When viewing a user id 1 the breadcrumbs will
 * show 'Users / User 1', when just viewing the user
 * list it will show 'Users'
 */
export default class Breadcrumb extends React.Component<Props> {
    static propTypes = propTypes;

    static contextType = BreadcrumbContext;

    componentDidMount() {
        if (!this.context.createBreadcrumb) {
            throw new Error('To use Breadcrumbs you must wrap your app in BreadcrumbProvider');
        }
        this.context.createBreadcrumb(this);
    }

    componentWillUnmount() {
        this.context.removeBreadcrumb(this);
    }

    componentDidUpdate() {
        this.context.updateBreadcrumb(this);
    }

    render() {
        // Doesn't render anything; registers itself with BreadcrumbProvider. The Breadcrumbs
        // components fetches registered Breadcrumbs and renders them.
        return null;
    }
}
