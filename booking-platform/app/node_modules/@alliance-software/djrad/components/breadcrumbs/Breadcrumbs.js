// @flow
import * as React from 'react';
import ReactRouterPropTypes from 'react-router-prop-types';
import PropTypes from 'prop-types';
import { withRouter, Link } from 'react-router-dom';
import { Breadcrumb as BreadcrumbWrapper } from 'antd';
import type { Location } from 'react-router-dom';
import Breadcrumb from './Breadcrumb';

import { appendSlash, getPathname } from '../../util/url';
import { BreadcrumbContext } from './BreadcrumbProvider';

const BreadcrumbItem = BreadcrumbWrapper.Item;

type Props = {
    /** Default breadcrumbs. All children must be `Breadcrumb`'s  eg `<Breadcrumb to="/">Home</Breadcrumb>` */
    children?: React.Element<typeof Breadcrumb>,
    /**
     * Comes from withRouter, not passed directly
     * @ignore
     */
    location: Location,
};

const propTypes = {
    children: PropTypes.element,
    location: ReactRouterPropTypes.location.isRequired,
};

/**
 * `Breadcrumbs` will render all your `Breadcrumb`'s in order from shallowest to deepest.
 *
 * ```js
 * function mapStateToProps(state) {
 *     return {
 *         user: state.Auth.user,
 *     };
 * }
 * function TopBar({ user }) {
 *      return (
 *          <Header user={user}>
 *              <Breadcrumbs />
 *          </Header>
 *      );
 * }
 * export default connect(mapStateToProps)(TopBar);
 * ```
 *
 * Then the issue will manifest. To resolve change the export to:
 *
 * ```js
 * export default withRouter(connect(mapStateToProps)(TopBar));
 * ```
 */
export class Breadcrumbs extends React.Component<Props> {
    static propTypes = propTypes;

    static contextType = BreadcrumbContext;

    componentDidMount() {
        if (!this.context.registerBreadcrumbRenderer) {
            throw new Error('To use Breadcrumbs you must wrap your app in BreadcrumbProvider');
        }
        this.context.registerBreadcrumbRenderer(this);
    }

    componentWillUnmount() {
        this.context.unregisterBreadcrumbRenderer(this);
    }

    render() {
        // Don't pass through react-router props
        const { children = [], location, history, match, staticContext, ...rest } = this.props;
        const breadcrumbs = [
            ...React.Children.map(children, child => {
                // TODO: Why doesn't child.type !== Breadcrumb work?
                // displayName check is because the type check fails almost always
                // although in one compiled build it worked and displayname didn't...
                if (child.type !== Breadcrumb && child.type.displayName !== 'Breadcrumb') {
                    throw new Error("Children of Breadcrumbs should only be Breadcrumb's");
                }
                return child;
            }),
            ...this.context.getBreadcrumbs(),
        ];
        return (
            <BreadcrumbWrapper {...rest}>
                {breadcrumbs.map((instance, i) => {
                    const { to } = instance.props;
                    let el = instance.props.children;
                    if (to && location.pathname !== getPathname(to)) {
                        el = <Link to={appendSlash(to)}>{el}</Link>;
                    }
                    return <BreadcrumbItem key={i}>{el}</BreadcrumbItem>;
                })}
            </BreadcrumbWrapper>
        );
    }
}

Breadcrumbs = withRouter(Breadcrumbs);

export default Breadcrumbs;
