// @flow
import * as React from 'react';
import PropTypes from 'prop-types';
import type Breadcrumb from './Breadcrumb';
import type { Breadcrumbs } from './Breadcrumbs';

type Props = {
    children: React.Node,
};

const propTypes = {
    children: PropTypes.node.isRequired,
};

export const BreadcrumbContext = React.createContext();

/**
 * Your app must be wrapper in a `BreadcrumbProvider`. Using `Breadcrumbs` or `Breadcrumb`
 * outside of a `BreadcrumbProvider` won't work.
 * ```js
 * <BreadcrumbProvider>
 *     <App />
 * </BreadcrumbProvider>
 * ```
 */
export default class BreadcrumbProvider extends React.Component<Props> {
    breadcrumbs: Array<Breadcrumb> = [];
    breadcrumbRenderers: Array<Breadcrumbs> = [];

    static propTypes = propTypes;

    _breadcrumbsContext = {
        createBreadcrumb: (instance: Breadcrumb) => {
            this.breadcrumbs.push(instance);
            this.breadcrumbRenderers.forEach(renderer => renderer.forceUpdate());
        },
        updateBreadcrumb: (/* instance */) => {
            this.breadcrumbRenderers.forEach(renderer => renderer.forceUpdate());
        },
        removeBreadcrumb: (instance: Breadcrumb) => {
            const index = this.breadcrumbs.indexOf(instance);
            if (index !== -1) {
                this.breadcrumbs.splice(index, 1);
                this.breadcrumbRenderers.forEach(renderer => renderer.forceUpdate());
            }
        },
        registerBreadcrumbRenderer: (el: Breadcrumbs) => {
            this.breadcrumbRenderers.push(el);
        },
        unregisterBreadcrumbRenderer: (el: Breadcrumbs) => {
            const index = this.breadcrumbRenderers.indexOf(el);
            if (index !== -1) {
                this.breadcrumbRenderers.splice(index, 1);
            }
        },
        getBreadcrumbs: () => this.breadcrumbs.filter(instance => !!instance.props.children),
    };

    render() {
        return (
            <BreadcrumbContext.Provider value={this._breadcrumbsContext}>
                {this.props.children}
            </BreadcrumbContext.Provider>
        );
    }
}
