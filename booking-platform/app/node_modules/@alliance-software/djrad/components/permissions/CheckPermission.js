// @flow
import * as React from 'react';
import PropTypes from 'prop-types';
import { requiredBy, mutuallyExclusiveProps } from 'airbnb-prop-types';
import useCheckPermission from '../../hooks/useCheckPermission';
import type { Model } from '../../model/Model';
import { modelClass, modelInstance } from '../../prop-types/model';
import requireAtLeastOne from '../../prop-types/requireAtLeastOne';
import injectSite from '../../site/injectSite';
import componentPropType from '../../prop-types/component';

type ChildrenFuncProps = {
    hasPerm: ?boolean,
    isLoading: boolean,
};

type Props = {
    /** Record to check permissions for. Alternatively you can provide the `model` and `id` props. */
    record?: Model,
    /**
     * The model class to check permissions for, if any. If `id` is also provided then it's considered a object level
     * check for the specified record.
     */
    model?: Class<Model>,
    /**
     * Can be provided with `model` to specify the particular object to check permissions for
     */
    id?: number | string,
    /**
     * The action to check permission for. One of `action` or `perm` should be provided
     */
    action?: string,
    /**
     * The permission to check. One of `action` or `perm` should be provided
     */
    perm?: string | Array<string>,
    /**
     * If provided in conjunction with `component` or `render` this component will be rendered if permission check fails.
     * If not provided nothing will be rendered on permission check failure.
     *
     * This is ignored if you pass the `children` prop.
     */
    permissionDeniedComponent?: React.ComponentType<*>,
    /**
     * If provided in conjunction with `component` or `render` this component will be rendered while permissions are
     * being checked. If not provided nothing will be rendered while loading.
     *
     * This is ignored if you pass the `children` prop.
     */
    loadingComponent?: React.ComponentType<*>,
    /**
     * The component to render once a permission check has passed. Is passed no props.
     */
    component?: React.ComponentType<*>,
    /**
     * Alternative to `component` you can specify a function that will be called directly instead. Use this for inline
     * components rather than passing an arrow function through to `component` or if you want to pass extra props
     * through to a component.
     */
    render?: () => React.Node,
    /**
     * Pass `children` if you want to control rendering directly for everything. When specified
     * `permissionDeniedComponent` and `loadingComponent` are ignored and instead `children` is called and passed
     * `isLoading` and `hasPerm`.
     */
    children?: (props: ChildrenFuncProps) => React.Node,
    /** @ignore */
    _required: null,
};

/**
 * Checks if the current user has a permission and conditionally renders content.
 *
 * If you pass `children` then it will always be called and receive an object with model, id, action, perm, record, hasPerm, isLoading
 *
 * Otherwise
 * - if permissions are resolving `loadingComponent` will be rendered (or null if not provided)
 * - if permission is denied `permissionDeniedComponent` will be rendered (or null if not provided)
 * - if permission is granted then `render` will be called if provided or `component` will be created
 *   with `React.createElement`.
 */
function CheckPermission(props: Props) {
    const {
        component,
        render,
        children,
        loadingComponent: Loading = null,
        permissionDeniedComponent: PermissionDenied = null,
        record,
        id,
        action,
        perm,
        model,
    } = props;
    const [hasPerm, isLoading] = useCheckPermission({
        record,
        id,
        action,
        perm,
        model,
    });
    if (children) {
        return children({ hasPerm, isLoading });
    }
    if (isLoading) {
        if (Loading) {
            return <Loading />;
        }
        return null;
    }
    if (!hasPerm) {
        if (PermissionDenied) {
            return <PermissionDenied />;
        }
        return null;
    }
    if (component) {
        return React.createElement(component);
    }
    if (render) {
        return render();
    }
    throw new Error('Expected one of children, component or render');
}

CheckPermission.propTypes = {
    record: mutuallyExclusiveProps(modelInstance(), 'record', 'id'),
    model: requiredBy('id', modelClass()),
    id: mutuallyExclusiveProps(
        PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
        'record',
        'id'
    ),
    action: mutuallyExclusiveProps(PropTypes.string, 'action', 'perm'),
    perm: mutuallyExclusiveProps(
        PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),
        'action',
        'perm'
    ),
    permissionDeniedComponent: componentPropType,
    loadingComponent: componentPropType,
    children: mutuallyExclusiveProps(PropTypes.func, 'children', 'render', 'component'),
    render: mutuallyExclusiveProps(PropTypes.func, 'children', 'render', 'component'),
    component: mutuallyExclusiveProps(componentPropType, 'children', 'render', 'component'),
    _required: requireAtLeastOne(
        // eslint-disable-line
        ['children', 'render', 'component'],
        ['action', 'perm']
    ),
};

export default injectSite(CheckPermission);
