import invariant from 'invariant';

export function complimentaryColumnProps(props, columnCount = 24) {
    const nextProps = {};
    for (const index of ['xs', 'sm', 'md', 'lg']) {
        const val = props[index];
        if (val && val < columnCount) {
            nextProps[index] = columnCount - val;
        }
    }
    return nextProps;
}

/**
 * Look for a matching column specification for a certain size.
 * eg. for props of { xs: 6 } this applies to all sizes, { lg: 6 } only
 * applies to 'lg', { md: 7 } applies to lg + md and so on.
 * @param {Object} props existing props to look through for match
 * @param {String} size Size to match against; one of 'xs', 'sm', 'md', 'lg'
 */
export function matchingColumnProps(props, size) {
    const sizeMatches = {
        xs: ['xs'],
        sm: ['sm', 'xs'],
        md: ['md', 'sm', 'xs'],
        lg: ['lg', 'md', 'sm', 'xs'],
    };
    invariant(
        sizeMatches[size],
        `Size must be one of ${Object.keys(sizeMatches).join(', ')}, received ${size}`
    );
    for (const matchingSize of sizeMatches[size]) {
        if (props[matchingSize]) {
            return props[matchingSize];
        }
    }
    return null;
}
