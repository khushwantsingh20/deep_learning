'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _shallowEqual = require('./shallowEqual');

var _shallowEqual2 = _interopRequireDefault(_shallowEqual);

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function getEventsFromProps(props) {
    var eventProps = {};
    Object.keys(props).forEach(function (key) {
        if (key.substr(0, 2) === 'on' && typeof props[key] == 'function') {
            eventProps[key] = props[key];
        }
    });
    return eventProps;
}

var RootEventListener = (_temp2 = _class = function (_React$Component) {
    _inherits(RootEventListener, _React$Component);

    function RootEventListener() {
        var _Object$getPrototypeO;

        var _temp, _this, _ret;

        _classCallCheck(this, RootEventListener);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_Object$getPrototypeO = Object.getPrototypeOf(RootEventListener)).call.apply(_Object$getPrototypeO, [this].concat(args))), _this), _this.unsubscribeFns = [], _this.lastPropUpdate = null, _this.propUpdateCount = null, _this.disableUpdates = false, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(RootEventListener, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            this.processEventProps(getEventsFromProps(this.props));
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var nextPropsEvents = getEventsFromProps(nextProps);
            if (!(0, _shallowEqual2.default)(nextPropsEvents, getEventsFromProps(this.props))) {
                this.processEventProps(nextProps);
            }
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.unsubscribeFns.map(function (unsubscribe) {
                return unsubscribe();
            });
        }
    }, {
        key: 'processEventProps',
        value: function processEventProps(props) {
            var _this2 = this;

            if (this.detectRenderLoop()) return;

            this.unsubscribeFns.map(function (unsubscribe) {
                return unsubscribe();
            });
            var addRootEventListener = this.context.addRootEventListener;

            var count = 0;
            Object.keys(props).forEach(function (key) {
                if (key.substr(0, 2) === 'on') {
                    count++;
                    var eventName = key.substr(2, 1).toLowerCase() + key.substr(3);
                    _this2.unsubscribeFns.push(addRootEventListener(eventName, props[key]));
                }
            });
            (0, _invariant2.default)(count !== 0, 'You are using RootEventListener but have specified no' + "props with 'on' prefix (eg. onClick). Have you made a " + 'typo in a prop? No event listeners have been added.');
        }

        // It's very possible to get into an infinite loop if you pass props
        // that always fail equality checks (eg. arrow functions). Detect
        // this and log an error.

    }, {
        key: 'detectRenderLoop',
        value: function detectRenderLoop() {
            if (this.disableUpdates) return true;

            var now = new Date().getTime();
            if (this.lastPropUpdate != null) {
                if (now - this.lastPropUpdate < 100) {
                    this.propUpdateCount++;
                }
                if (this.propUpdateCount > 10) {
                    this.disableUpdates = true;
                    console.error( // eslint-disable-line no-console
                    'Render loop detected. If you are passing in a arrow function ' + 'or binding a function when you assign props you  should cache ' + 'it instead. No further changes to props will be made.');
                }
            }
            this.lastPropUpdate = now;
            return this.disableUpdates;
        }
    }, {
        key: 'render',
        value: function render() {
            return _react.Children.only(this.props.children);
        }
    }]);

    return RootEventListener;
}(_react2.default.Component), _class.contextTypes = {
    addRootEventListener: _propTypes2.default.func.isRequired
}, _class.propTypes = {
    children: _propTypes2.default.node.isRequired
}, _temp2);
exports.default = RootEventListener;