'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactSideEffect = require('react-side-effect');

var _reactSideEffect2 = _interopRequireDefault(_reactSideEffect);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Add className or styles to the body component. Can be added on multiple
 * components and will be merged into final classNames, styles on deeper
 * components taking precedence
 * eg.
 * <BodyStyle className="app" style={{color: 'blue', backgroundColor: 'red'}}>
 *   <div>
 *     <BodyStyle className="login" style={{backgroundColor: 'green'}}>
 *     ...
 *     </BodyStyle>
 *   </div>
 * </BodyStyle>
 *
 * would result in
 *
 * <body class="app login" style="color: blue; background-color: green">
 */
var BodyStyle = function (_Component) {
    _inherits(BodyStyle, _Component);

    function BodyStyle() {
        _classCallCheck(this, BodyStyle);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(BodyStyle).apply(this, arguments));
    }

    _createClass(BodyStyle, [{
        key: 'render',
        value: function render() {
            if (this.props.children) {
                return _react.Children.only(this.props.children);
            }
            return null;
        }
    }]);

    return BodyStyle;
}(_react.Component);

BodyStyle.propTypes = {
    children: _propTypes2.default.node,
    className: _propTypes2.default.string,
    style: _propTypes2.default.object
};

function reducePropsToState(propsList) {
    var style = {};
    var classNames = [];
    propsList.forEach(function (props) {
        if (props.style) {
            Object.assign(style, props.style);
        }
        if (props.className) {
            classNames.push.apply(classNames, _toConsumableArray(props.className.split(' ')));
        }
    });
    return { style: style, classNames: classNames };
}

// We want to track previous styles on each application so we
// can revert them as each component is unmounted
var prevStyles = {};
var defaultBodyClassNames = (document.body.className || '').split(' ');

function handleStateChangeOnClient(_ref) {
    var style = _ref.style;
    var classNames = _ref.classNames;

    // Restore previous styles. Note that this gets called even if
    // style is empty and as such effectively reverts changes as
    // a component unmounts
    Object.keys(prevStyles).forEach(function (key) {
        document.body.style[key] = prevStyles[key];
    });
    prevStyles = {};
    // Apply new styles but first cache current value for each style
    Object.keys(style).forEach(function (key) {
        prevStyles[key] = document.body.style[key];
        document.body.style[key] = style[key];
    });
    document.body.className = [].concat(_toConsumableArray(defaultBodyClassNames), _toConsumableArray(Array.from(new Set(classNames)))).join(' ').trim();
}

exports.default = (0, _reactSideEffect2.default)(reducePropsToState, handleStateChangeOnClient)(BodyStyle);