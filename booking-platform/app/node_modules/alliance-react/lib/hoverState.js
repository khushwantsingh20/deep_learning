'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = hoverState;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Tracks each component that is using hoverState
var mountedInstances = [];
// Tracks each instance that is currently hovered
var hoverStack = [];

/**
 * When a change occurs we want to force each component to update to check new hover state
 */
function emitChange() {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = mountedInstances[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var instance = _step.value;

            instance.forceUpdate();
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
}

/**
 * Track hover state for a component. Passes an 'isHovered' prop to the component.
 * @param {Object} config
 * @param {Boolean} config.shallow only consider component to be hovered if no nested
 * components are hovered
 * @returns {Function}
 */
function hoverState() {
    var config = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var _config$shallow = config.shallow;
    var shallow = _config$shallow === undefined ? false : _config$shallow;

    return function (DecoratedComponent) {
        var WrappedComponent = function (_Component) {
            _inherits(WrappedComponent, _Component);

            function WrappedComponent(props) {
                _classCallCheck(this, WrappedComponent);

                var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(WrappedComponent).call(this, props));

                _this.setRef = function (ref) {
                    _this.ref = ref;
                };

                _this.onMouseEnter = _this.onMouseEnter.bind(_this);
                _this.onMouseOrDragLeave = _this.onMouseOrDragLeave.bind(_this);
                _this.removeHover = _this.removeHover.bind(_this);
                _this.state = { hovered: false };
                return _this;
            }

            /**
             * When component mounts we need to track it. This is so when hover occurs
             * (on any instance) we can notify this component.
             */


            _createClass(WrappedComponent, [{
                key: 'componentWillMount',
                value: function componentWillMount() {
                    mountedInstances.push(this);
                    emitChange();
                }

                /**
                 * When componentn unmounts we want to remove it from our tracking and force
                 * a change on all existing elements incase the hover state has changed
                 */

            }, {
                key: 'componentWillUnmount',
                value: function componentWillUnmount() {
                    var index = mountedInstances.indexOf(this);
                    mountedInstances.splice(index, 1);
                    this.removeHover();
                    emitChange();
                }

                /**
                 * On mouse enter we mark this instance as hovered and track it in the global
                 * hoverStack list. We notify all instances so they can re-render with correct
                 * isHovered value.
                 */

            }, {
                key: 'onMouseEnter',
                value: function onMouseEnter() {
                    this.setState({ hovered: true });
                    hoverStack.push(this);
                    emitChange();
                }

                /**
                 * On mouse leave we need to remove hover state and force re-render of all instances.
                 * We also handle onDragLeave here as mouse leave doesn't get fired if you
                 * use HTML5 drag-n-drop on it so hovered won't be toggled even though mouse has
                 * left the element.
                 */

            }, {
                key: 'onMouseOrDragLeave',
                value: function onMouseOrDragLeave() {
                    // dragLeave events seem to propogate - so even if you are still within
                    // a container it could have a dragLeave event fired from a child element
                    // Not much we can do about this I don't think and is an edge case (only
                    // came up in test cases)
                    this.setState({ hovered: false });
                    this.removeHover();
                    emitChange();
                }
            }, {
                key: 'removeHover',
                value: function removeHover() {
                    var index = hoverStack.indexOf(this);
                    if (index !== -1) {
                        hoverStack.splice(index, 1);
                    }
                }
            }, {
                key: 'render',
                value: function render() {
                    var lastOver = hoverStack.length && hoverStack[hoverStack.length - 1];
                    var isOver = this.state.hovered && (!shallow || lastOver === this);
                    return _react2.default.createElement(
                        'div',
                        {
                            ref: this.setRef,
                            onMouseEnter: this.onMouseEnter,
                            onMouseLeave: this.onMouseOrDragLeave,
                            onDragLeave: this.onMouseOrDragLeave
                        },
                        _react2.default.createElement(DecoratedComponent, _extends({ isHovered: isOver }, this.props))
                    );
                }
            }]);

            return WrappedComponent;
        }(_react.Component);

        return WrappedComponent;
    };
}