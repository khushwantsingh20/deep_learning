import { mount } from 'enzyme';
import React from 'react';
import BodyStyle from '../src/BodyStyle';

describe('BodyStyle', () => {
    class Wrapper extends React.Component {

        render() {
            /* eslint-disable */
            const { children, ...bodyStyleProps } = this.props;
            /* eslint-enable */
            return (
                <div>
                    <BodyStyle {...bodyStyleProps}>
                        {children}
                    </BodyStyle>
                </div>
            );
        }
    }

    it('should add class to body', () => {
        const comp = mount(<Wrapper className="class1" />);
        expect(document.body.className).toEqual('class1');
        comp.setProps({ className: 'class2' }).update();
        expect(document.body.className).toEqual('class2');
        comp.setProps({ className: 'class1 class2' }).update();
        expect(document.body.className).toEqual('class1 class2');
        comp.unmount();
    });

    it('should add class to body (nested concat)', () => {
        const comp = mount(
            <Wrapper className="class1">
                <Wrapper className="class2" />
            </Wrapper>);
        expect(document.body.className).toEqual('class1 class2');

        comp.setProps({
            children: (
                <Wrapper className="class2">
                    <Wrapper className="class3 class4" />
                </Wrapper>
            ),
        }).update();
        expect(document.body.className).toEqual('class1 class2 class3 class4');
        comp.setProps({
            className: 'class6',
            children: (
                <Wrapper className="class6">
                    <Wrapper className="class6" />
                </Wrapper>
            ),
        });
        expect(document.body.className).toEqual('class6');
        comp.unmount();
        expect(document.body.className).toEqual('');
    });


    it('should add styles', () => {
        let comp = mount(
            <Wrapper style={{ backgroundColor: 'red' }} />
            );
        expect(document.body.style.backgroundColor).toEqual('red');
        comp.unmount();
        expect(document.body.style.backgroundColor).toEqual('');
        comp = mount(
            <Wrapper style={{ backgroundColor: 'red', color: 'blue' }} />
            );
        expect(document.body.style.backgroundColor).toEqual('red');
        expect(document.body.style.color).toEqual('blue');
        comp.unmount();
    });

    it('should add styles (nested concat, child takes priority)', () => {
        let comp = mount(
            <Wrapper style={{ backgroundColor: 'red' }}>
                <Wrapper style={{ backgroundColor: 'blue' }} />
            </Wrapper>
            );
        expect(document.body.style.backgroundColor).toEqual('blue');
        comp.unmount();
        expect(document.body.style.backgroundColor).toEqual('');
        comp = mount(
            <Wrapper style={{ backgroundColor: 'red', color: 'red' }}>
                <Wrapper style={{ backgroundColor: 'blue', borderStyle: 'solid' }}>
                    <Wrapper style={{ backgroundColor: 'green' }} />
                </Wrapper>
            </Wrapper>
            );
        expect(document.body.style.backgroundColor).toEqual('green');
        expect(document.body.style.color).toEqual('red');
        expect(document.body.style.borderStyle).toEqual('solid');
        comp.unmount();
        expect(document.body.style.backgroundColor).toEqual('');
        expect(document.body.style.color).toEqual('');
        expect(document.body.style.borderStyle).toEqual('');
    });
});
