import React, { Component } from 'react';
import PropTypes from 'prop-types';
import TestUtils, { Simulate } from 'react-addons-test-utils';
import injectEventListeners from '../src/injectEventListeners';

describe('injectEventListeners', () => {
    class ListenerComponent extends Component {

        static contextTypes = {
            addRootEventListener: PropTypes.func.isRequired,
        };

        state = { clicks: 0, enterPressedCount: 0 };

        componentWillMount() {
            this.unsubscribeClick = this.context.addRootEventListener('click', () => {
                this.setState({ clicks: this.state.clicks + 1 });
            });

            this.unsubscribeKeydown = this.context.addRootEventListener('keyDown', e => {
                if (e.key === 'Enter') {
                    this.setState({
                        enterPressedCount: this.state.enterPressedCount + 1,
                    });
                }
            });
        }

        render() {
            return <div>Listener</div>;
        }
    }

    class RootComponent extends Component {

        render() {
            const noPropogate = e => e.stopPropagation();
            const { eventListeners } = this.props;
            return (
                <div ref="root" {...eventListeners} >
                    <ListenerComponent />;
                    <button ref="button" onClick={noPropogate}>
                        button no propogate
                    </button>
                    <input ref="input" type="text" />
                    <input ref="inputNoPropagate" type="text" onKeyDown={noPropogate} />
                </div>
            );
        }

    }

    const WrappedRootComponent = injectEventListeners()(RootComponent);

    it('should fire click events', () => {
        const container = TestUtils.renderIntoDocument(<WrappedRootComponent />);
        const root = TestUtils.findRenderedComponentWithType(container, RootComponent);
        const listener = TestUtils.findRenderedComponentWithType(root, ListenerComponent);
        Simulate.click(root.refs.root);
        expect(listener.state.clicks).toEqual(1);
        Simulate.click(root.refs.root);
        expect(listener.state.clicks).toEqual(2);
        Simulate.click(root.refs.button);
        expect(listener.state.clicks).toEqual(2);
        listener.unsubscribeClick();
        Simulate.click(root.refs.root);
        expect(listener.state.clicks).toEqual(2);
    });

    it('should fire keydown events', () => {
        console.warn = jest.genMockFn(); // eslint-disable-line
        const container = TestUtils.renderIntoDocument(<WrappedRootComponent />);
        const root = TestUtils.findRenderedComponentWithType(container, RootComponent);
        const listener = TestUtils.findRenderedComponentWithType(root, ListenerComponent);
        expect(console.warn).toBeCalled(); // eslint-disable-line
        expect(console.warn.mock.calls.length).toBe(1); // eslint-disable-line
        expect(console.warn.mock.calls[0][0]).toMatch(/bound a keyboard event/); // eslint-disable-line
        Simulate.click(root.refs.root);
        Simulate.keyDown(root.refs.input, { key: 'Enter', keyCode: 13, which: 13 });
        expect(listener.state.enterPressedCount).toEqual(1);
        Simulate.keyDown(root.refs.button, { key: 'Enter', keyCode: 13, which: 13 });
        expect(listener.state.enterPressedCount).toEqual(2);
        Simulate.keyDown(root.refs.inputNoPropagate, { key: 'Enter', keyCode: 13, which: 13 });
        expect(listener.state.enterPressedCount).toEqual(2);
        listener.unsubscribeKeydown();
        Simulate.keyDown(root.refs.input, { key: 'Enter', keyCode: 13, which: 13 });
        expect(listener.state.enterPressedCount).toEqual(2);
    });
});
