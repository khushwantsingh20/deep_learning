import { Component, Children } from 'react';
import PropTypes from 'prop-types';
import withSideEffect from 'react-side-effect';

/**
 * Add className or styles to the body component. Can be added on multiple
 * components and will be merged into final classNames, styles on deeper
 * components taking precedence
 * eg.
 * <BodyStyle className="app" style={{color: 'blue', backgroundColor: 'red'}}>
 *   <div>
 *     <BodyStyle className="login" style={{backgroundColor: 'green'}}>
 *     ...
 *     </BodyStyle>
 *   </div>
 * </BodyStyle>
 *
 * would result in
 *
 * <body class="app login" style="color: blue; background-color: green">
 */
class BodyStyle extends Component {
    render() {
        if (this.props.children) {
            return Children.only(this.props.children);
        }
        return null;
    }
}

BodyStyle.propTypes = {
    children: PropTypes.node,
    className: PropTypes.string,
    style: PropTypes.object,
};

function reducePropsToState(propsList) {
    const style = {};
    const classNames = [];
    propsList.forEach(props => {
        if (props.style) {
            Object.assign(style, props.style);
        }
        if (props.className) {
            classNames.push(...props.className.split(' '));
        }
    });
    return { style, classNames };
}

// We want to track previous styles on each application so we
// can revert them as each component is unmounted
let prevStyles = {};
const defaultBodyClassNames = (document.body.className || '').split(' ');

function handleStateChangeOnClient({ style, classNames }) {
    // Restore previous styles. Note that this gets called even if
    // style is empty and as such effectively reverts changes as
    // a component unmounts
    Object.keys(prevStyles).forEach(key => {
        document.body.style[key] = prevStyles[key];
    });
    prevStyles = {};
    // Apply new styles but first cache current value for each style
    Object.keys(style).forEach(key => {
        prevStyles[key] = document.body.style[key];
        document.body.style[key] = style[key];
    });
    document.body.className = [...defaultBodyClassNames,
                               ...Array.from(new Set(classNames))].join(' ').trim();
}

export default withSideEffect(
    reducePropsToState,
    handleStateChangeOnClient
)(BodyStyle);
