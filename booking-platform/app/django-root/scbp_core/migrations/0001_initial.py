# Generated by Django 4.2.3 on 2023-08-10 01:49

import datetime
from decimal import Decimal

from django.conf import settings
import django.contrib.postgres.fields.ranges
import django.core.validators
from django.db import migrations
from django.db import models
import django.utils.timezone

import scbp_core.fields
import scbp_core.models.user
import scbp_core.util


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("first_name", models.CharField(blank=True, max_length=100)),
                ("last_name", models.CharField(blank=True, max_length=100)),
                ("email", models.EmailField(max_length=254, unique=True)),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                ("activated_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "scbp_core_user",
                "default_permissions": (),
            },
            managers=[
                ("objects", scbp_core.models.user.UserManager()),
                (
                    "profiles",
                    scbp_core.models.user.UserManager(select_related_profiles=True),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Account",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                ("account_no", models.IntegerField(editable=False)),
                ("account_nickname", models.CharField(db_index=True, max_length=100)),
                ("business_name", models.CharField(blank=True, max_length=100)),
                ("account_email", models.CharField(blank=True, max_length=100)),
                ("contact_title", models.CharField(blank=True, max_length=100)),
                ("contact_first_name", models.CharField(blank=True, max_length=100)),
                ("contact_last_name", models.CharField(blank=True, max_length=100)),
                (
                    "contact_phone_mobile",
                    scbp_core.fields.PhoneNumberField(
                        blank=True, max_length=100, verbose_name="Mobile"
                    ),
                ),
                (
                    "contact_phone_landline",
                    scbp_core.fields.PhoneNumberField(
                        blank=True, max_length=100, verbose_name="Landline"
                    ),
                ),
                ("billing_address", models.CharField(blank=True, max_length=100)),
                (
                    "rate_schedule",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "Standard"),
                            (2, "Retail"),
                            (3, "Corporate"),
                            (4, "Institution"),
                        ],
                        default=1,
                    ),
                ),
                (
                    "category",
                    models.PositiveSmallIntegerField(
                        choices=[(1, "Personal"), (2, "Business")]
                    ),
                ),
                (
                    "payment_terms",
                    models.PositiveSmallIntegerField(
                        choices=[(1, "COD"), (3, "30 Days")], default=1
                    ),
                ),
                (
                    "payment_method",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "Invoice"),
                            (2, "Credit Card"),
                            (3, "Driver Collect"),
                        ]
                    ),
                ),
                (
                    "invoicing_method",
                    models.PositiveSmallIntegerField(
                        choices=[(1, "Email"), (2, "SMS"), (3, "Mail")]
                    ),
                ),
                ("credit_card_type", models.CharField(blank=True, max_length=16)),
                (
                    "credit_card_expiry_month",
                    models.PositiveSmallIntegerField(blank=True, null=True),
                ),
                (
                    "credit_card_expiry_year",
                    models.PositiveSmallIntegerField(blank=True, null=True),
                ),
                (
                    "credit_card_last4_digits",
                    models.CharField(blank=True, max_length=4),
                ),
                ("eway_token_customer_id", models.CharField(blank=True, max_length=32)),
                ("legacy_accountno", models.CharField(blank=True, max_length=10)),
            ],
            options={
                "verbose_name": "account",
                "verbose_name_plural": "accounts",
                "db_table": "scbp_core_account",
                "default_permissions": (),
                "default_related_name": "accounts",
            },
        ),
        migrations.CreateModel(
            name="AccountStatement",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("statement_number", models.CharField(max_length=50, unique=True)),
                ("period", django.contrib.postgres.fields.ranges.DateRangeField()),
                ("issued_on", models.DateField()),
                (
                    "payment_method",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "Invoice"),
                            (2, "Credit Card"),
                            (3, "Driver Collect"),
                        ]
                    ),
                ),
                (
                    "statement_status",
                    models.PositiveSmallIntegerField(
                        choices=[(1, "Pending"), (2, "Paid")], default=1
                    ),
                ),
                ("date_paid", models.DateTimeField(null=True)),
                ("custom_message", models.TextField(blank=True)),
            ],
            options={
                "db_table": "scbp_core_statement",
                "default_permissions": (),
                "default_related_name": "statements",
            },
        ),
        migrations.CreateModel(
            name="AccountToClient",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                (
                    "is_default_account",
                    models.BooleanField(
                        help_text="Is this account set as the default", null=True
                    ),
                ),
                (
                    "is_account_admin",
                    models.BooleanField(
                        default=False, help_text="Can this user manage this account?"
                    ),
                ),
            ],
            options={
                "db_table": "scbp_core_account_to_client",
                "default_permissions": (),
                "default_related_name": "account_to_client",
            },
        ),
        migrations.CreateModel(
            name="Booking",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "booking_number",
                    models.IntegerField(db_index=True, editable=False, unique=True),
                ),
                ("passenger_name", models.CharField(blank=True, max_length=100)),
                (
                    "passenger_phone",
                    scbp_core.fields.PhoneNumberField(blank=True, max_length=100),
                ),
                ("passenger_count", models.PositiveSmallIntegerField()),
                (
                    "child_under8_count",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Child under 8 count"
                    ),
                ),
                ("baggage_count", models.PositiveSmallIntegerField()),
                ("travel_on", models.DateTimeField(db_index=True)),
                ("is_time_tba", models.BooleanField(default=False)),
                (
                    "booking_type",
                    models.PositiveSmallIntegerField(
                        choices=[(1, "One Way Trip"), (2, "Hourly Booking")], default=1
                    ),
                ),
                (
                    "hourly_booking_duration",
                    models.DurationField(blank=True, null=True),
                ),
                (
                    "from_address_type",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "Melbourne Airport"),
                            (2, "Home"),
                            (3, "Office"),
                            (4, "Other Saved Locations"),
                            (5, "Custom"),
                        ],
                        default=5,
                    ),
                ),
                ("from_flight_number", models.CharField(blank=True, max_length=50)),
                (
                    "from_airport_driver_required_on_landing",
                    models.BooleanField(default=False),
                ),
                (
                    "from_airport_arrival_after_landing",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "0 minutes"),
                            (5, "5 minutes"),
                            (10, "10 minutes"),
                            (15, "15 minutes"),
                            (20, "20 minutes"),
                            (25, "25 minutes"),
                            (30, "30 minutes"),
                            (35, "35 minutes"),
                            (40, "40 minutes"),
                            (45, "45 minutes"),
                            (50, "50 minutes"),
                            (55, "55 minutes"),
                            (60, "60 minutes"),
                            (65, "65 minutes"),
                            (70, "70 minutes"),
                            (75, "75 minutes"),
                        ],
                        default=0,
                    ),
                ),
                ("from_airport_notes_for_driver", models.TextField(blank=True)),
                (
                    "destination_address_type",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (1, "Melbourne Airport"),
                            (2, "Home"),
                            (3, "Office"),
                            (4, "Other Saved Locations"),
                            (5, "Custom"),
                        ],
                        default=5,
                        null=True,
                    ),
                ),
                (
                    "destination_airport_terminal",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (1, "Terminal 1 - Qantas Domestic"),
                            (2, "Terminal 2 - International"),
                            (3, "Terminal 3 - Virgin Australia"),
                            (4, "Terminal 4 - Jetstar, Tiger, & Regional Express"),
                        ],
                        null=True,
                    ),
                ),
                (
                    "destination_flight_departure_time",
                    models.TimeField(blank=True, null=True),
                ),
                ("booster_seat_count", models.PositiveSmallIntegerField(default=0)),
                (
                    "forward_facing_baby_seat_count",
                    models.PositiveSmallIntegerField(default=0),
                ),
                (
                    "rear_facing_baby_seat_count",
                    models.PositiveSmallIntegerField(default=0),
                ),
                ("requires_wedding_ribbons", models.BooleanField(default=False)),
                (
                    "requires_car_park_pass",
                    models.BooleanField(default=False, verbose_name="BHP Pass"),
                ),
                (
                    "price_total",
                    scbp_core.fields.CurrencyValueField(
                        blank=True,
                        decimal_places=2,
                        editable=False,
                        max_digits=14,
                        null=True,
                    ),
                ),
                (
                    "driver_value",
                    scbp_core.fields.CurrencyValueField(
                        blank=True,
                        decimal_places=2,
                        default=Decimal("0"),
                        editable=False,
                        max_digits=14,
                    ),
                ),
                (
                    "price_breakdown",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        editable=False,
                        encoder=scbp_core.util.DecimalJSONEncoder,
                    ),
                ),
                (
                    "invoice_breakdown",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        editable=False,
                        encoder=scbp_core.util.DecimalJSONEncoder,
                    ),
                ),
                ("driver_notes", models.TextField(blank=True)),
                ("office_notes", models.TextField(blank=True)),
                (
                    "admin_general_notes",
                    models.TextField(blank=True, verbose_name="General Notes"),
                ),
                ("signboard_text", models.CharField(blank=True, max_length=255)),
                ("purchase_order_number", models.CharField(blank=True, max_length=255)),
                ("out_of_area", models.BooleanField(blank=True)),
                ("booking_time", models.DateTimeField(auto_now_add=True)),
                (
                    "booking_method",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "Phone"),
                            (2, "Email"),
                            (3, "SMS"),
                            (4, "Website"),
                            (5, "App"),
                        ],
                        db_index=True,
                        default=1,
                    ),
                ),
                (
                    "booking_status",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "Unverified"),
                            (2, "Verified"),
                            (3, "Offered"),
                            (4, "Knocked Back"),
                            (5, "Changed"),
                            (6, "Confirmed"),
                            (7, "Picked Up"),
                            (8, "Cleared"),
                            (9, "Variation"),
                            (10, "Completed"),
                            (11, "Cancelled"),
                        ],
                        db_index=True,
                        default=1,
                    ),
                ),
                ("dropoff_time", models.DateTimeField(blank=True, null=True)),
                (
                    "total_distance",
                    models.DecimalField(
                        decimal_places=1, default=Decimal("0"), max_digits=5
                    ),
                ),
                ("wait_time", models.DurationField(default=datetime.timedelta)),
                ("pickup_time", models.DateTimeField(blank=True, null=True)),
                (
                    "supplier_confirmation_number",
                    models.CharField(
                        blank=True,
                        help_text="Confirmation number from external supplier, eg. for interstate bookings",
                        max_length=100,
                    ),
                ),
                (
                    "booking_payment_method",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "Client Default"),
                            (2, "Driver - Cabcharge"),
                            (3, "Driver - Credit Card"),
                            (4, "Driver - Cash"),
                        ],
                        default=1,
                    ),
                ),
                ("run_number", models.PositiveSmallIntegerField(blank=True, null=True)),
                ("convoy_number", models.CharField(blank=True, max_length=10)),
                ("pencil_note", models.CharField(blank=True, max_length=10)),
                ("legacy_jobnumber", models.IntegerField(blank=True, null=True)),
                (
                    "legacy_price_breakdown",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        editable=False,
                        encoder=scbp_core.util.DecimalJSONEncoder,
                    ),
                ),
                (
                    "legacy_review_status",
                    models.PositiveSmallIntegerField(
                        choices=[(1, "Not Reviewed"), (2, "Dismissed")], default=1
                    ),
                ),
                ("legacy_has_invalid_address", models.BooleanField(default=False)),
                (
                    "is_managed_in_legacy",
                    models.BooleanField(blank=True, default=False),
                ),
                (
                    "is_matching_legacy_pricing",
                    models.BooleanField(blank=True, default=False),
                ),
                (
                    "sms_confirmation_task_id",
                    models.CharField(blank=True, max_length=64),
                ),
            ],
            options={
                "db_table": "scbp_core_booking",
                "default_permissions": (),
                "default_related_name": "bookings",
            },
        ),
        migrations.CreateModel(
            name="BookingAdditionalStop",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("stop_number", models.PositiveSmallIntegerField()),
                ("is_pick_up", models.BooleanField(default=True)),
                (
                    "address_type",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "Melbourne Airport"),
                            (2, "Home"),
                            (3, "Office"),
                            (4, "Other Saved Locations"),
                            (5, "Custom"),
                        ],
                        default=5,
                    ),
                ),
            ],
            options={
                "db_table": "scbp_core_booking_additional_stop",
                "ordering": ["stop_number"],
                "default_permissions": (),
            },
        ),
        migrations.CreateModel(
            name="BookingAddress",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("formatted_address", models.CharField(max_length=512)),
                ("place_name", models.CharField(blank=True, max_length=100)),
                ("lat", models.FloatField(null=True, verbose_name="Latitude")),
                ("long", models.FloatField(null=True, verbose_name="Longitude")),
                ("suburb", models.CharField(blank=True, max_length=255)),
                ("postal_code", models.CharField(max_length=20)),
                ("country_code", models.CharField(default="AU", max_length=2)),
                ("source_id", models.CharField(blank=True, max_length=256)),
                ("map_url", models.CharField(blank=True, max_length=512)),
                ("address_details", models.JSONField(blank=True)),
                ("address_instructions", models.TextField(blank=True)),
                ("address_label", models.CharField(blank=True, max_length=255)),
                (
                    "legacy_table",
                    models.IntegerField(
                        blank=True,
                        choices=[(1, "Pickup"), (2, "Destination")],
                        null=True,
                    ),
                ),
                ("legacy_jobnumber", models.IntegerField(blank=True, null=True)),
                ("legacy_stop_number", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "scbp_core_booking_address",
                "ordering": ["booking_additional_stops__stop_number"],
                "default_permissions": (),
            },
        ),
        migrations.CreateModel(
            name="BookingLeadTime",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "day_type",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "Weekday"),
                            (2, "Saturday"),
                            (3, "Sunday"),
                            (4, "Public Holiday"),
                        ]
                    ),
                ),
                ("hour", models.SmallIntegerField()),
                (
                    "lead_time",
                    models.DurationField(default=datetime.timedelta(seconds=2700)),
                ),
            ],
            options={
                "db_table": "scbp_core_booking_lead_time",
                "default_permissions": (),
            },
        ),
        migrations.CreateModel(
            name="BookingLog",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("source", models.CharField(max_length=300)),
                ("description", models.TextField()),
            ],
            options={
                "db_table": "scbp_core_booking_log",
                "default_permissions": (),
            },
        ),
        migrations.CreateModel(
            name="BookingOutOfPocket",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("description", models.CharField(max_length=300)),
                (
                    "amount",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2, max_digits=14
                    ),
                ),
            ],
            options={
                "db_table": "scbp_core_booking_out_of_pocket",
                "default_permissions": (),
            },
        ),
        migrations.CreateModel(
            name="BookingPriceVariation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "variation_type",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "Waiting"),
                            (2, "Ad Hoc Additional Stop"),
                            (3, "Discount"),
                            (5, "Out of area"),
                            (6, "Interstate Transfer Rate"),
                            (4, "Other"),
                        ]
                    ),
                ),
                (
                    "variation_type_other_description",
                    models.CharField(blank=True, max_length=100),
                ),
                (
                    "amount",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2, max_digits=14
                    ),
                ),
            ],
            options={
                "db_table": "scbp_core_booking_price_variation",
                "default_permissions": (),
            },
        ),
        migrations.CreateModel(
            name="ClientAddress",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("formatted_address", models.CharField(max_length=512)),
                ("place_name", models.CharField(blank=True, max_length=100)),
                ("lat", models.FloatField(null=True, verbose_name="Latitude")),
                ("long", models.FloatField(null=True, verbose_name="Longitude")),
                ("suburb", models.CharField(blank=True, max_length=255)),
                ("postal_code", models.CharField(max_length=20)),
                ("country_code", models.CharField(default="AU", max_length=2)),
                ("source_id", models.CharField(blank=True, max_length=256)),
                ("map_url", models.CharField(blank=True, max_length=512)),
                ("address_details", models.JSONField(blank=True)),
                (
                    "address_type",
                    models.PositiveSmallIntegerField(
                        choices=[(2, "Home"), (3, "Office"), (4, "Other")]
                    ),
                ),
                ("address_label", models.CharField(blank=True, max_length=100)),
                ("address_instructions", models.TextField(blank=True)),
                ("legacy_recordid", models.CharField(blank=True, max_length=50)),
                ("legacy_seqno", models.IntegerField(null=True)),
                (
                    "legacy_table",
                    models.IntegerField(
                        choices=[
                            (1, "AddressBookContacts"),
                            (2, "FrequentDestinations"),
                            (3, "FrequentPickups"),
                        ],
                        null=True,
                    ),
                ),
            ],
            options={
                "db_table": "scbp_core_client_address",
                "default_permissions": (),
            },
        ),
        migrations.CreateModel(
            name="DistanceOverride",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "from_suburb",
                    models.CharField(
                        blank=True,
                        help_text="If provided match is done against postcode and exact match on suburb.",
                        max_length=100,
                    ),
                ),
                (
                    "from_postcode",
                    models.CharField(
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^\\d+$", "Postcode must be numeric"
                            )
                        ],
                    ),
                ),
                (
                    "to_postcode",
                    models.CharField(
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^\\d+$", "Postcode must be numeric"
                            )
                        ],
                    ),
                ),
                (
                    "to_suburb",
                    models.CharField(
                        blank=True,
                        help_text="If provided match is done against postcode and exact match on suburb.",
                        max_length=100,
                    ),
                ),
                ("fixed_distance", models.DecimalField(decimal_places=1, max_digits=5)),
            ],
            options={
                "db_table": "scbp_core_distance_override",
                "default_permissions": (),
            },
        ),
        migrations.CreateModel(
            name="GuestTraveller",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("phone_number", scbp_core.fields.PhoneNumberField(max_length=100)),
            ],
            options={
                "db_table": "scbp_core_guest_traveller",
                "ordering": ["name"],
                "default_permissions": (),
            },
        ),
        migrations.CreateModel(
            name="Holiday",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(help_text="Holiday name", max_length=100)),
                (
                    "date",
                    models.DateField(
                        help_text="Holiday date including year", unique=True
                    ),
                ),
            ],
            options={
                "db_table": "scbp_core_holiday",
                "ordering": ["date"],
                "default_permissions": (),
            },
        ),
        migrations.CreateModel(
            name="HourRateType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "day_type",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "Weekday"),
                            (2, "Saturday"),
                            (3, "Sunday"),
                            (4, "Public Holiday"),
                        ]
                    ),
                ),
                ("hour", models.SmallIntegerField()),
                (
                    "hour_type",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "Off-peak"),
                            (2, "Standard"),
                            (3, "Peak"),
                            (4, "Out of hours"),
                            (5, "Holiday - Out of hours"),
                            (6, "Saturday Night"),
                        ],
                        default=2,
                    ),
                ),
            ],
            options={
                "db_table": "scbp_core_hour_rate_type",
                "default_permissions": (),
            },
        ),
        migrations.CreateModel(
            name="Invoice",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("invoice_number", models.CharField(max_length=50, unique=True)),
                ("issued_on", models.DateField()),
                (
                    "invoice_total_amount",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2, max_digits=14
                    ),
                ),
                (
                    "travel_charge_amount",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2, default=Decimal("0"), max_digits=14
                    ),
                ),
                (
                    "time_surcharge_amount",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2, default=Decimal("0"), max_digits=14
                    ),
                ),
                (
                    "waiting_charge_amount",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2, default=Decimal("0"), max_digits=14
                    ),
                ),
                (
                    "requests_amount",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2, default=Decimal("0"), max_digits=14
                    ),
                ),
                (
                    "variations_amount",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2, default=Decimal("0"), max_digits=14
                    ),
                ),
                (
                    "out_of_pocket_amount",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2, default=Decimal("0"), max_digits=14
                    ),
                ),
                (
                    "fee_amount",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2, default=Decimal("0"), max_digits=14
                    ),
                ),
                (
                    "company_fee_amount",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2, default=Decimal("0"), max_digits=14
                    ),
                ),
                (
                    "credit_card_surcharge_rate",
                    scbp_core.fields.PercentageValueField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        max_value=100,
                        min_value=0,
                        null=True,
                    ),
                ),
                (
                    "booking_price_total",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2, max_digits=14
                    ),
                ),
                (
                    "booking_price_breakdown",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        editable=False,
                        encoder=scbp_core.util.DecimalJSONEncoder,
                    ),
                ),
                (
                    "payment_method",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "Invoice"),
                            (2, "Credit Card"),
                            (3, "Driver Collect"),
                        ]
                    ),
                ),
                (
                    "invoice_status",
                    models.PositiveSmallIntegerField(
                        choices=[(1, "Pending"), (2, "Paid")], default=1
                    ),
                ),
                ("date_paid", models.DateTimeField(null=True)),
            ],
            options={
                "db_table": "scbp_core_invoice",
                "default_permissions": (),
                "default_related_name": "invoices",
            },
        ),
        migrations.CreateModel(
            name="MobileDeviceToken",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("token", models.CharField(max_length=255)),
            ],
            options={
                "db_table": "scbp_core_mobile_device_token",
                "default_permissions": (),
                "default_related_name": "mobile_tokens",
            },
        ),
        migrations.CreateModel(
            name="PaymentRecord",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "payment_method",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "Invoice"),
                            (2, "Credit Card"),
                            (3, "Driver Collect"),
                        ]
                    ),
                ),
                (
                    "base_amount",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2, max_digits=14
                    ),
                ),
                (
                    "total_amount",
                    scbp_core.fields.CurrencyValueField(
                        blank=True, decimal_places=2, max_digits=14, null=True
                    ),
                ),
                (
                    "status",
                    models.PositiveSmallIntegerField(
                        choices=[(1, "Success"), (2, "Failure"), (3, "Pending")],
                        default=3,
                    ),
                ),
                ("error_message", models.CharField(blank=True, max_length=256)),
                ("transaction_id", models.BigIntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "scbp_core.payment_record",
                "default_permissions": (),
                "default_related_name": "payments",
            },
        ),
        migrations.CreateModel(
            name="PriceAdjustment",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "from_postcode",
                    models.CharField(
                        help_text="Pick-up postcode",
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^\\d+$", "Postcode must be numeric"
                            )
                        ],
                    ),
                ),
                (
                    "to_postcode",
                    models.CharField(
                        help_text="Pick-up postcode",
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^\\d+$", "Postcode must be numeric"
                            )
                        ],
                    ),
                ),
                (
                    "percentage",
                    models.SmallIntegerField(
                        validators=[django.core.validators.MinValueValidator(-99)]
                    ),
                ),
            ],
            options={
                "db_table": "scbp_core_price_adjustment",
                "default_permissions": (),
            },
        ),
        migrations.CreateModel(
            name="PriceList",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "hourly_initial_fee",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2,
                        default=Decimal("88"),
                        help_text="Initial fee for the period up to the value of Hourly Tier 1 Start At (eg. for the first hour). This is a fixed fee.",
                        max_digits=14,
                    ),
                ),
                (
                    "hourly_tier1_start_at",
                    models.PositiveSmallIntegerField(
                        default=1,
                        help_text="Where price per 10 minutes for tier 1 starts from. Ends at value of Hourly Tier 2 Start At",
                    ),
                ),
                (
                    "hourly_tier2_start_at",
                    models.PositiveSmallIntegerField(
                        default=6,
                        help_text="Where price per 10 minutes for tier 2 starts from. Every hour after this value is charged at hourly tier 2 rate",
                    ),
                ),
                (
                    "block_size_minutes",
                    models.PositiveSmallIntegerField(
                        default=10,
                        help_text="Number of minutes hourly block prices are charged for (eg. 10 minutes)",
                    ),
                ),
                (
                    "hourly_tier1_rate_per_block",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2,
                        default=Decimal("12"),
                        help_text="Rate per block size for hours from Hourly Tier 1 Start At to Hourly Tier 2 Start at (eg. $X per 10 minutes from hour 1 - 6)",
                        max_digits=14,
                    ),
                ),
                (
                    "hourly_tier2_rate_per_block",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2,
                        default=Decimal("10"),
                        help_text="Rate per block size for all hours after Hourly Tier 2 Start At (eg. $X per 10 minutes from hour 6+)",
                        max_digits=14,
                    ),
                ),
                (
                    "out_of_area_boundary_km",
                    models.PositiveIntegerField(
                        default=25,
                        help_text="Number of km's from the GPO that determines the boundary for out of area rate",
                    ),
                ),
                (
                    "interstate_fee",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2,
                        default=Decimal("11"),
                        help_text="Fee for interstate bookings",
                        max_digits=14,
                    ),
                ),
                (
                    "airport_surcharge",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2,
                        default=Decimal("5"),
                        help_text="Fee for trips starting or ending at the airport",
                        max_digits=14,
                    ),
                ),
                (
                    "government_booking_fee",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2,
                        default=Decimal("1.10"),
                        help_text="Government fees/taxes",
                        max_digits=14,
                    ),
                ),
                (
                    "company_booking_fee",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Southern Cross booking fee",
                        max_digits=14,
                    ),
                ),
                (
                    "airport_parking_fee",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2,
                        default=Decimal("4.50"),
                        help_text="Fee for parking at the airport while waiting to pick up passenger",
                        max_digits=14,
                    ),
                ),
                (
                    "off_peak_discount_percentage",
                    scbp_core.fields.PercentageValueField(
                        decimal_places=2,
                        default=Decimal("5"),
                        help_text="Percentage discount for trips made during off-peak hours",
                        max_digits=5,
                        max_value=100,
                        min_value=0,
                    ),
                ),
                (
                    "peak_percent",
                    scbp_core.fields.PercentageValueField(
                        decimal_places=2,
                        default=Decimal("5"),
                        help_text="Percentage surcharge for trips made during peak hours",
                        max_digits=5,
                        max_value=100,
                        min_value=0,
                    ),
                ),
                (
                    "peak_max_amount",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2,
                        default=Decimal("10"),
                        help_text="Maximum peak trip surcharge",
                        max_digits=14,
                    ),
                ),
                (
                    "out_of_hours_fee",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2,
                        default=Decimal("11"),
                        help_text="Fee for pickup outside of normal operating hours except on holidays",
                        max_digits=14,
                    ),
                ),
                (
                    "public_holiday_out_of_hours_fee",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2,
                        default=Decimal("16"),
                        help_text="Fee for pickup outside of normal operating hours on holidays",
                        max_digits=14,
                    ),
                ),
                (
                    "public_holiday_fee",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2,
                        default=Decimal("11"),
                        help_text="Fee for holiday pickup within normal operating hours",
                        max_digits=14,
                    ),
                ),
                (
                    "off_peak_minimum_fee",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2,
                        default=Decimal("36"),
                        help_text="Minimum base price for off-peak pickups",
                        max_digits=14,
                    ),
                ),
                (
                    "standard_minimum_fee",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2,
                        default=Decimal("55"),
                        help_text="Minimum base price for standard/peak pickups",
                        max_digits=14,
                    ),
                ),
                (
                    "saturday_night_minimum_fee",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2,
                        default=Decimal("88"),
                        help_text="Minimum base price for Saturday night pickups",
                        max_digits=14,
                    ),
                ),
                (
                    "wedding_ribbon_fee",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2,
                        default=Decimal("44"),
                        help_text="Fee for wedding ribbons on car",
                        max_digits=14,
                    ),
                ),
                (
                    "child_seat_fee",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2,
                        default=Decimal("11.00"),
                        help_text="Fee per child seat",
                        max_digits=14,
                    ),
                ),
                (
                    "additional_stop_fee",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2,
                        default=Decimal("11"),
                        help_text="Fee per additional stop",
                        max_digits=14,
                    ),
                ),
                (
                    "color_selection_fee",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2,
                        default=Decimal("22.00"),
                        help_text="Fee to select car colour",
                        max_digits=14,
                        verbose_name="Colour Selection Fee",
                    ),
                ),
                (
                    "car_park_pass_fee",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2,
                        default=Decimal("22.00"),
                        help_text="Corporate Car Park pass fee",
                        max_digits=14,
                    ),
                ),
                (
                    "rate_schedule_standard",
                    scbp_core.fields.PercentageValueField(
                        decimal_places=2,
                        default=Decimal("0"),
                        help_text="% Percentage rate adjustment apply to Standard accounts",
                        max_digits=5,
                        max_value=100,
                        min_value=-100,
                    ),
                ),
                (
                    "rate_schedule_retail",
                    scbp_core.fields.PercentageValueField(
                        decimal_places=2,
                        default=Decimal("10"),
                        help_text="% Percentage rate adjustment apply to Retail accounts",
                        max_digits=5,
                        max_value=100,
                        min_value=-100,
                    ),
                ),
                (
                    "rate_schedule_corporate",
                    scbp_core.fields.PercentageValueField(
                        decimal_places=2,
                        default=Decimal("-5"),
                        help_text="% Percentage rate adjustment apply to Corporate accounts",
                        max_digits=5,
                        max_value=100,
                        min_value=-100,
                    ),
                ),
                (
                    "rate_schedule_institution",
                    scbp_core.fields.PercentageValueField(
                        decimal_places=2,
                        default=Decimal("-10"),
                        help_text="% Percentage rate adjustment apply to Institution accounts",
                        max_digits=5,
                        max_value=100,
                        min_value=-100,
                    ),
                ),
                (
                    "is_current",
                    models.BooleanField(default=True, null=True, unique=True),
                ),
                ("current_from", models.DateTimeField(auto_now_add=True)),
                ("current_until", models.DateTimeField(null=True)),
                ("scheduled_from", models.DateTimeField(null=True)),
                ("is_future", models.BooleanField(default=None, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User responsible for creating this record. May be null for initial system generated one.",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "scbp_core_price_list",
                "default_permissions": (),
            },
        ),
        migrations.CreateModel(
            name="SpecialEvent",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(help_text="Special event name", max_length=100),
                ),
                ("date", models.DateField(help_text="Special event date")),
                (
                    "start_time",
                    models.TimeField(help_text="Special event pricing start time"),
                ),
                (
                    "end_time",
                    models.TimeField(help_text="Special event pricing end time"),
                ),
                (
                    "pickup_postcode",
                    models.CharField(
                        help_text="Postcode for pick-ups associated with this event ('any' for all postcodes)",
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^(\\d+|(A|a)ny)$",
                                "Postcode should be either numeric or 'any'",
                            )
                        ],
                    ),
                ),
                (
                    "dropoff_postcode",
                    models.CharField(
                        help_text="Postcode for drop-offs associated with this event ('any' for all postcodes)",
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^(\\d+|(A|a)ny)$",
                                "Postcode should be either numeric or 'any'",
                            )
                        ],
                    ),
                ),
                (
                    "event_surcharge",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2,
                        help_text="Surcharge applied to trips associated with this event",
                        max_digits=14,
                    ),
                ),
                (
                    "event_minimum_hours",
                    models.PositiveSmallIntegerField(
                        default=0, help_text="Minimum number of chargeable hours"
                    ),
                ),
                (
                    "event_minimum_charge",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Minimum base cost for bookings related to this event",
                        max_digits=14,
                    ),
                ),
            ],
            options={
                "db_table": "scbp_core_special_event",
                "ordering": ["date", "start_time", "end_time"],
                "default_permissions": (),
            },
        ),
        migrations.CreateModel(
            name="VehicleClass",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_first_child_seat_free", models.BooleanField(default=False)),
                (
                    "min_hourly_surcharge_fixed",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2,
                        help_text="Fixed rate added to hourly rate trips for this vehicle class. The greater of this value or the percentage value (defined below) will be added.",
                        max_digits=14,
                        verbose_name="Min hourly surcharge $",
                    ),
                ),
                (
                    "min_hourly_surcharge_perc",
                    scbp_core.fields.PercentageValueField(
                        decimal_places=2,
                        help_text="Percentage rate added to hourly rate trips for this vehicle class. The greater of this value or the fixed rate (defined above) will be added.",
                        max_digits=5,
                        max_value=100,
                        min_value=0,
                        verbose_name="Min hourly surcharge %",
                    ),
                ),
                (
                    "one_way_pickup_rate",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2, max_digits=14
                    ),
                ),
                (
                    "one_way_off_peak_pickup_rate",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2, max_digits=14
                    ),
                ),
                (
                    "one_way_rate_tier1",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2,
                        help_text="Fee up to 5km",
                        max_digits=14,
                        verbose_name="One way rate (up to 5km)",
                    ),
                ),
                (
                    "one_way_rate_tier2",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2,
                        help_text="Fee from 5km to 40km",
                        max_digits=14,
                        verbose_name="One way rate (5km to 40km)",
                    ),
                ),
                (
                    "one_way_rate_tier3",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2,
                        help_text="Fee per km beyond 40km",
                        max_digits=14,
                        verbose_name="One way rate (beyond 40km)",
                    ),
                ),
                (
                    "one_way_off_peak_rate_tier1",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2,
                        max_digits=14,
                        verbose_name="Off-peak one way rate (up to 5km)",
                    ),
                ),
                (
                    "one_way_off_peak_rate_tier2",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2,
                        max_digits=14,
                        verbose_name="Off-peak one way rate (5km to 40km)",
                    ),
                ),
                (
                    "one_way_off_peak_rate_tier3",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2,
                        max_digits=14,
                        verbose_name="Off-peak one way rate (beyond 40km)",
                    ),
                ),
                ("title", models.CharField(max_length=100)),
                ("abbreviation", models.CharField(blank=True, max_length=10)),
                ("description", models.CharField(max_length=300)),
                ("max_passenger_count", models.PositiveSmallIntegerField()),
                ("max_baggage_count", models.PositiveSmallIntegerField()),
                ("max_child_seat_count", models.PositiveSmallIntegerField()),
                ("image", models.ImageField(upload_to="")),
                (
                    "is_any_class",
                    models.BooleanField(
                        default=False,
                        help_text="Is this class used as the generic 'Any Class' display?",
                    ),
                ),
                (
                    "is_interstate",
                    models.BooleanField(
                        default=False,
                        help_text="Is this class valid for and exclusive to interstate bookings?",
                    ),
                ),
                ("sort_key", models.PositiveIntegerField(db_index=True, default=500)),
            ],
            options={
                "verbose_name_plural": "vehicle classes",
                "db_table": "scbp_core_vehicle_class",
                "ordering": ["sort_key"],
                "default_permissions": (),
                "default_related_name": "vehicle_classes",
            },
        ),
        migrations.CreateModel(
            name="VehicleColor",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=100)),
                ("color_abbreviation", models.CharField(max_length=3)),
                (
                    "color_code",
                    models.CharField(
                        help_text="Must be valid CSS color string", max_length=30
                    ),
                ),
            ],
            options={
                "verbose_name": "vehicle colour",
                "verbose_name_plural": "vehicle colours",
                "db_table": "scbp_core_color",
                "default_permissions": (),
                "default_related_name": "colors",
            },
        ),
        migrations.CreateModel(
            name="ClientUser",
            fields=[
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                ("title", models.CharField(blank=True, max_length=100)),
                (
                    "contact_phone",
                    scbp_core.fields.PhoneNumberField(
                        max_length=100, verbose_name="Contact Phone (mobile)"
                    ),
                ),
                (
                    "contact_phone_alternate",
                    scbp_core.fields.PhoneNumberField(
                        blank=True, max_length=100, verbose_name="Contact Phone (home)"
                    ),
                ),
                ("driver_instructions", models.CharField(blank=True, max_length=300)),
                ("internal_instructions", models.CharField(blank=True, max_length=300)),
                (
                    "priority",
                    models.PositiveSmallIntegerField(
                        choices=[(1, "1"), (2, "2"), (3, "3")], default=3
                    ),
                ),
                (
                    "user_ptr",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        parent_link=True,
                        primary_key=True,
                        related_name="client_user",
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("legacy_clientno", models.IntegerField(null=True, unique=True)),
                ("legacy_contactno", models.IntegerField(null=True, unique=True)),
            ],
            options={
                "verbose_name": "Client",
                "verbose_name_plural": "Clients",
                "db_table": "scbp_core_client_user",
                "default_permissions": (),
            },
            bases=("scbp_core.user", models.Model),
            managers=[
                ("objects", scbp_core.models.user.ArchivableUserManager()),
                (
                    "all_objects",
                    scbp_core.models.user.ArchivableUserManager(
                        non_archived_only=False
                    ),
                ),
                (
                    "profiles",
                    scbp_core.models.user.UserManager(select_related_profiles=True),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DriverUser",
            fields=[
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                (
                    "user_ptr",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        parent_link=True,
                        primary_key=True,
                        related_name="driver_user",
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("driver_no", models.IntegerField()),
                ("title", models.CharField(blank=True, max_length=100)),
                (
                    "home_phone",
                    scbp_core.fields.PhoneNumberField(blank=True, max_length=100),
                ),
                ("mobile", scbp_core.fields.PhoneNumberField(max_length=100)),
                ("date_of_birth", models.DateField()),
                ("address", models.CharField(max_length=300)),
                ("partner_name", models.CharField(blank=True, max_length=100)),
                (
                    "partner_phone",
                    scbp_core.fields.PhoneNumberField(blank=True, max_length=100),
                ),
                (
                    "commision_rate",
                    models.PositiveSmallIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ]
                    ),
                ),
                ("has_driver_agreement_signed", models.BooleanField(default=False)),
                ("abn", models.CharField(blank=True, max_length=100)),
                ("is_abn_verified", models.BooleanField(default=False)),
                ("start_date", models.DateField()),
                ("end_date", models.DateField(blank=True, null=True)),
                ("drivers_license_number", models.CharField(max_length=100)),
                ("drivers_license_expiry_date", models.DateField()),
                ("driver_certificate_number", models.CharField(max_length=100)),
                ("driver_certificate_expiry_date", models.DateField()),
                (
                    "operations_manual_number",
                    models.CharField(blank=True, max_length=100),
                ),
                (
                    "operations_manual_version",
                    models.CharField(blank=True, max_length=100),
                ),
                (
                    "operations_manual_issued_date",
                    models.DateField(blank=True, null=True),
                ),
                (
                    "operations_manual_returned_date",
                    models.DateField(blank=True, null=True),
                ),
            ],
            options={
                "verbose_name": "Driver",
                "verbose_name_plural": "Drivers",
                "db_table": "scbp_core_driver_user",
                "default_permissions": (),
            },
            bases=("scbp_core.user", models.Model),
            managers=[
                ("objects", scbp_core.models.user.ArchivableUserManager()),
                (
                    "all_objects",
                    scbp_core.models.user.ArchivableUserManager(
                        non_archived_only=False
                    ),
                ),
                (
                    "profiles",
                    scbp_core.models.user.UserManager(select_related_profiles=True),
                ),
            ],
        ),
        migrations.CreateModel(
            name="StaffUser",
            fields=[
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                (
                    "user_ptr",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        parent_link=True,
                        primary_key=True,
                        related_name="staff_user",
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user_type",
                    models.PositiveSmallIntegerField(
                        choices=[(1, "Manager"), (2, "Supervisor"), (3, "Telephonist")]
                    ),
                ),
            ],
            options={
                "verbose_name": "Staff Member",
                "verbose_name_plural": "Staff",
                "db_table": "scbp_core_staff_user",
                "default_permissions": (),
                "default_related_name": "staff_users",
            },
            bases=("scbp_core.user", models.Model),
            managers=[
                ("objects", scbp_core.models.user.ArchivableUserManager()),
                (
                    "all_objects",
                    scbp_core.models.user.ArchivableUserManager(
                        non_archived_only=False
                    ),
                ),
                (
                    "profiles",
                    scbp_core.models.user.UserManager(select_related_profiles=True),
                ),
            ],
        ),
        migrations.CreateModel(
            name="VehicleOperator",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                ("vehicle_operator_no", models.CharField(max_length=6)),
                ("company_name", models.CharField(max_length=100)),
                ("lat", models.FloatField()),
                ("long", models.FloatField()),
                ("address", models.CharField(max_length=300)),
                ("abn", models.CharField(max_length=100)),
                ("is_abn_verified", models.BooleanField(default=False)),
                ("contact_title", models.CharField(blank=True, max_length=100)),
                ("contact_first_name", models.CharField(max_length=100)),
                ("contact_last_name", models.CharField(max_length=100)),
                (
                    "contact_phone",
                    scbp_core.fields.PhoneNumberField(blank=True, max_length=100),
                ),
                ("contact_mobile", scbp_core.fields.PhoneNumberField(max_length=100)),
                ("contact_email", models.CharField(max_length=100)),
                (
                    "classification",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "Franchise Owner"),
                            (2, "Contractor - Own Car"),
                            (3, "Related Party"),
                            (4, "Interstate"),
                            (5, "External"),
                            (7, "Company Car"),
                            (6, "Other"),
                        ]
                    ),
                ),
                ("has_agreement_with_sc", models.BooleanField(default=False)),
                ("agreement_date", models.DateField(blank=True, null=True)),
                ("renewal_date", models.DateField(blank=True, null=True)),
                ("service_fee_percent", models.IntegerField()),
                (
                    "marketing_levy",
                    models.IntegerField(verbose_name="Marketing Levy (%)"),
                ),
                (
                    "monthly_depot_fee",
                    models.IntegerField(verbose_name="Monthly Depot Fee ($)"),
                ),
                ("bank_name", models.CharField(max_length=100)),
                ("bank_account_name", models.CharField(max_length=100)),
                ("bank_bsb", models.CharField(max_length=100, verbose_name="Bank BSB")),
                ("bank_account_number", models.CharField(max_length=100)),
                (
                    "archived_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="archived_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "vehicle operator",
                "verbose_name_plural": "vehicle operators",
                "db_table": "scbp_core_vehicle_operator",
                "default_permissions": (),
                "default_related_name": "vehicle_operators",
            },
        ),
        migrations.CreateModel(
            name="VehicleClassPriceList",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_first_child_seat_free", models.BooleanField(default=False)),
                (
                    "min_hourly_surcharge_fixed",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2,
                        help_text="Fixed rate added to hourly rate trips for this vehicle class. The greater of this value or the percentage value (defined below) will be added.",
                        max_digits=14,
                        verbose_name="Min hourly surcharge $",
                    ),
                ),
                (
                    "min_hourly_surcharge_perc",
                    scbp_core.fields.PercentageValueField(
                        decimal_places=2,
                        help_text="Percentage rate added to hourly rate trips for this vehicle class. The greater of this value or the fixed rate (defined above) will be added.",
                        max_digits=5,
                        max_value=100,
                        min_value=0,
                        verbose_name="Min hourly surcharge %",
                    ),
                ),
                (
                    "one_way_pickup_rate",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2, max_digits=14
                    ),
                ),
                (
                    "one_way_off_peak_pickup_rate",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2, max_digits=14
                    ),
                ),
                (
                    "one_way_rate_tier1",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2,
                        help_text="Fee up to 5km",
                        max_digits=14,
                        verbose_name="One way rate (up to 5km)",
                    ),
                ),
                (
                    "one_way_rate_tier2",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2,
                        help_text="Fee from 5km to 40km",
                        max_digits=14,
                        verbose_name="One way rate (5km to 40km)",
                    ),
                ),
                (
                    "one_way_rate_tier3",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2,
                        help_text="Fee per km beyond 40km",
                        max_digits=14,
                        verbose_name="One way rate (beyond 40km)",
                    ),
                ),
                (
                    "one_way_off_peak_rate_tier1",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2,
                        max_digits=14,
                        verbose_name="Off-peak one way rate (up to 5km)",
                    ),
                ),
                (
                    "one_way_off_peak_rate_tier2",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2,
                        max_digits=14,
                        verbose_name="Off-peak one way rate (5km to 40km)",
                    ),
                ),
                (
                    "one_way_off_peak_rate_tier3",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2,
                        max_digits=14,
                        verbose_name="Off-peak one way rate (beyond 40km)",
                    ),
                ),
                (
                    "price_list",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="scbp_core.pricelist",
                    ),
                ),
                (
                    "vehicle_class",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="scbp_core.vehicleclass",
                    ),
                ),
            ],
            options={
                "db_table": "scbp_core_vehicle_class_price_list",
                "default_permissions": (),
            },
        ),
        migrations.AddField(
            model_name="vehicleclass",
            name="available_colors",
            field=models.ManyToManyField(to="scbp_core.vehiclecolor"),
        ),
        migrations.CreateModel(
            name="Vehicle",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                ("car_no", models.CharField(max_length=6)),
                (
                    "commerical_passenger_vehicle_license",
                    models.CharField(max_length=300),
                ),
                ("make", models.CharField(max_length=100)),
                ("model", models.CharField(max_length=100)),
                ("year_of_manufacture", models.IntegerField()),
                ("odometer", models.IntegerField()),
                ("inspection_date", models.DateField()),
                ("radio_serial_no", models.CharField(max_length=100)),
                (
                    "archived_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="archived_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "car_class",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="scbp_core.vehicleclass",
                    ),
                ),
                (
                    "color",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="scbp_core.vehiclecolor",
                    ),
                ),
                (
                    "vehicle_operator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="scbp_core.vehicleoperator",
                    ),
                ),
            ],
            options={
                "verbose_name": "vehicle",
                "verbose_name_plural": "vehicles",
                "db_table": "scbp_core_vehicle",
                "ordering": ["car_no"],
                "default_permissions": (),
                "default_related_name": "vehicles",
            },
        ),
        migrations.CreateModel(
            name="PriceOverride",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "from_postcode",
                    models.CharField(
                        help_text="Pick-up postcode",
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^\\d+$", "Postcode must be numeric"
                            )
                        ],
                    ),
                ),
                (
                    "to_postcode",
                    models.CharField(
                        help_text="Drop-off postcode",
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^\\d+$", "Postcode must be numeric"
                            )
                        ],
                    ),
                ),
                (
                    "start_time",
                    models.TimeField(
                        blank=True, help_text="Earliest pick-up time", null=True
                    ),
                ),
                (
                    "end_time",
                    models.TimeField(
                        blank=True, help_text="Latest pick-up time", null=True
                    ),
                ),
                (
                    "fixed_cost",
                    scbp_core.fields.CurrencyValueField(
                        decimal_places=2, help_text="Fixed base price", max_digits=14
                    ),
                ),
                (
                    "is_all_day",
                    models.BooleanField(
                        default=False, help_text="Whether this override applies all day"
                    ),
                ),
                (
                    "account",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="scbp_core.account",
                    ),
                ),
            ],
            options={
                "db_table": "scbp_core_price_override",
                "default_permissions": (),
            },
        ),
        migrations.AddConstraint(
            model_name="priceadjustment",
            constraint=models.UniqueConstraint(
                fields=("from_postcode", "to_postcode"),
                name="scbp_core_price_adjustment_unique_postcodes",
            ),
        ),
        migrations.AddField(
            model_name="paymentrecord",
            name="account",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="scbp_core.account"
            ),
        ),
        migrations.AddField(
            model_name="paymentrecord",
            name="invoice",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="refunds",
                to="scbp_core.invoice",
            ),
        ),
        migrations.AddField(
            model_name="mobiledevicetoken",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="invoice",
            name="booking",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="invoices",
                to="scbp_core.booking",
            ),
        ),
        migrations.AddField(
            model_name="invoice",
            name="statement",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="scbp_core.accountstatement",
            ),
        ),
        migrations.AddConstraint(
            model_name="hourratetype",
            constraint=models.CheckConstraint(
                check=models.Q(("hour__in", range(0, 24))),
                name="scbp_core_pricing_hour_rate_hour_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="hourratetype",
            constraint=models.UniqueConstraint(
                fields=("day_type", "hour"),
                name="scbp_core_pricing_hour_rate_unique_day_type_hour",
            ),
        ),
        migrations.AddConstraint(
            model_name="hourratetype",
            constraint=models.CheckConstraint(
                check=models.Q(("day_type__in", [1, 2, 3, 4])),
                name="scbp_core_pricing_hour_rate_day_type_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="hourratetype",
            constraint=models.CheckConstraint(
                check=models.Q(("hour_type__in", [1, 2, 3, 4, 5, 6])),
                name="scbp_core_pricing_hour_rate_hour_type_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="distanceoverride",
            constraint=models.UniqueConstraint(
                fields=("from_postcode", "to_postcode", "from_suburb", "to_suburb"),
                name="scbp_core_distance_override_unique_postcodes",
            ),
        ),
        migrations.AddField(
            model_name="bookingpricevariation",
            name="booking",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="price_variations",
                to="scbp_core.booking",
            ),
        ),
        migrations.AddField(
            model_name="bookingoutofpocket",
            name="booking",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="out_of_pockets",
                to="scbp_core.booking",
            ),
        ),
        migrations.AddField(
            model_name="bookinglog",
            name="booking",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="scbp_core.booking"
            ),
        ),
        migrations.AddField(
            model_name="bookinglog",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddConstraint(
            model_name="bookingleadtime",
            constraint=models.CheckConstraint(
                check=models.Q(("hour__in", range(0, 24))),
                name="scbp_core_booking_lead_time_hour_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="bookingleadtime",
            constraint=models.UniqueConstraint(
                fields=("day_type", "hour"),
                name="scbp_core_booking_lead_time_unique_day_type_hour",
            ),
        ),
        migrations.AddConstraint(
            model_name="bookingleadtime",
            constraint=models.CheckConstraint(
                check=models.Q(("day_type__in", [1, 2, 3, 4])),
                name="scbp_core_booking_lead_time_day_type_valid",
            ),
        ),
        migrations.AddIndex(
            model_name="bookingaddress",
            index=models.Index(fields=["suburb"], name="scbp_core_b_suburb_85375a_idx"),
        ),
        migrations.AddConstraint(
            model_name="bookingaddress",
            constraint=models.CheckConstraint(
                check=models.Q(("legacy_table__in", [1, 2])),
                name="scbp_core_booking_address_legacy_table_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="bookingaddress",
            constraint=models.UniqueConstraint(
                fields=("legacy_table", "legacy_jobnumber", "legacy_stop_number"),
                name="legacy_booking_unique",
            ),
        ),
        migrations.AddField(
            model_name="bookingadditionalstop",
            name="address",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="booking_additional_stops",
                to="scbp_core.bookingaddress",
            ),
        ),
        migrations.AddField(
            model_name="bookingadditionalstop",
            name="booking",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="booking_additional_stops",
                to="scbp_core.booking",
            ),
        ),
        migrations.AddField(
            model_name="booking",
            name="account",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="scbp_core.account"
            ),
        ),
        migrations.AddField(
            model_name="booking",
            name="additional_stops",
            field=models.ManyToManyField(
                through="scbp_core.BookingAdditionalStop", to="scbp_core.bookingaddress"
            ),
        ),
        migrations.AddField(
            model_name="booking",
            name="created_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="created_bookings",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="booking",
            name="destination_address",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="+",
                to="scbp_core.bookingaddress",
            ),
        ),
        migrations.AddField(
            model_name="booking",
            name="from_address",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="+",
                to="scbp_core.bookingaddress",
            ),
        ),
        migrations.AddField(
            model_name="booking",
            name="price_list",
            field=models.ForeignKey(
                blank=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="scbp_core.pricelist",
            ),
        ),
        migrations.AddField(
            model_name="booking",
            name="vehicle",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="scbp_core.vehicle",
            ),
        ),
        migrations.AddField(
            model_name="booking",
            name="vehicle_class",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="scbp_core.vehicleclass"
            ),
        ),
        migrations.AddField(
            model_name="booking",
            name="vehicle_color",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="scbp_core.vehiclecolor",
            ),
        ),
        migrations.AddField(
            model_name="accounttoclient",
            name="account",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="scbp_core.account"
            ),
        ),
        migrations.AddField(
            model_name="accounttoclient",
            name="archived_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="archived_%(class)s",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="accountstatement",
            name="account",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="scbp_core.account"
            ),
        ),
        migrations.AddField(
            model_name="account",
            name="archived_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="archived_%(class)s",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="groups",
            field=models.ManyToManyField(
                blank=True,
                help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                related_name="user_set",
                related_query_name="user",
                to="auth.group",
                verbose_name="groups",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.permission",
                verbose_name="user permissions",
            ),
        ),
        migrations.CreateModel(
            name="Payment",
            fields=[],
            options={
                "proxy": True,
                "default_permissions": (),
                "indexes": [],
                "constraints": [],
            },
            bases=("scbp_core.paymentrecord",),
        ),
        migrations.CreateModel(
            name="Refund",
            fields=[],
            options={
                "proxy": True,
                "default_permissions": (),
                "indexes": [],
                "constraints": [],
            },
            bases=("scbp_core.paymentrecord",),
        ),
        migrations.AddConstraint(
            model_name="vehicleoperator",
            constraint=models.CheckConstraint(
                check=models.Q(("classification__in", [1, 2, 3, 4, 5, 7, 6])),
                name="scbp_core_vehicle_operator_classification_valid",
            ),
        ),
        migrations.AddIndex(
            model_name="vehicleclass",
            index=models.Index(
                fields=["sort_key", "abbreviation"],
                name="scbp_core_v_sort_ke_537831_idx",
            ),
        ),
        migrations.AddField(
            model_name="staffuser",
            name="archived_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="archived_%(class)s",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddConstraint(
            model_name="priceoverride",
            constraint=models.UniqueConstraint(
                fields=("account", "from_postcode", "to_postcode"),
                name="unique_account_and_postcodes",
            ),
        ),
        migrations.AddConstraint(
            model_name="priceoverride",
            constraint=models.UniqueConstraint(
                condition=models.Q(("account__isnull", True)),
                fields=("from_postcode", "to_postcode"),
                name="unique_postcodes_for_any_account",
            ),
        ),
        migrations.AddConstraint(
            model_name="priceoverride",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("is_all_day", True),
                    models.Q(
                        ("end_time__isnull", False), ("start_time__isnull", False)
                    ),
                    _connector="OR",
                ),
                name="scbp_core_price_override_time_validation",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="pricelist",
            unique_together={("is_current", "is_future")},
        ),
        migrations.AddField(
            model_name="paymentrecord",
            name="refund_of",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="refunds",
                to="scbp_core.payment",
            ),
        ),
        migrations.AddField(
            model_name="invoice",
            name="payment",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="scbp_core.payment",
            ),
        ),
        migrations.AddField(
            model_name="guesttraveller",
            name="client_user",
            field=models.ForeignKey(
                help_text="Client this guest is associated with",
                on_delete=django.db.models.deletion.CASCADE,
                to="scbp_core.clientuser",
            ),
        ),
        migrations.AddField(
            model_name="driveruser",
            name="archived_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="archived_%(class)s",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="driveruser",
            name="current_vehicle",
            field=models.ForeignKey(
                help_text="This vehicle will be assigned to any bookings this driver completes",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="drivers",
                to="scbp_core.vehicle",
            ),
        ),
        migrations.AddField(
            model_name="clientuser",
            name="archived_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="archived_%(class)s",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="clientaddress",
            name="client",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="scbp_core.clientuser"
            ),
        ),
        migrations.AddConstraint(
            model_name="bookingpricevariation",
            constraint=models.CheckConstraint(
                check=models.Q(("variation_type__in", [1, 2, 3, 5, 6, 4])),
                name="scbp_core_booking_price_variation_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="bookingadditionalstop",
            constraint=models.UniqueConstraint(
                fields=("booking", "stop_number"), name="booking_unique_stop_order"
            ),
        ),
        migrations.AddField(
            model_name="booking",
            name="client_user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="bookings",
                to="scbp_core.clientuser",
            ),
        ),
        migrations.AddField(
            model_name="booking",
            name="driver",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="scbp_core.driveruser",
            ),
        ),
        migrations.AddField(
            model_name="booking",
            name="passenger",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="rides",
                to="scbp_core.clientuser",
            ),
        ),
        migrations.AddField(
            model_name="booking",
            name="requested_driver",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="requested_driver",
                to="scbp_core.driveruser",
            ),
        ),
        migrations.AddField(
            model_name="accounttoclient",
            name="client_user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="scbp_core.clientuser"
            ),
        ),
        migrations.AddConstraint(
            model_name="accountstatement",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("date_paid__isnull", True), ("statement_status", 1)),
                    models.Q(("date_paid__isnull", False), ("statement_status", 2)),
                    _connector="OR",
                ),
                name="scbp_core_statement_date_paid_status",
            ),
        ),
        migrations.AddConstraint(
            model_name="accountstatement",
            constraint=models.CheckConstraint(
                check=models.Q(("payment_method__in", [1, 2, 3])),
                name="scbp_core_statement_payment_method",
            ),
        ),
        migrations.AddConstraint(
            model_name="accountstatement",
            constraint=models.CheckConstraint(
                check=models.Q(("statement_status__in", [1, 2])),
                name="scbp_core_statement_statement_status",
            ),
        ),
        migrations.AddField(
            model_name="account",
            name="approved_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="scbp_core.staffuser",
            ),
        ),
        migrations.AddField(
            model_name="account",
            name="clients",
            field=models.ManyToManyField(
                through="scbp_core.AccountToClient", to="scbp_core.clientuser"
            ),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["last_name", "first_name"],
                name="scbp_core_u_last_na_d46c09_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="paymentrecord",
            constraint=models.CheckConstraint(
                check=models.Q(("payment_method__in", [1, 2, 3])),
                name="scbp_core_payment_payment_method",
            ),
        ),
        migrations.AddConstraint(
            model_name="paymentrecord",
            constraint=models.CheckConstraint(
                check=models.Q(("status__in", [1, 2, 3])),
                name="scbp_core_payment_status",
            ),
        ),
        migrations.AddConstraint(
            model_name="paymentrecord",
            constraint=models.CheckConstraint(
                check=models.Q(("base_amount", 0), _negated=True),
                name="scbp_core_payment_record_amount_nonzero",
            ),
        ),
        migrations.AddConstraint(
            model_name="paymentrecord",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("refund_of__isnull", True), ("base_amount__lt", 0), _connector="OR"
                ),
                name="scbp_core_payment_record_negative_amount_with_refund_of",
            ),
        ),
        migrations.AddConstraint(
            model_name="paymentrecord",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("base_amount__gt", 0), ("invoice__isnull", True)),
                    models.Q(("base_amount__lt", 0), ("invoice__isnull", False)),
                    _connector="OR",
                ),
                name="scbp_core_payment_record_invoice_base_amount_validation",
            ),
        ),
        migrations.AddConstraint(
            model_name="invoice",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("date_paid__isnull", True), ("invoice_status", 1)),
                    models.Q(("date_paid__isnull", False), ("invoice_status", 2)),
                    _connector="OR",
                ),
                name="scbp_core_invoice_date_paid_status",
            ),
        ),
        migrations.AddConstraint(
            model_name="invoice",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("invoice_total_amount__gt", 0),
                    ("payment__isnull", True),
                    _connector="OR",
                ),
                name="scbp_core_invoice_total_amount_payment",
            ),
        ),
        migrations.AddConstraint(
            model_name="invoice",
            constraint=models.CheckConstraint(
                check=models.Q(("payment_method__in", [1, 2, 3])),
                name="scbp_core_invoice_payment_method",
            ),
        ),
        migrations.AddConstraint(
            model_name="invoice",
            constraint=models.CheckConstraint(
                check=models.Q(("invoice_status__in", [1, 2])),
                name="scbp_core_invoice_invoice_status",
            ),
        ),
        migrations.AddConstraint(
            model_name="clientaddress",
            constraint=models.CheckConstraint(
                check=models.Q(("address_type__in", [2, 3, 4])),
                name="scbp_core_client_address_address_type_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="clientaddress",
            constraint=models.CheckConstraint(
                check=models.Q(("legacy_table__in", [1, 2, 3])),
                name="scbp_core_client_address_legacy_table_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="clientaddress",
            constraint=models.UniqueConstraint(
                fields=("legacy_table", "legacy_recordid", "legacy_seqno"),
                name="legacy_client_address_unique",
            ),
        ),
        migrations.AddIndex(
            model_name="booking",
            index=models.Index(
                fields=["booking_status", "driver", "travel_on"],
                name="scbp_core_b_booking_7131fb_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="booking",
            constraint=models.CheckConstraint(
                check=models.Q(("from_address_type__in", [1, 2, 3, 4, 5])),
                name="scbp_core_booking_from_address_type_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="booking",
            constraint=models.CheckConstraint(
                check=models.Q(("destination_address_type__in", [1, 2, 3, 4, 5])),
                name="scbp_core_booking_destination_address_type_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="booking",
            constraint=models.CheckConstraint(
                check=models.Q(("booking_type__in", [1, 2])),
                name="scbp_core_booking_booking_type_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="booking",
            constraint=models.CheckConstraint(
                check=models.Q(("booking_payment_method__in", [1, 2, 3, 4])),
                name="scbp_core_booking_booking_payment_method_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="booking",
            constraint=models.CheckConstraint(
                check=models.Q(("legacy_review_status__in", [1, 2])),
                name="scbp_core_booking_legacy_review_status_valid",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="accounttoclient",
            unique_together={
                ("client_user", "is_default_account"),
                ("client_user", "account"),
            },
        ),
        migrations.AddConstraint(
            model_name="account",
            constraint=models.CheckConstraint(
                check=models.Q(("rate_schedule__in", [1, 2, 3, 4])),
                name="scbp_core_account_rate_schedule_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="account",
            constraint=models.CheckConstraint(
                check=models.Q(("payment_terms__in", [1, 3])),
                name="scbp_core_account_payment_terms_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="account",
            constraint=models.CheckConstraint(
                check=models.Q(("payment_method__in", [1, 2, 3])),
                name="scbp_core_account_payment_method_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="account",
            constraint=models.CheckConstraint(
                check=models.Q(("invoicing_method__in", [1, 2, 3])),
                name="scbp_core_account_invoicing_method_valid",
            ),
        ),
    ]
